var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.645,1,2.904]],["body/controllers/AppController.html",[0,2.747,1,4.85,2,2.239,3,0.2,4,0.2,5,0.18,6,4.766,7,0.375,8,2.114,9,6.599,10,1.13,11,0.014,12,0.63,13,5.474,14,1.722,15,0.916,16,0.323,17,1.052,18,4.571,19,4.766,20,0.2,21,0.202,22,2.917,23,2.43,24,1.662,25,5.474,26,0.011,27,0.011]],["title/modules/AppModule.html",[28,1.221,29,2.904]],["body/modules/AppModule.html",[1,4.131,2,1.999,3,0.124,4,0.124,5,0.112,11,0.014,16,0.379,17,0.653,18,4.34,19,2.96,20,0.124,21,0.125,26,0.008,27,0.008,28,1.737,29,5.921,30,1.447,31,1.447,32,1.575,33,1.575,34,1.447,35,2.652,36,1.575,37,2.96,38,2.96,39,2.96,40,4.632,41,4.09,42,4.09,43,4.09,44,4.09,45,3.677,46,4.632,47,4.632,48,4.34,49,3.503,50,2.265,51,1.575,52,1.447,53,3.399,54,2.772,55,3.399,56,3.399,57,3.839,58,5.448,59,2.015,60,2.015,61,1.193,62,3.399,63,3.399,64,3.399,65,3.399,66,3.399,67,3.399,68,3.399,69,3.399,70,3.399,71,3.399,72,3.399,73,0.996,74,3.399,75,3.399,76,1.15,77,3.399,78,3.399,79,2.015]],["title/injectables/AppService.html",[18,2.53,80,0.956]],["body/injectables/AppService.html",[3,0.208,4,0.208,5,0.187,7,0.39,8,2.165,9,6.688,11,0.013,12,0.655,14,1.791,15,0.938,16,0.274,17,1.094,18,4.327,20,0.208,21,0.21,24,1.728,26,0.011,27,0.011,80,1.635,81,2.424,82,4.956,83,5.692,84,4.956,85,5.692]],["title/controllers/AuthController.html",[0,1.645,86,2.904]],["body/controllers/AuthController.html",[0,1.109,2,1.109,3,0.099,4,0.099,5,0.089,7,0.186,8,1.301,10,1.157,11,0.014,12,0.645,14,1.763,16,0.336,17,0.521,20,0.099,21,0.1,23,1.835,24,1.701,26,0.007,27,0.007,52,1.155,73,2.221,76,2.483,86,2.985,87,2.361,88,1.705,89,2.712,90,3.935,91,3.935,92,4.879,93,4.134,94,2.361,95,4.266,96,5.228,97,2.775,98,2.712,99,2.712,100,1.895,101,1.531,102,0.483,103,1.116,104,3.767,105,2.712,106,2.712,107,2.712,108,4.266,109,2.712,110,2.712,111,2.712,112,1.066,113,2.712,114,4.045,115,2.712,116,2.712,117,4.134,118,1.82,119,2.6,120,3.362,121,3.362,122,3.761,123,1.82,124,2.969,125,2.13,126,1.835,127,1.705,128,2.13,129,0.667,130,1.204,131,2.361,132,1.376,133,1.958,134,2.712,135,1.607,136,2.712,137,1.607,138,1.958,139,2.712,140,1.109,141,1.835,142,2.361,143,1.45,144,2.003,145,2.775,146,2.775,147,2.712,148,2.712,149,2.712,150,2.712,151,3.362,152,1.737,153,3.248,154,1.824,155,2.712,156,6.079,157,5.01,158,3.935,159,4.134,160,2.712,161,4.134,162,2.712,163,1.895,164,2.712,165,2.81,166,2.098,167,2.712,168,2.712,169,5.01,170,2.712,171,2.712,172,2.712,173,2.712,174,2.712,175,1.958,176,2.712,177,2.712,178,2.712,179,2.712,180,2.361]],["title/modules/AuthModule.html",[28,1.221,40,2.7]],["body/modules/AuthModule.html",[2,2.346,3,0.157,4,0.157,5,0.141,11,0.014,16,0.382,17,0.823,20,0.157,21,0.158,26,0.009,27,0.009,28,1.964,30,1.822,31,1.822,32,1.983,33,1.983,34,1.822,35,2.998,36,1.983,40,5.373,49,3.765,50,2.658,51,1.983,52,1.822,54,2.779,57,3.362,59,2.536,86,4.67,124,4.396,125,3.362,181,3.726,182,3.726,183,4.28,184,4.979,185,4.979,186,4.28,187,4.28,188,3.726,189,5.736,190,2.691,191,3.726,192,2.691,193,3.726,194,4.28,195,3.362,196,3.362,197,3.362,198,4.28,199,4.28,200,3.726,201,3.726,202,4.28]],["title/injectables/AuthService.html",[80,0.956,124,2.384]],["body/injectables/AuthService.html",[3,0.089,4,0.089,5,0.08,7,0.168,8,1.201,11,0.014,12,0.702,14,1.81,15,0.978,16,0.326,17,0.47,20,0.089,21,0.09,24,1.747,26,0.006,27,0.006,52,1.041,59,1.449,76,2.512,79,1.449,80,0.907,81,1.041,90,3.688,91,5.775,92,3.324,94,2.129,95,4.092,100,2.062,101,1.666,102,0.525,103,1.215,104,2.262,112,2.086,124,2.262,126,2.707,127,1.538,129,1.416,131,2.129,140,1.561,141,2.084,143,1.861,152,1.958,154,2.646,163,0.925,180,2.129,192,1.538,195,1.921,196,1.921,197,1.921,203,2.129,204,3.817,205,3.817,206,2.129,207,5.003,208,4.695,209,4.619,210,2.446,211,3.817,212,2.769,213,2.446,214,2.446,215,3.817,216,2.446,217,2.57,218,3.817,219,2.446,220,3.817,221,2.446,222,3.336,223,2.999,224,2.129,225,3.324,226,2.129,227,1.921,228,2.129,229,2.446,230,2.458,231,2.446,232,2.446,233,2.827,234,2.446,235,2.446,236,2.129,237,3.817,238,2.446,239,2.446,240,3.817,241,1.372,242,4.695,243,6.369,244,2.084,245,3.151,246,5.737,247,3.817,248,4.619,249,3.817,250,3.817,251,2.446,252,2.129,253,2.446,254,3.817,255,2.446,256,2.446,257,2.129,258,3.817,259,3.817,260,3.324,261,2.999,262,3.817,263,2.446,264,2.446,265,1.766]],["title/classes/ChatGateway.html",[21,0.148,266,2.384]],["body/classes/ChatGateway.html",[3,0.086,4,0.086,5,0.077,7,0.162,8,1.167,10,0.487,11,0.014,12,0.749,14,1.779,15,0.819,16,0.346,17,0.453,20,0.086,21,0.087,23,1.047,24,1.717,26,0.006,27,0.006,73,0.691,76,2.264,79,1.397,100,2.03,101,1.64,102,0.56,103,1.196,112,0.927,123,1.582,126,2.889,140,1.517,141,2.665,143,1.301,152,1.64,154,1.894,163,2.376,192,1.483,207,4.716,212,1.875,217,1.797,222,2.333,257,2.053,261,1.852,266,2.198,267,0.58,268,2.053,269,2.678,270,4.585,271,4.585,272,0.713,273,6.004,274,3.602,275,3.709,276,3.709,277,3.709,278,3.709,279,3.23,280,2.053,281,3.347,282,3.709,283,4.585,284,2.357,285,5.2,286,1.256,287,1.323,288,3.709,289,2.357,290,2.357,291,5.469,292,2.357,293,4.527,294,3.709,295,2.357,296,3.23,297,3.709,298,4.923,299,2.357,300,3.709,301,3.351,302,2.357,303,2.357,304,3.709,305,1.852,306,2.914,307,1.702,308,2.357,309,2.357,310,1.323,311,1.702,312,1.852,313,2.357,314,2.678,315,1.582,316,2.053,317,2.357,318,1.852,319,1.702,320,2.357,321,2.053,322,2.357,323,2.357,324,2.357,325,1.702,326,2.357,327,1.702,328,2.357,329,3.992,330,2.053,331,2.053,332,4.585,333,2.053,334,1.483,335,2.053,336,2.053,337,1.852,338,2.357,339,3.23,340,2.357,341,2.357,342,2.357,343,2.357,344,2.333,345,2.357,346,2.053,347,1.852,348,2.357,349,2.357,350,3.23,351,2.357,352,1.458,353,2.357,354,2.357,355,1.852,356,2.357,357,2.357,358,2.357,359,2.357,360,2.357,361,2.357,362,2.357,363,2.357,364,2.357,365,2.053,366,2.357,367,3.709,368,2.357,369,2.357,370,2.357,371,2.357,372,2.357,373,2.357,374,1.142,375,2.357,376,2.914,377,1.882,378,1.852,379,1.852,380,1.397,381,1.852,382,1.852,383,1.852]],["title/modules/ChatModule.html",[28,1.221,41,2.384]],["body/modules/ChatModule.html",[3,0.173,4,0.173,5,0.156,11,0.014,16,0.373,17,0.909,20,0.173,21,0.174,26,0.01,27,0.01,28,2.063,30,2.015,31,2.015,32,2.192,33,2.192,34,2.015,35,2.839,36,3.149,41,4.602,45,4.065,49,3.11,50,2.839,51,2.192,52,2.015,54,2.969,57,3.717,59,2.804,191,4.12,192,2.975,193,4.12,200,4.12,201,4.12,266,4.664,310,3.438,384,4.12,385,4.12,386,4.731,387,4.731,388,4.731,389,4.731,390,4.12,391,3.717]],["title/classes/CreateMessageDTO.html",[21,0.148,392,2.7]],["body/classes/CreateMessageDTO.html",[3,0.172,4,0.172,5,0.154,7,0.321,10,1.479,11,0.013,12,0.824,15,1.071,16,0.226,20,0.172,21,0.225,26,0.01,27,0.01,102,0.617,103,1.214,163,2.808,267,1.154,272,1.171,352,2.66,392,4.089,393,6.465,394,1.708,395,4.01,396,6.767,397,5.316,398,3.385,399,3.683,400,4.689,401,4.689,402,6.092,403,3.683,404,3.385,405,3.441,406,3.32,407,3.092,408,3.636,409,1.529]],["title/classes/CreateNotificationDTO.html",[21,0.148,410,2.904]],["body/classes/CreateNotificationDTO.html",[3,0.192,4,0.192,5,0.172,7,0.359,10,1.349,11,0.013,12,0.752,15,1.018,16,0.252,20,0.192,21,0.241,26,0.011,27,0.011,73,1.916,102,0.563,267,1.289,272,1.256,301,4.223,374,3.452,394,1.907,405,3.029,406,3.302,408,3.317,409,1.708,410,4.719,411,6.204,412,3.78,413,2.938,414,4.559,415,4.114,416,4.719,417,3.78]],["title/classes/CreateRoomDTO.html",[21,0.148,418,2.904]],["body/classes/CreateRoomDTO.html",[3,0.19,4,0.19,5,0.171,7,0.356,10,1.344,11,0.013,12,0.749,15,1.015,16,0.25,20,0.19,21,0.24,26,0.011,27,0.011,73,1.908,102,0.561,267,1.28,272,1.251,352,2.793,394,1.894,406,3.292,408,3.605,409,1.696,413,2.918,414,4.529,415,4.086,416,4.699,417,3.755,418,4.699,419,6.185,420,4.768,421,3.025,422,3.755]],["title/classes/CreateTaskDTO.html",[21,0.148,423,2.7]],["body/classes/CreateTaskDTO.html",[3,0.156,4,0.156,5,0.14,7,0.292,10,1.485,11,0.014,12,0.828,15,1.01,16,0.31,20,0.156,21,0.238,26,0.009,27,0.009,102,0.62,144,2.769,267,1.047,272,1.098,287,3.619,374,3.126,394,1.55,398,4.126,405,2.99,406,3.432,408,2.9,409,1.388,421,3.154,422,3.073,423,3.836,424,6.449,425,4.33,426,4.389,427,4.658,428,3.126,429,4.256,430,3.387,431,4.256,432,4.256,433,4.256,434,4.256,435,4.256,436,4.256,437,2.677,438,4.976,439,2.523,440,2.857,441,3.344,442,3.344]],["title/classes/CreateUserDTO.html",[21,0.148,114,2.904]],["body/classes/CreateUserDTO.html",[3,0.126,4,0.126,5,0.113,7,0.236,10,1.508,11,0.014,12,0.841,15,1.029,16,0.303,20,0.126,21,0.213,26,0.008,27,0.008,102,0.65,103,0.984,114,3.567,128,5.843,129,1.83,130,1.532,144,3.23,230,2.674,244,3.079,267,0.849,272,0.95,286,1.839,287,4.007,394,1.257,398,4.167,399,2.711,403,2.711,405,3.09,406,3.31,409,1.126,428,3.053,437,2.171,439,2.046,443,4.167,444,4.363,445,4.167,446,3.238,447,3.874,448,3.005,449,3.451,450,3.881,451,3.451,452,3.005,453,3.451,454,3.451,455,3.63,456,4.941,457,3.005,458,4.549,459,3.451,460,3.451,461,3.451,462,3.107,463,3.451,464,4.941,465,4.302,466,2.316,467,4.302,468,3.451,469,3.451]],["title/classes/CreateWorkerDTO.html",[21,0.148,458,2.904]],["body/classes/CreateWorkerDTO.html",[3,0.207,4,0.207,5,0.186,7,0.387,10,1.167,11,0.013,12,0.65,15,0.934,16,0.272,20,0.207,21,0.252,26,0.011,27,0.011,102,0.487,267,1.391,272,1.316,394,2.058,406,3.174,408,3.476,409,1.843,413,3.17,422,4.08,458,4.945,470,5.964,471,3.571]],["title/interfaces/DeleteMessage.html",[472,1.949,473,2.904]],["body/interfaces/DeleteMessage.html",[3,0.204,4,0.204,5,0.183,7,0.382,11,0.013,15,0.999,16,0.268,20,0.204,26,0.011,27,0.011,102,0.585,103,1.519,272,1.305,344,4.795,472,2.699,473,4.902,474,3.504,475,4.851,476,7.625,477,7.325,478,4.851,479,2.372]],["title/classes/EmailDTO.html",[21,0.148,480,2.904]],["body/classes/EmailDTO.html",[3,0.177,4,0.177,5,0.159,7,0.331,10,1.496,11,0.013,12,0.834,15,1.078,16,0.232,20,0.177,21,0.229,26,0.01,27,0.01,102,0.624,103,1.238,267,1.189,272,1.194,394,1.76,404,3.489,405,3.473,406,3.358,407,3.153,409,1.576,412,4.485,415,3.797,462,3.907,480,4.485,481,6.527,482,5.978,483,5.978,484,4.608,485,3.489,486,3.797,487,3.489,488,3.797]],["title/interfaces/IResponse.html",[137,2.384,472,1.949]],["body/interfaces/IResponse.html",[3,0.212,4,0.212,5,0.191,7,0.397,11,0.013,15,1.017,20,0.212,26,0.011,27,0.011,102,0.499,103,1.386,112,2.279,137,4.123,163,2.923,166,3.922,272,1.337,472,2.809,474,3.646,489,5.048]],["title/injectables/JWTStrategy.html",[80,0.956,184,2.7]],["body/injectables/JWTStrategy.html",[3,0.136,4,0.136,5,0.123,7,0.256,8,1.643,11,0.014,12,0.693,14,1.643,15,0.712,16,0.351,17,0.717,20,0.136,21,0.137,22,1.988,23,1.656,24,1.829,26,0.008,27,0.008,76,2.037,80,1.241,81,1.588,100,2.037,101,1.645,102,0.519,103,1.2,108,2.504,112,1.467,126,3.159,127,2.346,129,1.285,132,1.893,140,1.526,141,2.673,143,1.309,152,1.019,154,1.358,184,3.504,190,2.346,206,3.248,212,2.808,217,1.807,222,2.346,223,4.101,230,1.729,233,1.988,244,1.656,246,3.248,265,4.348,314,3.769,315,2.504,319,2.693,337,2.93,339,3.248,347,2.93,377,1.893,490,3.248,491,2.782,492,5.22,493,5.244,494,5.244,495,4.546,496,3.73,497,4.546,498,4.378,499,3.73,500,5.22,501,3.73,502,3.248,503,3.248,504,2.93,505,3.769,506,3.248,507,3.248,508,3.248,509,3.73,510,3.248,511,3.248,512,3.248,513,4.546,514,3.73,515,1.807,516,3.73,517,3.248,518,3.73,519,3.73,520,3.73]],["title/injectables/JwtAuthGuard.html",[80,0.956,135,2.384]],["body/injectables/JwtAuthGuard.html",[3,0.216,4,0.216,5,0.194,11,0.013,16,0.338,17,1.135,20,0.216,21,0.218,26,0.011,27,0.011,80,1.672,81,2.515,135,4.169,190,3.715,491,3.748,521,5.143,522,7.034,523,5.143]],["title/classes/LoginDTO.html",[21,0.148,95,2.7]],["body/classes/LoginDTO.html",[3,0.198,4,0.198,5,0.177,7,0.37,10,1.375,11,0.013,12,0.767,15,1.029,16,0.26,20,0.198,21,0.245,26,0.011,27,0.011,95,4.47,102,0.574,230,3.347,267,1.328,272,1.28,398,3.898,405,3.086,406,3.347,409,1.761,446,4.052,448,4.701,462,4.189,524,4.701,525,5.399,526,5.399]],["title/modules/MailModule.html",[28,1.221,42,2.384]],["body/modules/MailModule.html",[3,0.175,4,0.175,5,0.157,11,0.014,16,0.329,17,0.92,20,0.175,21,0.176,26,0.01,27,0.01,28,2.075,30,2.039,31,2.039,32,2.219,33,2.219,34,2.039,35,3.168,36,3.168,42,4.615,50,2.862,51,2.219,52,2.039,54,2.32,73,1.404,129,1.178,158,3.762,527,4.17,528,4.17,529,4.17,530,5.119,531,4.789,532,4.789,533,4.789,534,3.762,535,3.762,536,4.789,537,4.789,538,4.789,539,4.789,540,4.789,541,4.789,542,4.789,543,4.789,544,4.789,545,4.789,546,4.789]],["title/injectables/MailService.html",[80,0.956,530,2.53]],["body/injectables/MailService.html",[3,0.182,4,0.182,5,0.163,7,0.341,8,1.99,11,0.014,12,0.728,14,1.564,16,0.335,17,0.955,20,0.182,21,0.183,22,2.649,26,0.01,27,0.01,76,2.353,80,1.503,81,2.117,100,2.139,101,1.728,102,0.545,103,1.26,130,2.207,140,2.033,166,3.21,480,5.286,530,3.978,534,3.905,535,3.905,547,4.328,548,6.325,549,4.971,550,7.728,551,4.971,552,6.325,553,4.971,554,4.971,555,4.971,556,4.971,557,4.971]],["title/classes/Manager.html",[21,0.148,471,1.949]],["body/classes/Manager.html",[3,0.187,4,0.187,5,0.168,7,0.349,10,1.053,11,0.014,12,0.587,16,0.355,20,0.258,21,0.188,26,0.01,27,0.01,61,1.789,102,0.606,129,1.732,152,1.394,267,1.255,272,1.236,286,2.718,471,3.115,479,2.998,491,2.718,558,3.682,559,5.53,560,4.172,561,3.682,562,5.1,563,4.043,564,2.979,565,3.208,566,3.81,567,4.441,568,4.007,569,3.023,570,3.682,571,4.441]],["title/classes/Message.html",[21,0.148,163,1.522]],["body/classes/Message.html",[3,0.165,4,0.165,5,0.148,7,0.407,11,0.014,12,0.844,15,0.906,16,0.217,20,0.217,21,0.166,26,0.01,27,0.01,73,2.069,102,0.671,129,1.111,143,1.584,152,1.233,163,2.247,267,1.111,272,1.142,352,2.883,395,4.184,397,5.545,430,4.184,479,2.53,491,3.166,560,4.463,569,3.522,572,3.546,573,6.643,574,5.784,575,6.643,576,4.514,577,4.514,578,4.514,579,4.514,580,4.514,581,3.259,582,3.93,583,3.522,584,2.839]],["title/controllers/MessagesController.html",[0,1.645,585,2.904]],["body/controllers/MessagesController.html",[0,1.245,2,1.245,3,0.111,4,0.111,5,0.1,7,0.209,8,1.418,10,0.931,11,0.014,12,0.519,14,1.418,15,0.732,16,0.305,17,0.585,20,0.111,21,0.112,22,1.622,23,1.351,24,2.188,26,0.007,27,0.007,73,2.229,76,2.437,88,1.914,96,4.611,97,2.042,100,1.525,101,1.232,102,0.388,103,0.898,112,1.772,118,3.026,119,2.835,120,3.985,121,4.255,122,4.992,130,2.001,132,1.544,143,1.884,144,2.602,145,3.604,146,3.604,151,3.985,152,1.622,154,2.162,163,2.926,165,2.529,217,2.602,241,1.707,365,2.65,392,3.985,395,2.672,515,1.474,585,3.255,586,2.65,587,3.043,588,2.672,589,4.218,590,2.65,591,3.043,592,3.043,593,2.65,594,3.985,595,3.043,596,3.043,597,2.488,598,2.835,599,1.914,600,2.672,601,2.65,602,2.65,603,3.043,604,3.043,605,3.043,606,1.914,607,3.043,608,3.925,609,3.043,610,3.043,611,4.286,612,2.197,613,1.914,614,3.877,615,3.043,616,2.391,617,2.042,618,2.042,619,3.043,620,2.197,621,2.391,622,3.043,623,2.65]],["title/modules/MessagesModule.html",[28,1.221,43,2.384]],["body/modules/MessagesModule.html",[2,2.354,3,0.157,4,0.157,5,0.141,11,0.014,16,0.371,17,0.827,20,0.157,21,0.159,26,0.009,27,0.009,28,1.97,30,1.832,31,1.832,32,1.994,33,1.994,34,1.832,35,3.006,36,3.006,41,4.403,43,4.715,45,3.959,49,2.922,50,2.668,51,1.994,52,1.832,54,2.789,60,2.55,61,1.51,101,1.176,163,1.628,310,3.229,391,3.38,564,1.994,581,4.156,585,4.683,600,4.748,601,3.747,624,3.747,625,3.747,626,3.747,627,4.303,628,4.303,629,4.303,630,3.747,631,3.747,632,3.747,633,2.706,634,4.303]],["title/injectables/MessagesService.html",[80,0.956,600,2.384]],["body/injectables/MessagesService.html",[3,0.104,4,0.104,5,0.093,7,0.195,8,1.349,11,0.014,12,0.661,14,1.623,15,0.585,16,0.347,17,0.547,20,0.104,21,0.105,23,2.29,24,1.966,26,0.007,27,0.007,61,0.998,76,2.477,79,1.686,80,1.019,81,1.211,100,1.942,101,1.569,102,0.495,103,1.144,112,2.028,126,3.07,129,1.055,130,1.903,140,1.753,141,2.549,143,1.504,152,1.683,154,2.447,156,2.477,163,2.33,165,1.596,233,2.284,241,2.405,266,3.982,281,3.059,310,1.596,316,2.477,318,2.235,325,2.054,334,1.789,344,1.789,350,2.477,352,2.257,377,1.444,392,3.854,395,2.54,473,4.145,479,1.211,574,2.477,588,2.54,590,3.732,594,3.854,597,1.986,598,1.789,599,1.789,600,2.54,602,2.477,606,1.789,608,2.477,618,1.909,630,2.477,635,2.477,636,2.877,637,2.845,638,3.854,639,4.491,640,2.845,641,4.286,642,2.845,643,4.286,644,3.724,645,4.145,646,2.845,647,3.367,648,2.845,649,3.732,650,2.235,651,1.909,652,2.477,653,2.845,654,2.845,655,2.845,656,2.477,657,3.367,658,2.845,659,2.845,660,2.845,661,2.845,662,4.286,663,2.845,664,2.845,665,2.845,666,2.845,667,4.286,668,4.286,669,5.158,670,2.845,671,2.845,672,2.845,673,2.845,674,2.845,675,3.095,676,2.235,677,2.845,678,1.789,679,2.845,680,2.235,681,2.845]],["title/classes/Notification.html",[21,0.148,301,2.384]],["body/classes/Notification.html",[3,0.174,4,0.174,5,0.156,7,0.421,10,1.27,11,0.014,12,0.708,15,0.983,16,0.328,20,0.249,21,0.175,26,0.01,27,0.01,61,1.67,73,2.186,102,0.643,129,1.171,152,1.301,267,1.171,272,1.182,301,3.646,334,3.869,374,3.302,479,2.902,560,4.039,561,3.436,563,4.286,564,2.851,565,2.994,566,3.646,569,2.821,583,4.039,584,2.994,682,3.436,683,3.195,684,5.356,685,4.76,686,4.76,687,3.739,688,3.436,689,4.145]],["title/modules/NotificationsModule.html",[28,1.221,44,2.384]],["body/modules/NotificationsModule.html",[3,0.169,4,0.169,5,0.152,11,0.014,16,0.365,17,0.888,20,0.169,21,0.17,26,0.01,27,0.01,28,2.04,30,1.967,31,1.967,32,2.141,33,2.141,34,1.967,35,3.113,36,3.113,41,4.492,44,4.692,50,2.796,51,2.141,52,1.967,54,2.923,60,2.738,61,1.621,101,1.262,301,2.738,564,2.141,631,4.023,633,2.905,688,4.356,690,4.023,691,4.023,692,4.023,693,4.62,694,5.093,695,4.62,696,4.62,697,5.253,698,4.62]],["title/injectables/NotificationsService.html",[80,0.956,694,2.53]],["body/injectables/NotificationsService.html",[3,0.115,4,0.115,5,0.103,7,0.216,8,1.454,11,0.014,12,0.694,14,1.723,15,0.992,16,0.334,17,0.605,20,0.115,21,0.116,24,1.832,26,0.008,27,0.008,61,1.104,76,2.563,80,1.098,81,1.34,100,2.041,101,1.649,102,0.52,103,1.202,112,1.237,130,2.051,140,1.89,141,2.051,143,1.621,152,1.496,154,2.529,166,1.597,222,4.042,233,1.677,266,4.116,301,3.576,410,4.356,421,2.332,479,1.34,588,2.739,599,1.979,606,1.979,620,2.272,636,2.112,638,4.05,644,5.335,645,5.143,651,2.112,652,2.74,675,3.336,678,1.979,694,2.906,697,2.74,699,2.74,700,4.621,701,4.621,702,3.147,703,3.147,704,4.621,705,4.621,706,3.147,707,4.621,708,3.147,709,4.621,710,3.795,711,6.034,712,3.147,713,2.472,714,3.147,715,2.472,716,3.147,717,3.147,718,3.147,719,3.147,720,3.147,721,3.147,722,3.147,723,3.147,724,3.147,725,3.147,726,3.147,727,3.147,728,3.147,729,3.147,730,3.147,731,3.147,732,3.63,733,3.147]],["title/classes/PaginationDTO.html",[21,0.148,734,2.7]],["body/classes/PaginationDTO.html",[3,0.174,4,0.174,5,0.156,7,0.326,10,1.407,11,0.013,12,0.784,15,0.839,16,0.296,20,0.174,21,0.251,26,0.01,27,0.01,102,0.658,103,1.522,267,1.171,272,1.182,394,1.733,404,3.436,405,2.851,407,3.656,409,1.552,439,2.821,485,3.436,486,3.739,597,3.158,734,4.129,735,5.201,736,4.921,737,5.354,738,5.128,739,4.832,740,4.145,741,5.935,742,4.76,743,6.151]],["title/interfaces/Payload.html",[212,1.645,472,1.949]],["body/interfaces/Payload.html",[3,0.204,4,0.204,5,0.183,7,0.382,11,0.013,15,1.116,20,0.204,26,0.011,27,0.011,102,0.631,212,2.777,222,4.795,230,3.533,244,3.385,272,1.305,472,2.699,474,3.504,744,4.851]],["title/classes/ReassignWorkerDTO.html",[21,0.148,745,2.904]],["body/classes/ReassignWorkerDTO.html",[3,0.207,4,0.207,5,0.186,7,0.387,10,1.167,11,0.013,12,0.65,15,0.934,16,0.272,20,0.207,21,0.252,26,0.011,27,0.011,102,0.487,267,1.391,272,1.316,406,3.174,408,3.476,409,1.843,422,4.08,745,4.945,746,5.964,747,4.921,748,7.371,749,5.651]],["title/injectables/RefreshAuthGuard.html",[80,0.956,133,2.904]],["body/injectables/RefreshAuthGuard.html",[3,0.215,4,0.215,5,0.193,11,0.013,16,0.337,17,1.127,20,0.215,21,0.216,26,0.011,27,0.011,80,1.664,81,2.496,133,5.055,190,3.687,491,3.731,505,5.055,523,5.105,750,5.105,751,7.002]],["title/injectables/RefreshJWTStrategy.html",[80,0.956,185,2.7]],["body/injectables/RefreshJWTStrategy.html",[3,0.13,4,0.13,5,0.117,7,0.243,8,1.585,11,0.014,12,0.674,14,1.585,15,0.687,16,0.36,17,0.681,20,0.13,21,0.131,24,1.778,26,0.008,27,0.008,59,2.101,73,1.039,76,1.981,79,2.101,80,1.197,81,1.51,91,4.601,100,1.981,101,1.6,102,0.505,103,1.167,108,3.38,112,1.394,124,4.267,125,2.785,132,1.799,140,2.06,141,2.99,152,1.376,154,1.291,185,3.38,190,2.229,195,2.785,196,2.785,197,2.785,209,5.553,212,2.944,217,1.718,224,3.087,228,3.087,260,4.385,265,4.229,314,3.636,319,2.559,347,2.785,377,1.799,491,2.684,493,5.1,494,5.1,495,4.385,497,4.385,498,4.832,502,5.1,503,5.1,504,2.785,505,4.229,506,3.087,507,3.087,508,3.087,510,3.087,511,3.087,512,3.087,513,4.385,515,1.718,752,3.087,753,3.545,754,3.545,755,5.036,756,3.545,757,5.036,758,3.545,759,3.545,760,3.545,761,3.545,762,3.545,763,3.545,764,3.545,765,3.545]],["title/guards/RoleGuard.html",[380,2.384,766,2.7]],["body/guards/RoleGuard.html",[3,0.173,4,0.173,5,0.156,7,0.324,8,1.928,11,0.014,12,0.705,14,1.489,16,0.327,17,0.909,20,0.173,21,0.174,22,2.521,24,1.86,26,0.01,27,0.01,73,1.387,80,1.456,100,2.072,101,1.674,102,0.528,103,1.221,129,1.164,140,1.935,152,1.674,269,3.416,766,4.113,767,3.416,768,4.12,769,5.647,770,4.12,771,6.642,772,4.731,773,4.814,774,5.19,775,4.731,776,3.717,777,4.424,778,3.717,779,4.814,780,4.731,781,6.127,782,4.731,783,4.731,784,4.12,785,4.731]],["title/classes/Room.html",[21,0.148,352,1.581]],["body/classes/Room.html",[3,0.159,4,0.159,5,0.143,7,0.397,10,1.345,11,0.014,12,0.75,16,0.313,20,0.238,21,0.16,26,0.009,27,0.009,61,1.522,73,2.315,102,0.655,129,1.068,152,1.185,267,1.068,272,1.112,286,3.471,352,2.276,420,4.372,421,3.083,479,2.774,560,4.414,561,3.132,563,4.37,564,2.682,565,2.729,566,3.431,569,3.861,583,4.119,584,2.729,683,3.885,777,5.017,786,3.132,787,5.117,788,4.339,789,4.339,790,2.572,791,4.179,792,4.339,793,3.408,794,3.132,795,3.778]],["title/classes/RoomSearchDTO.html",[21,0.148,796,2.7]],["body/classes/RoomSearchDTO.html",[3,0.204,4,0.204,5,0.183,7,0.382,10,1.15,11,0.013,12,0.641,15,0.926,16,0.268,20,0.204,21,0.25,26,0.011,27,0.011,102,0.48,103,1.353,267,1.371,272,1.305,346,6.378,394,2.029,407,3.446,408,3.446,409,1.817,413,3.125,597,3.147,796,4.557,797,5.912,798,4.376]],["title/controllers/RoomsController.html",[0,1.645,799,2.904]],["body/controllers/RoomsController.html",[0,1.681,2,1.681,3,0.15,4,0.15,5,0.135,7,0.282,8,1.756,10,0.849,11,0.014,12,0.473,14,1.294,15,0.561,16,0.327,17,0.79,20,0.15,21,0.152,22,2.191,24,2.064,26,0.009,27,0.009,73,2.083,76,2.299,88,2.586,96,4.771,97,2.76,100,1.39,101,1.123,102,0.354,103,0.819,112,1.616,119,3.511,120,3.747,121,3.747,122,5.033,130,1.825,132,2.087,143,1.443,144,1.992,145,2.76,146,2.76,151,3.747,152,1.525,154,2.033,217,1.992,281,2.975,344,3.511,352,2.492,515,1.992,597,2.937,611,4.03,612,2.968,613,2.586,614,2.968,636,4.254,639,3.58,647,3.23,796,4.563,799,4.03,800,3.58,801,4.111,802,4.111,803,4.111,804,3.58,805,3.58,806,4.111,807,4.111,808,3.58,809,4.111]],["title/modules/RoomsModule.html",[28,1.221,45,2.144]],["body/modules/RoomsModule.html",[2,2.526,3,0.175,4,0.175,5,0.157,11,0.014,16,0.359,17,0.92,20,0.175,21,0.176,26,0.01,27,0.01,28,2.075,30,2.039,31,2.039,32,2.219,33,2.219,34,2.039,35,3.168,36,3.168,45,4.149,50,2.862,51,2.219,52,2.039,54,2.32,60,2.838,61,1.68,101,1.308,281,4.337,352,1.883,564,2.219,633,3.012,794,4.459,799,4.935,804,4.17,810,4.17,811,4.17,812,4.17,813,4.789,814,4.17,815,4.789,816,4.789]],["title/injectables/RoomsService.html",[80,0.956,281,2.144]],["body/injectables/RoomsService.html",[3,0.096,4,0.096,5,0.086,7,0.18,8,1.269,11,0.014,12,0.752,14,1.975,15,0.67,16,0.34,17,0.505,20,0.096,21,0.097,24,1.984,26,0.007,27,0.007,61,0.921,76,2.605,80,0.958,81,1.118,100,2.21,101,1.786,102,0.563,103,1.302,112,2.467,129,0.646,130,2.18,140,1.074,141,1.166,143,0.921,152,1.505,154,2.285,166,2.796,212,1.074,217,1.272,244,1.166,245,1.762,281,2.149,344,3.088,352,2.166,418,3.978,420,3.99,421,1.717,455,1.651,479,2.091,515,1.272,588,2.39,597,1.869,598,1.651,599,1.651,613,2.536,617,3.296,636,2.707,638,3.698,644,5.387,645,5.329,647,3.168,651,1.762,675,3.978,676,2.063,678,2.536,732,2.063,796,3.698,805,2.286,808,2.286,814,2.286,817,2.286,818,4.033,819,3.512,820,2.626,821,2.626,822,4.033,823,4.033,824,2.626,825,2.626,826,2.626,827,4.033,828,6.276,829,2.626,830,5.945,831,3.512,832,4.276,833,2.626,834,2.626,835,3.978,836,2.626,837,1.896,838,2.063,839,2.286,840,2.626,841,2.626,842,2.626,843,2.626,844,4.033,845,4.033,846,2.626,847,5.51,848,2.626,849,2.626,850,2.626,851,3.978,852,2.286,853,2.626]],["title/classes/SearchMessageDTO.html",[21,0.148,594,2.7]],["body/classes/SearchMessageDTO.html",[3,0.204,4,0.204,5,0.183,7,0.382,10,1.15,11,0.013,12,0.641,15,0.926,16,0.268,20,0.204,21,0.25,26,0.011,27,0.011,102,0.48,103,1.353,267,1.371,272,1.305,352,2.88,394,2.029,407,3.446,408,3.446,409,1.817,413,3.125,594,4.557,597,3.147,798,4.376,854,5.912]],["title/modules/SeederModule.html",[28,1.221,46,2.7]],["body/modules/SeederModule.html",[3,0.183,4,0.183,5,0.164,11,0.014,16,0.364,17,0.961,20,0.183,21,0.184,26,0.01,27,0.01,28,2.118,30,2.13,31,2.13,32,2.318,33,2.318,34,2.13,35,3.233,36,2.318,46,5.196,50,2.943,51,2.318,52,2.13,54,2.424,60,2.965,61,1.755,101,1.367,129,1.231,564,2.318,633,3.146,855,4.356,856,4.356,857,5.196,858,5.003,859,5.003,860,5.53,861,4.262,862,4.356]],["title/injectables/SeederService.html",[80,0.956,857,2.7]],["body/injectables/SeederService.html",[3,0.151,4,0.151,5,0.135,7,0.282,8,1.76,11,0.014,12,0.644,14,1.297,16,0.353,17,0.792,20,0.151,21,0.152,23,1.83,24,1.252,26,0.009,27,0.009,61,1.446,73,1.208,76,2.147,80,1.329,81,1.755,100,1.394,101,1.126,102,0.355,103,0.821,129,1.675,140,2.287,141,1.83,143,1.962,152,1.86,154,2.479,165,2.313,226,3.589,227,3.238,230,1.91,233,2.197,244,2.818,377,2.092,443,2.976,444,3.517,445,2.976,446,2.313,447,2.767,479,1.755,515,1.997,606,2.592,638,4.568,651,2.767,839,3.589,857,3.754,860,3.589,863,3.589,864,6.806,865,4.122,866,4.122,867,5.592,868,4.122,869,4.122,870,3.589,871,4.122,872,4.038,873,4.122,874,5.592,875,4.122,876,5.526,877,4.122,878,4.122,879,4.122,880,4.122,881,4.122,882,3.589,883,3.589,884,4.122,885,3.238,886,3.589,887,4.122,888,4.122]],["title/interfaces/ServerToClientEvents.html",[307,2.904,472,1.949]],["body/interfaces/ServerToClientEvents.html",[3,0.186,4,0.186,5,0.167,7,0.348,11,0.014,15,0.875,16,0.309,20,0.186,26,0.01,27,0.01,102,0.605,163,2.659,212,2.875,272,1.233,279,6.428,296,6.121,298,4.427,307,4.632,352,2.522,374,2.463,472,2.463,474,3.197,889,4.427,890,7.383,891,7.383,892,6.768,893,5.084,894,5.084]],["title/controllers/StripeController.html",[0,1.645,895,2.904]],["body/controllers/StripeController.html",[0,1.727,2,1.727,3,0.154,4,0.154,5,0.139,7,0.289,8,1.788,10,1.173,11,0.014,12,0.654,14,1.788,16,0.369,17,1.092,20,0.154,21,0.156,22,2.25,23,1.874,24,1.726,26,0.009,27,0.009,76,2.499,88,2.655,100,1.922,101,1.553,102,0.49,103,1.132,104,3.369,108,4.312,112,1.66,118,2.834,123,2.834,129,1.399,132,2.143,135,2.502,137,2.502,138,3.048,154,1.538,175,3.048,212,2.811,498,2.834,838,3.317,895,4.103,896,3.676,897,3.676,898,4.949,899,4.949,900,3.676,901,4.222,902,4.222,903,4.222,904,3.676,905,5.985,906,4.222,907,4.222,908,3.317,909,4.041,910,3.676,911,2.834,912,2.834,913,3.317,914,4.222,915,4.222,916,3.676,917,4.222,918,4.222,919,4.222,920,4.222,921,4.222]],["title/modules/StripeModule.html",[28,1.221,47,2.7]],["body/modules/StripeModule.html",[2,2.536,3,0.176,4,0.176,5,0.158,11,0.014,16,0.36,17,0.926,20,0.176,21,0.178,26,0.01,27,0.01,28,2.081,30,2.052,31,2.052,32,2.233,33,2.233,34,2.052,35,3.177,36,2.233,42,4.543,47,5.4,49,3.89,50,2.873,51,2.233,52,2.052,54,3.004,391,3.785,895,4.949,909,4.821,910,4.195,922,4.195,923,4.195,924,4.818,925,4.818,926,4.818,927,4.818]],["title/injectables/StripeService.html",[80,0.956,909,2.53]],["body/injectables/StripeService.html",[3,0.08,4,0.08,5,0.072,7,0.149,8,1.097,11,0.014,12,0.626,14,1.371,15,0.792,16,0.304,17,0.67,20,0.08,21,0.08,23,1.934,24,1.511,26,0.006,27,0.006,58,5.054,59,1.292,76,2.207,80,0.829,81,0.929,84,3.036,100,1.683,101,1.36,102,0.469,103,0.992,108,1.464,112,1.713,119,1.371,126,2.705,129,0.858,132,1.107,140,1.426,141,2.576,143,1.746,152,1.729,153,2.739,154,1.982,163,1.648,165,1.223,166,1.107,212,2.035,217,1.056,222,2.193,230,1.01,233,2.652,272,0.67,286,1.162,318,1.713,327,1.574,355,1.713,374,1.056,377,1.107,395,1.292,421,0.929,471,1.056,482,1.899,483,1.899,484,3.34,498,1.464,515,2.812,530,3.832,559,1.713,583,1.292,606,1.371,650,1.713,656,1.899,657,2.739,838,1.713,851,2.517,885,1.713,897,1.899,898,3.036,899,3.036,900,3.036,904,3.036,905,4.333,909,2.193,916,1.899,928,1.899,929,5.305,930,3.487,931,2.181,932,3.487,933,2.181,934,3.487,935,4.356,936,2.181,937,2.181,938,2.181,939,3.487,940,2.181,941,2.181,942,2.181,943,2.181,944,2.181,945,1.899,946,2.181,947,2.181,948,2.181,949,4.977,950,2.181,951,4.977,952,2.181,953,2.181,954,2.181,955,4.739,956,1.899,957,6.093,958,2.181,959,2.181,960,2.181,961,2.181,962,2.181,963,3.487,964,2.181,965,3.487,966,4.977,967,2.181,968,2.181,969,2.181,970,2.181,971,4.356,972,5.804,973,2.181,974,4.356,975,5.442,976,2.181,977,2.181,978,3.487,979,2.181,980,2.181,981,2.181,982,5.442,983,2.181,984,2.181,985,4.356,986,3.487,987,3.487,988,2.181,989,2.181,990,2.181,991,2.181,992,2.181,993,2.181,994,4.356,995,4.356,996,3.487,997,2.181,998,2.181,999,2.181,1000,3.793,1001,2.181,1002,2.181,1003,2.181,1004,2.181,1005,3.487,1006,2.181,1007,2.181,1008,2.181,1009,2.181,1010,2.181,1011,2.181,1012,2.181,1013,2.181,1014,2.181,1015,2.181,1016,1.899,1017,2.181,1018,2.181,1019,2.181,1020,1.899,1021,2.181,1022,1.899,1023,2.181,1024,2.181,1025,2.181,1026,2.181,1027,4.977,1028,2.181,1029,2.181,1030,2.181,1031,3.487,1032,2.181,1033,3.036,1034,2.181,1035,2.181,1036,2.181,1037,2.181,1038,3.487,1039,2.181,1040,2.181,1041,2.181,1042,2.181,1043,2.181,1044,2.181,1045,3.487,1046,2.181,1047,2.181,1048,2.181,1049,1.899,1050,1.899,1051,2.181,1052,2.181,1053,2.181]],["title/classes/Task.html",[21,0.148,421,1.713]],["body/classes/Task.html",[3,0.114,4,0.114,5,0.102,7,0.518,10,1.466,11,0.014,12,0.817,15,0.968,16,0.289,20,0.199,21,0.115,26,0.007,27,0.007,61,1.091,73,2.383,102,0.669,103,0.913,129,1.574,152,0.85,267,0.765,272,0.88,286,2.441,334,3.773,374,2.907,421,1.951,425,3.65,426,4.208,427,4.331,428,2.635,430,3.556,440,2.087,471,2.635,479,2.316,484,3.074,560,4.295,561,2.245,563,4.558,564,2.123,565,1.956,566,2.715,569,3.791,583,4.481,584,1.956,683,4.293,684,5.224,790,3.223,1054,2.245,1055,4.272,1056,4.208,1057,3.109,1058,3.109,1059,3.109,1060,3.109,1061,3.988,1062,5.224,1063,3.109,1064,3.109,1065,3.109,1066,3.109,1067,2.443,1068,2.707,1069,2.245,1070,2.707,1071,3.109]],["title/classes/TaskSearchDTO.html",[21,0.148,1072,2.7]],["body/classes/TaskSearchDTO.html",[3,0.138,4,0.138,5,0.124,7,0.259,10,1.476,11,0.014,12,0.823,15,0.516,16,0.316,20,0.138,21,0.224,26,0.009,27,0.009,102,0.616,103,1.533,130,1.68,143,1.328,144,3.18,267,0.931,272,1.013,287,4.262,394,1.378,407,3.331,409,1.234,425,4.073,426,4.236,430,3.125,437,2.38,439,2.243,440,2.54,441,2.973,442,4.142,485,2.732,487,2.732,491,2.81,597,3.312,734,4.797,735,2.732,736,3.807,737,4.142,738,3.539,739,4.142,1056,4.236,1072,3.539,1073,5.716,1074,3.784,1075,3.784,1076,3.295,1077,2.973,1078,3.295,1079,5.284,1080,3.295,1081,3.295,1082,3.295,1083,5.273,1084,3.295,1085,3.784]],["title/controllers/TasksController.html",[0,1.645,1086,2.904]],["body/controllers/TasksController.html",[0,0.884,2,0.884,3,0.079,4,0.079,5,0.071,7,0.148,8,1.09,10,1.119,11,0.014,12,0.624,14,1.705,15,0.888,16,0.344,17,0.416,20,0.079,21,0.08,22,1.152,23,0.96,24,1.916,26,0.006,27,0.006,73,1.999,76,2.447,88,1.36,96,4.076,97,2.908,100,1.833,101,1.481,102,0.467,103,1.08,104,3.957,118,2.325,119,2.724,120,3.325,121,3.325,122,4.369,123,1.451,129,1.87,130,1.923,132,1.098,135,1.282,137,1.282,138,1.561,143,1.738,144,2.099,145,2.908,146,2.908,151,2.325,152,0.946,154,1.804,163,1.639,165,1.943,166,2.199,175,3.913,212,2.991,217,2.802,233,1.152,241,2.779,244,1.537,245,2.908,315,1.451,421,2.843,423,3.325,455,1.36,515,1.678,588,2.568,589,3.403,593,1.883,597,2.007,598,2.178,599,1.36,611,2.5,612,1.561,613,2.724,614,3.128,616,1.699,617,3.325,621,1.699,678,1.36,680,1.699,710,3.115,766,2.908,790,1.282,837,1.561,872,2.5,908,1.699,911,3.881,912,1.451,913,1.699,1056,2.053,1072,3.325,1086,2.5,1087,1.883,1088,2.163,1089,1.883,1090,2.163,1091,4.578,1092,3.016,1093,2.163,1094,1.883,1095,1.883,1096,2.163,1097,1.883,1098,2.163,1099,1.883,1100,2.163,1101,1.883,1102,2.163,1103,1.883,1104,1.883,1105,1.883,1106,2.178,1107,1.883,1108,1.883,1109,1.451,1110,1.883,1111,1.883,1112,1.883,1113,1.883,1114,2.163,1115,2.163,1116,2.163,1117,2.163,1118,2.721,1119,3.016,1120,2.163,1121,1.699,1122,2.163,1123,4.332,1124,2.163,1125,3.463,1126,2.163,1127,1.883,1128,3.463,1129,3.016,1130,1.699,1131,2.163,1132,2.163]],["title/modules/TasksModule.html",[28,1.221,48,2.53]],["body/modules/TasksModule.html",[2,2.299,3,0.152,4,0.152,5,0.137,11,0.014,16,0.373,17,0.799,20,0.152,21,0.153,26,0.009,27,0.009,28,1.935,30,1.769,31,1.769,32,1.925,33,1.925,34,1.769,35,2.953,36,2.953,43,4.359,44,4.359,45,3.919,48,5.043,49,2.854,50,2.605,51,1.925,52,1.769,54,2.724,60,2.463,61,1.458,101,1.135,188,3.618,310,3.154,390,3.618,421,1.769,564,1.925,633,2.613,1069,4.059,1086,4.601,1106,5.011,1107,3.618,1133,3.618,1134,4.155,1135,3.618,1136,3.618,1137,4.155,1138,4.155,1139,3.618,1140,4.155,1141,3.618,1142,4.155]],["title/injectables/TasksService.html",[80,0.956,1106,2.53]],["body/injectables/TasksService.html",[3,0.046,4,0.046,5,0.042,7,0.087,8,0.695,11,0.014,12,0.544,14,1.382,15,0.718,16,0.3,17,0.243,20,0.046,21,0.047,23,1.775,24,1.435,26,0.004,27,0.004,61,0.444,73,0.371,76,2.217,79,0.75,80,0.525,81,0.539,100,1.599,101,1.292,102,0.407,103,0.942,112,1.572,126,2.225,127,0.795,129,1.565,130,1.305,140,0.903,141,1.775,143,2.505,152,1.814,154,2.661,163,1.112,165,1.976,166,2.544,212,2.6,217,1.424,233,3.329,241,1.239,244,0.562,245,3.804,252,1.101,265,0.913,281,2.519,310,0.71,315,0.849,325,0.913,327,2.122,334,0.795,344,1.389,352,0.497,355,2.309,374,0.613,377,0.642,420,1.482,421,2.751,423,2.364,425,0.849,426,0.75,428,2.653,440,0.849,455,2.514,471,2.29,478,1.101,479,0.94,484,0.849,515,1.937,559,1.735,588,1.309,589,1.735,597,1.023,598,1.389,599,0.795,600,2.802,606,0.795,613,1.389,617,1.973,620,0.913,623,1.101,638,2.364,644,4.421,645,2.543,649,2.559,650,0.994,651,0.849,657,2.767,675,2.543,676,0.994,678,1.389,680,1.735,694,2.215,710,2.215,715,0.994,732,0.994,736,2.543,787,0.994,790,2.802,819,1.923,831,1.923,832,2.559,837,0.913,851,3.413,852,1.923,872,0.913,885,0.994,886,1.101,1033,3.067,1049,1.101,1055,2.767,1056,1.742,1068,1.101,1072,2.364,1089,1.923,1094,1.923,1105,2.559,1106,1.389,1111,1.101,1112,1.101,1118,2.309,1121,0.994,1127,3.825,1129,1.923,1130,2.309,1139,1.101,1143,1.101,1144,1.265,1145,2.939,1146,1.265,1147,2.208,1148,1.265,1149,1.265,1150,2.208,1151,1.265,1152,1.101,1153,1.265,1154,1.265,1155,1.265,1156,1.265,1157,1.265,1158,1.265,1159,1.265,1160,1.265,1161,2.208,1162,2.208,1163,2.208,1164,2.208,1165,2.208,1166,2.208,1167,2.208,1168,1.265,1169,1.265,1170,1.265,1171,1.265,1172,1.265,1173,2.208,1174,1.265,1175,2.208,1176,1.101,1177,2.939,1178,2.208,1179,4.727,1180,1.265,1181,1.265,1182,2.208,1183,2.208,1184,2.939,1185,2.939,1186,1.265,1187,2.208,1188,1.265,1189,1.265,1190,1.923,1191,2.208,1192,1.923,1193,2.208,1194,1.265,1195,2.939,1196,2.208,1197,3.998,1198,1.265,1199,1.265,1200,1.265,1201,1.265,1202,1.265,1203,2.939,1204,2.208,1205,2.939,1206,2.939,1207,2.939,1208,2.208,1209,2.208,1210,1.265,1211,0.994,1212,4.727,1213,2.208,1214,1.265,1215,1.101,1216,1.101,1217,3.998,1218,1.265,1219,2.208,1220,1.265,1221,2.208,1222,2.939,1223,1.265,1224,1.265,1225,1.265,1226,1.265,1227,1.265,1228,2.208,1229,1.265,1230,1.265,1231,1.265,1232,1.265,1233,1.265,1234,2.208,1235,2.208,1236,1.265,1237,1.265,1238,1.265,1239,2.208,1240,1.265,1241,1.265,1242,1.265,1243,1.265,1244,1.265,1245,1.265,1246,1.265,1247,1.265,1248,1.265,1249,1.265,1250,1.265,1251,1.265,1252,1.265,1253,1.265,1254,1.265]],["title/guards/TrialGuard.html",[380,2.384,1091,2.7]],["body/guards/TrialGuard.html",[3,0.164,4,0.164,5,0.147,7,0.307,8,1.859,11,0.014,12,0.68,14,1.408,16,0.318,17,0.86,20,0.164,21,0.165,23,1.986,24,1.794,26,0.01,27,0.01,73,1.312,76,2.237,80,1.404,100,1.998,101,1.614,102,0.509,103,1.177,104,3.502,126,3.401,127,2.814,129,1.101,140,2.416,141,2.623,152,1.614,154,1.63,269,3.231,376,4.641,377,2.999,378,3.515,379,3.515,380,2.652,381,3.515,382,3.515,383,3.515,767,3.231,769,5.526,770,3.896,771,6.541,773,4.641,774,5.079,776,3.515,778,3.515,784,3.896,945,3.896,1091,3.965,1255,3.896,1256,4.475,1257,4.475]],["title/interfaces/Unique.html",[472,1.949,791,2.904]],["body/interfaces/Unique.html",[3,0.204,4,0.204,5,0.183,7,0.382,11,0.013,15,1.116,20,0.204,26,0.011,27,0.011,102,0.631,230,3.533,272,1.305,446,4.277,447,5.117,472,2.699,474,3.504,791,4.902,1258,4.851]],["title/classes/UpdateMessageDTO.html",[21,0.148,618,2.7]],["body/classes/UpdateMessageDTO.html",[3,0.205,4,0.205,5,0.184,7,0.384,10,1.158,11,0.013,12,0.646,15,0.93,16,0.27,20,0.205,21,0.251,26,0.011,27,0.011,102,0.483,163,2.58,267,1.381,272,1.311,394,2.043,395,4.355,405,3.16,406,3.16,409,1.83,412,4.051,413,3.148,618,4.577,1259,5.938]],["title/classes/UpdatePasswordDTO.html",[21,0.148,1260,2.904]],["body/classes/UpdatePasswordDTO.html",[3,0.182,4,0.182,5,0.164,7,0.342,10,1.438,11,0.013,12,0.802,15,1,16,0.24,20,0.182,21,0.234,26,0.01,27,0.01,102,0.6,230,3.228,267,1.227,272,1.218,394,1.816,405,3.228,406,3.397,409,1.626,412,3.6,413,2.798,446,4.113,462,3.986,487,3.6,488,3.917,738,4.254,741,5.518,1077,3.917,1260,4.576,1261,5.759,1262,6.967,1263,6.066,1264,4.987]],["title/classes/UpdateRoomDTO.html",[21,0.148,835,2.904]],["body/classes/UpdateRoomDTO.html",[3,0.187,4,0.187,5,0.168,7,0.351,10,1.33,11,0.013,12,0.741,15,0.879,16,0.246,20,0.187,21,0.237,26,0.01,27,0.01,73,1.888,102,0.555,103,1.474,267,1.259,272,1.238,352,2.772,394,1.863,407,3.578,408,3.269,409,1.669,413,2.871,416,4.651,417,3.694,420,4.732,777,4.651,787,5.539,835,4.651,1077,4.02,1265,6.139,1266,5.117,1267,4.455,1268,6.442]],["title/classes/UpdateTaskDTO.html",[21,0.148,710,2.53]],["body/classes/UpdateTaskDTO.html",[3,0.133,4,0.133,5,0.119,7,0.249,10,1.496,11,0.014,12,0.834,15,1.01,16,0.285,20,0.133,21,0.219,26,0.008,27,0.008,73,1.5,102,0.624,103,1.575,144,2.874,267,0.893,272,0.984,287,3.956,374,2.874,394,1.321,405,2.749,407,3.756,408,3.01,409,1.183,416,3.695,417,2.618,421,3.151,425,3.981,426,4.179,427,4.282,428,2.874,430,3.033,437,2.281,438,4.457,439,2.15,440,2.434,441,2.849,442,4.021,452,3.158,457,3.158,486,2.849,487,2.618,710,3.219,713,5.814,798,2.849,1055,4.659,1056,4.179,1076,3.158,1078,3.158,1084,3.158,1267,3.158,1269,4.457,1270,3.627,1271,3.627,1272,3.627,1273,3.627]],["title/classes/UpdateUserDTO.html",[21,0.148,1274,2.904]],["body/classes/UpdateUserDTO.html",[3,0.158,4,0.158,5,0.142,7,0.296,10,1.493,11,0.013,12,0.832,15,1.053,16,0.278,20,0.158,21,0.213,26,0.009,27,0.009,102,0.623,103,1.573,129,1.831,230,3.014,267,1.065,272,1.11,394,1.576,399,3.399,403,3.399,405,3.217,407,3.777,409,1.411,437,2.721,443,4.696,444,4.68,445,4.696,447,4.366,450,3.399,462,3.634,465,5.031,466,2.904,740,3.767,1261,5.846,1269,5.031,1274,4.171,1275,4.327,1276,4.327,1277,4.327,1278,4.327,1279,4.327]],["title/classes/User.html",[21,0.148,129,0.99]],["body/classes/User.html",[3,0.103,4,0.103,5,0.092,7,0.192,10,1.545,11,0.014,12,0.861,15,1.073,16,0.246,20,0.187,21,0.103,24,1.287,26,0.007,27,0.007,61,0.984,73,2.294,102,0.662,103,1.283,129,1.043,144,2.054,152,0.766,230,2.369,241,2.379,244,2.858,248,4.452,267,0.69,272,0.815,286,3.037,377,2.893,430,3.378,443,4.115,444,4.049,445,4.115,446,2.868,447,3.432,455,1.763,466,1.882,479,1.194,484,2.846,563,4.896,564,1.965,565,1.763,566,2.513,583,4.177,584,1.763,683,2.846,738,2.846,777,4.115,790,1.662,861,1.882,882,4.452,883,4.452,1061,5.33,1062,4.963,1263,4.452,1280,2.024,1281,5.113,1282,5.113,1283,2.804,1284,2.804,1285,2.804,1286,2.804,1287,4.24,1288,2.804,1289,2.804,1290,2.804,1291,2.804,1292,2.804,1293,2.804,1294,2.804,1295,2.804,1296,2.804,1297,2.203,1298,2.804,1299,4.24,1300,4.24,1301,4.24,1302,5.7,1303,4.24,1304,2.804,1305,2.804,1306,2.804,1307,2.441,1308,2.804]],["title/classes/UserSearchDTO.html",[21,0.148,1309,2.904]],["body/classes/UserSearchDTO.html",[3,0.149,4,0.149,5,0.134,7,0.28,10,1.464,11,0.014,12,0.816,15,0.967,16,0.326,20,0.149,21,0.233,26,0.009,27,0.009,102,0.611,103,1.556,130,1.811,144,3.059,244,3.008,267,1.004,272,1.067,287,4.103,407,3.204,409,1.33,437,2.566,439,2.418,444,4.262,450,4.362,455,2.566,466,2.738,467,4.835,485,2.945,491,2.959,597,2.573,734,4.909,735,2.945,736,4.009,737,4.362,738,3.727,739,4.362,790,2.418,1079,5.497,1080,3.552,1081,3.552,1082,3.552,1309,4.009,1310,5.497,1311,3.552,1312,5.553,1313,4.079,1314,4.079,1315,4.079,1316,4.079]],["title/controllers/UsersController.html",[0,1.645,1317,2.904]],["body/controllers/UsersController.html",[0,0.754,2,0.754,3,0.067,4,0.067,5,0.061,7,0.126,8,0.957,10,1.225,11,0.014,12,0.683,14,1.867,15,0.95,16,0.339,17,0.354,20,0.067,21,0.068,22,0.982,24,1.924,26,0.005,27,0.005,73,2.091,76,2.546,88,1.159,96,3.811,97,3.346,100,2.007,101,1.622,102,0.511,103,1.182,104,4.071,112,0.724,118,1.237,119,2.441,120,3.602,121,3.602,122,4.129,123,1.237,126,1.35,129,1.321,130,1.723,132,0.935,135,1.092,137,1.092,138,1.33,142,1.604,143,2.082,144,2.416,145,3.346,146,3.346,151,2.041,152,0.831,153,4.216,154,2.068,163,1.15,165,1.706,166,3.535,175,3.875,212,2.591,217,3.375,223,1.447,233,2.069,241,2.528,244,0.818,245,1.237,274,3.917,315,1.237,446,1.034,466,1.237,515,0.893,598,1.912,611,2.195,612,1.33,613,2.441,614,3.253,616,1.447,621,1.447,636,2.606,678,1.159,715,1.447,745,3.253,766,3.024,837,2.195,851,1.33,872,2.803,908,1.447,911,3.024,912,1.237,913,1.447,1000,2.648,1091,4.129,1092,3.38,1095,1.604,1097,1.604,1099,1.604,1101,1.604,1103,1.604,1104,1.604,1108,1.604,1109,1.237,1110,1.604,1113,1.604,1119,1.604,1121,1.447,1152,2.648,1260,3.253,1274,3.253,1309,3.253,1317,2.195,1318,1.604,1319,1.843,1320,3.882,1321,3.041,1322,3.882,1323,3.041,1324,3.041,1325,1.843,1326,1.843,1327,1.843,1328,1.843,1329,1.843,1330,1.843,1331,1.843,1332,1.843,1333,1.843,1334,1.843,1335,1.843,1336,1.843,1337,3.882,1338,1.843,1339,1.843,1340,3.253,1341,1.843,1342,1.843,1343,1.843,1344,1.843,1345,1.843,1346,1.604,1347,1.843,1348,1.843,1349,1.843,1350,1.843,1351,1.843,1352,1.843,1353,3.041,1354,3.041,1355,3.882,1356,3.38,1357,1.843,1358,1.843,1359,1.843,1360,3.882,1361,1.843,1362,1.843,1363,1.843,1364,1.843,1365,1.843,1366,1.843,1367,1.843,1368,1.843,1369,1.843,1370,1.843,1371,1.843,1372,1.843,1373,1.843,1374,1.843,1375,1.843,1376,1.843,1377,1.843]],["title/modules/UsersModule.html",[28,1.221,49,2.042]],["body/modules/UsersModule.html",[2,2.175,3,0.14,4,0.14,5,0.126,11,0.014,16,0.378,17,0.736,20,0.14,21,0.141,26,0.009,27,0.009,28,1.855,30,1.631,31,1.631,32,1.775,33,1.775,34,1.631,35,2.831,36,2.831,42,4.252,43,3.152,44,3.152,45,3.823,48,3.344,49,3.955,50,2.464,51,1.775,52,1.631,54,2.576,60,2.27,61,1.344,101,1.669,126,3.49,129,0.943,310,3.702,428,1.856,471,1.856,564,2.831,570,3.839,632,3.335,633,2.409,861,3.569,862,3.335,1141,3.335,1317,4.41,1346,3.335,1378,3.335,1379,3.335,1380,3.335,1381,3.831,1382,3.831,1383,3.831,1384,3.839,1385,3.831,1386,3.831,1387,3.831,1388,3.831,1389,3.831,1390,3.831,1391,3.831,1392,3.831,1393,3.831]],["title/classes/VerifyDTO.html",[21,0.148,1340,2.904]],["body/classes/VerifyDTO.html",[3,0.205,4,0.205,5,0.184,7,0.384,10,1.158,11,0.013,12,0.646,15,0.93,16,0.27,20,0.205,21,0.251,26,0.011,27,0.011,102,0.483,230,3.405,267,1.381,272,1.311,394,2.043,404,4.051,405,3.16,406,3.16,409,1.83,462,4.289,488,4.408,1340,4.924,1394,5.938]],["title/classes/Worker.html",[21,0.148,428,1.949]],["body/classes/Worker.html",[3,0.184,4,0.184,5,0.165,7,0.344,10,1.036,11,0.014,12,0.578,16,0.353,20,0.256,21,0.185,26,0.01,27,0.01,61,1.761,102,0.602,129,1.808,152,1.371,267,1.235,272,1.223,286,3.391,428,3.083,471,3.385,479,2.976,491,2.674,560,4.141,563,4.002,564,2.949,565,3.156,566,3.772,567,4.37,569,3.772,683,3.368,790,3.772,1384,3.623,1395,3.623,1396,5.019,1397,3.943,1398,4.37]],["title/guards/WsJwtGuard.html",[311,2.904,380,2.384]],["body/guards/WsJwtGuard.html",[3,0.139,4,0.139,5,0.125,7,0.261,8,1.665,11,0.014,12,0.609,14,1.196,16,0.344,17,0.731,20,0.139,21,0.14,23,2.349,24,1.847,26,0.009,27,0.009,73,1.551,76,2.058,79,2.254,80,1.257,100,1.789,101,1.446,102,0.456,103,1.054,104,3.136,126,3.324,127,2.391,140,2.164,141,2.349,152,1.956,154,1.927,192,2.391,207,5.623,212,1.555,261,4.156,269,2.745,280,3.311,291,4.607,293,3.311,305,2.987,306,2.987,310,2.133,311,3.82,312,4.78,314,3.82,319,2.745,325,2.745,327,2.745,329,4.607,330,3.311,331,3.311,333,3.311,334,2.391,335,3.311,336,3.311,337,2.987,376,4.156,377,2.685,378,2.987,379,2.987,380,2.254,381,2.987,382,2.987,383,2.987,517,3.311,767,2.745,769,5.167,773,4.156,774,4.749,776,2.987,1399,3.311,1400,3.803,1401,3.803,1402,3.803,1403,3.803,1404,3.803,1405,3.803,1406,3.803,1407,3.803,1408,3.803]],["title/coverage.html",[1409,4.789]],["body/coverage.html",[0,2.473,1,1.544,5,0.07,6,1.862,11,0.014,18,1.345,21,0.289,26,0.006,27,0.006,34,0.911,80,1.695,82,1.862,86,1.544,87,1.862,95,1.436,102,0.521,114,1.544,124,1.268,126,0.95,128,1.68,129,1.058,133,1.544,135,1.268,137,1.268,143,0.75,163,1.627,184,1.436,185,1.436,203,1.862,212,0.875,266,1.268,268,1.862,281,1.14,301,2.035,307,1.544,311,1.544,312,1.68,352,1.691,380,2.549,392,1.436,393,1.862,394,2.682,410,1.544,411,1.862,418,1.544,419,1.862,421,1.831,423,1.436,424,1.862,428,1.036,446,1.2,458,1.544,470,1.862,471,1.036,472,2.611,473,1.544,475,1.862,480,1.544,481,1.862,489,1.862,490,1.862,515,4.044,521,1.862,524,1.862,530,1.345,547,1.862,558,3.105,568,1.68,570,1.544,572,2.697,581,1.544,585,1.544,586,1.862,594,1.436,597,1.993,600,1.268,618,1.436,635,1.862,682,3.105,687,1.68,688,1.544,694,1.345,699,1.862,710,1.345,713,1.68,734,1.436,735,1.544,744,1.862,745,1.544,746,1.862,747,1.862,750,1.862,752,1.862,766,1.436,768,1.862,779,1.68,786,3.105,791,1.544,793,1.68,794,1.544,796,1.436,797,1.862,799,1.544,800,1.862,817,1.862,835,1.544,854,1.862,857,1.436,861,1.436,863,1.862,889,1.862,892,1.862,895,1.544,896,1.862,909,1.345,911,1.436,912,1.436,928,1.862,1054,3.105,1067,1.68,1069,1.544,1072,1.436,1073,1.862,1086,1.544,1087,1.862,1091,1.436,1106,1.345,1109,1.436,1143,1.862,1255,1.862,1258,1.862,1259,1.862,1260,1.544,1261,2.697,1265,1.862,1274,1.544,1280,3.105,1297,1.68,1309,1.544,1310,1.862,1311,1.862,1317,1.544,1318,1.862,1340,1.544,1384,1.544,1394,1.862,1395,3.105,1397,1.68,1399,1.862,1409,1.862,1410,2.139,1411,2.139,1412,2.139,1413,6.799,1414,1.862,1415,6.654,1416,7.486,1417,2.989,1418,6.285,1419,7.132,1420,1.862,1421,5.39,1422,3.433,1423,4.922,1424,5.754,1425,5.754,1426,4.3,1427,2.139,1428,2.139,1429,2.139,1430,2.139,1431,2.139]],["title/dependencies.html",[31,2.061,1432,2.921]],["body/dependencies.html",[11,0.014,17,0.92,21,0.228,26,0.01,27,0.01,31,2.039,59,2.838,61,1.68,132,2.431,190,3.012,192,3.012,225,4.17,227,3.762,305,3.762,306,4.851,409,1.562,439,2.838,479,2.039,504,4.851,505,3.457,534,3.762,535,3.762,778,3.762,929,4.17,956,4.17,1433,4.789,1434,6.835,1435,4.789,1436,4.789,1437,4.789,1438,4.789,1439,6.176,1440,6.176,1441,4.789,1442,4.789,1443,4.789,1444,4.789,1445,4.789,1446,4.789,1447,4.789,1448,4.789,1449,4.789,1450,4.789,1451,4.789,1452,4.789,1453,4.789,1454,4.789,1455,4.789,1456,4.789,1457,4.789,1458,4.789,1459,4.17,1460,4.789,1461,4.789,1462,4.789,1463,4.789,1464,4.789]],["title/miscellaneous/enumerations.html",[1465,1.882,1466,4.215]],["body/miscellaneous/enumerations.html",[7,0.354,11,0.013,26,0.011,27,0.011,143,2.274,244,2.877,287,4.614,426,3.842,428,3.14,444,4.076,471,3.14,876,5.644,1056,3.842,1211,5.092,1216,5.644,1465,2.899,1466,4.499,1467,6.482,1468,6.482,1469,5.167,1470,6.482,1471,6.482,1472,5.167,1473,6.482,1474,6.482,1475,6.482]],["title/miscellaneous/functions.html",[1465,1.882,1476,4.215]],["body/miscellaneous/functions.html",[7,0.432,11,0.012,26,0.012,27,0.012,34,3.288,1420,5.494,1465,3.54,1476,5.494,1477,6.31]],["title/index.html",[7,0.23,1478,3.355,1479,2.921]],["body/index.html",[11,0.009,26,0.008,27,0.008,90,2.659,129,1.537,158,2.659,236,2.947,241,1.899,244,2.163,274,5.579,321,4.242,374,2.36,421,3.274,426,3.383,427,2.443,428,2.36,430,3.701,471,3.206,588,3.383,617,3.831,620,3.517,870,2.947,955,4.97,1016,2.947,1020,2.947,1022,2.947,1050,4.242,1056,3.383,1109,2.272,1118,6.039,1130,5.709,1190,4.242,1192,4.97,1211,2.659,1215,2.947,1356,4.97,1459,2.947,1479,2.947,1480,3.384,1481,3.384,1482,3.384,1483,5.708,1484,3.384,1485,7.102,1486,3.384,1487,4.872,1488,3.384,1489,4.872,1490,3.384,1491,3.384,1492,3.384,1493,6.617,1494,6.891,1495,3.384,1496,3.384,1497,4.872,1498,3.384,1499,3.384,1500,4.872,1501,3.384,1502,4.872,1503,5.708,1504,3.384,1505,5.708,1506,3.384,1507,6.617,1508,5.708,1509,3.384,1510,3.384,1511,3.384,1512,3.384,1513,3.384,1514,3.384,1515,3.384,1516,3.384,1517,3.384,1518,3.384,1519,5.708,1520,3.384,1521,3.384,1522,3.384,1523,3.384,1524,3.384,1525,3.384,1526,3.384,1527,4.872,1528,3.384,1529,3.384,1530,3.384,1531,3.384,1532,3.384,1533,3.384,1534,3.384,1535,3.384,1536,3.384,1537,3.384,1538,4.872,1539,3.384,1540,3.384,1541,3.384,1542,4.872,1543,3.384,1544,3.384,1545,3.384,1546,4.872,1547,4.872,1548,4.872,1549,3.384,1550,3.384,1551,3.384,1552,3.384,1553,3.384,1554,3.384,1555,3.384,1556,3.384,1557,3.384,1558,3.384,1559,3.384,1560,3.384]],["title/modules.html",[30,2.342]],["body/modules.html",[11,0.011,26,0.011,27,0.011,29,3.819,30,2.252,40,3.55,41,3.135,42,3.135,43,3.135,44,3.135,45,2.818,46,3.55,47,3.55,48,3.326,49,2.684,1561,8.212,1562,8.212,1563,8.212,1564,8.212]],["title/overview.html",[1565,4.789]],["body/overview.html",[2,1.24,11,0.014,18,3.369,26,0.007,27,0.007,28,0.92,29,5.823,30,1.291,31,1.291,32,1.405,33,1.405,34,1.291,35,1.405,36,1.405,37,2.639,38,2.639,39,2.639,40,4.988,41,4.177,42,4.177,43,4.404,44,4.267,45,3.903,46,4.248,47,4.832,48,4.731,49,3.818,50,2.083,51,1.405,52,1.291,81,1.291,124,3.175,126,3.046,181,2.639,182,2.639,184,3.596,185,3.596,266,3.512,267,0.746,281,3.656,384,2.639,385,2.639,474,1.906,527,2.639,528,2.639,529,2.639,530,4.315,600,4.067,624,2.639,625,2.639,626,2.639,690,2.639,691,2.639,692,2.639,694,4.315,767,2.189,810,2.639,811,2.639,812,2.639,855,2.639,856,2.639,857,3.596,909,3.369,922,2.639,923,2.639,1106,4.315,1133,2.639,1135,2.639,1136,2.639,1176,2.639,1378,2.639,1379,2.639,1380,2.639,1565,2.639,1566,3.031,1567,3.031,1568,3.031,1569,3.031,1570,3.031]],["title/properties.html",[272,0.93,1432,2.921]],["body/properties.html",[11,0.013,26,0.012,27,0.012,272,1.198,374,3.021,1571,6.235,1572,6.235,1573,6.235,1574,6.235,1575,6.235]],["title/miscellaneous/typealiases.html",[1465,1.882,1576,4.841]],["body/miscellaneous/typealiases.html",[7,0.391,11,0.011,26,0.011,27,0.011,102,0.492,558,4.125,566,4.74,568,5.416,682,4.125,687,5.416,786,4.125,793,5.416,1054,4.125,1067,5.416,1280,4.125,1297,5.416,1395,4.125,1397,5.416,1465,3.205,1577,5.713,1578,4.974,1579,4.974,1580,4.974,1581,4.974,1582,4.974,1583,4.974]],["title/miscellaneous/variables.html",[1465,1.882,1584,4.215]],["body/miscellaneous/variables.html",[7,0.385,11,0.014,15,0.868,24,1.258,26,0.009,27,0.009,73,1.999,102,0.588,112,1.629,129,1.02,143,1.454,152,1.132,166,2.103,286,4.174,287,4.394,352,2.206,395,2.456,397,3.255,498,2.781,558,2.992,560,3.326,569,3.326,570,4.052,571,3.608,572,3.255,581,4.052,582,3.608,583,3.326,584,2.606,682,2.992,688,4.052,689,3.608,774,2.992,779,4.409,786,2.992,794,4.052,795,3.608,861,3.767,911,3.767,912,2.781,1054,2.992,1069,4.052,1070,3.608,1109,4.784,1280,2.992,1307,3.608,1384,4.052,1395,2.992,1398,3.608,1414,4.887,1417,3.608,1465,2.325,1578,3.608,1579,3.608,1580,3.608,1581,3.608,1582,3.608,1583,3.608,1584,3.608,1585,4.144,1586,4.144,1587,5.613,1588,4.144,1589,4.144,1590,4.144,1591,4.144,1592,4.144]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"interfaces/DeleteMessage.html":{},"classes/EmailDTO.html":{},"interfaces/IResponse.html":{},"injectables/JWTStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDTO.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Manager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationDTO.html":{},"interfaces/Payload.html":{},"classes/ReassignWorkerDTO.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"classes/Room.html":{},"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SearchMessageDTO.html":{},"modules/SeederModule.html":{},"injectables/SeederService.html":{},"interfaces/ServerToClientEvents.html":{},"controllers/StripeController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"interfaces/Unique.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VerifyDTO.html":{},"classes/Worker.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":515,"title":{},"body":{"injectables/JWTStrategy.html":{},"controllers/MessagesController.html":{},"injectables/RefreshJWTStrategy.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1572,"title":{},"body":{"properties.html":{}}}],["0.1",{"_index":992,"title":{},"body":{"injectables/StripeService.html":{}}}],["0.14.1",{"_index":1450,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1460,"title":{},"body":{"dependencies.html":{}}}],["0.41.1",{"_index":1445,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1449,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1457,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1416,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1427,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1429,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1413,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1419,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1418,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1421,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1424,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1422,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1426,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1423,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":334,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"classes/Task.html":{},"injectables/TasksService.html":{},"guards/WsJwtGuard.html":{}}}],["1.4.7",{"_index":1453,"title":{},"body":{"dependencies.html":{}}}],["1.7.9",{"_index":1447,"title":{},"body":{"dependencies.html":{}}}],["10.0.0",{"_index":1434,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1438,"title":{},"body":{"dependencies.html":{}}}],["10.1.0",{"_index":1437,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1436,"title":{},"body":{"dependencies.html":{}}}],["10.4.15",{"_index":1440,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":979,"title":{},"body":{"injectables/StripeService.html":{}}}],["10000",{"_index":950,"title":{},"body":{"injectables/StripeService.html":{}}}],["10px",{"_index":1011,"title":{},"body":{"injectables/StripeService.html":{}}}],["11",{"_index":1566,"title":{},"body":{"overview.html":{}}}],["12px",{"_index":1014,"title":{},"body":{"injectables/StripeService.html":{}}}],["14",{"_index":1568,"title":{},"body":{"overview.html":{}}}],["17.5.0",{"_index":1464,"title":{},"body":{"dependencies.html":{}}}],["2.0.2",{"_index":1433,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1448,"title":{},"body":{"dependencies.html":{}}}],["2.4.6",{"_index":1444,"title":{},"body":{"dependencies.html":{}}}],["20px",{"_index":982,"title":{},"body":{"injectables/StripeService.html":{}}}],["24px",{"_index":1006,"title":{},"body":{"injectables/StripeService.html":{}}}],["28",{"_index":1569,"title":{},"body":{"overview.html":{}}}],["2px",{"_index":997,"title":{},"body":{"injectables/StripeService.html":{}}}],["3",{"_index":1570,"title":{},"body":{"overview.html":{}}}],["3.3.0",{"_index":1435,"title":{},"body":{"dependencies.html":{}}}],["30px",{"_index":1017,"title":{},"body":{"injectables/StripeService.html":{}}}],["333",{"_index":976,"title":{},"body":{"injectables/StripeService.html":{}}}],["4.0.1",{"_index":1458,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":1463,"title":{},"body":{"dependencies.html":{}}}],["4caf50",{"_index":1009,"title":{},"body":{"injectables/StripeService.html":{}}}],["4px",{"_index":990,"title":{},"body":{"injectables/StripeService.html":{}}}],["5",{"_index":1176,"title":{},"body":{"injectables/TasksService.html":{},"overview.html":{}}}],["59",{"_index":1173,"title":{},"body":{"injectables/TasksService.html":{}}}],["5px",{"_index":1012,"title":{},"body":{"injectables/StripeService.html":{}}}],["6.9.16",{"_index":1456,"title":{},"body":{"dependencies.html":{}}}],["600px",{"_index":981,"title":{},"body":{"injectables/StripeService.html":{}}}],["7",{"_index":1567,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":1462,"title":{},"body":{"dependencies.html":{}}}],["777",{"_index":1015,"title":{},"body":{"injectables/StripeService.html":{}}}],["8.1.0",{"_index":1442,"title":{},"body":{"dependencies.html":{}}}],["8.8.4",{"_index":1454,"title":{},"body":{"dependencies.html":{}}}],["8px",{"_index":987,"title":{},"body":{"injectables/StripeService.html":{}}}],["928111125",{"_index":881,"title":{},"body":{"injectables/SeederService.html":{}}}],["999",{"_index":1174,"title":{},"body":{"injectables/TasksService.html":{}}}],["_id",{"_index":1184,"title":{},"body":{"injectables/TasksService.html":{}}}],["ability",{"_index":1504,"title":{},"body":{"index.html":{}}}],["access",{"_index":1356,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["accesstoken",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["admin",{"_index":876,"title":{},"body":{"injectables/SeederService.html":{},"miscellaneous/enumerations.html":{}}}],["admin.save",{"_index":884,"title":{},"body":{"injectables/SeederService.html":{}}}],["admin@mail.com",{"_index":878,"title":{},"body":{"injectables/SeederService.html":{}}}],["alias",{"_index":1425,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":1577,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":994,"title":{},"body":{"injectables/StripeService.html":{}}}],["allows",{"_index":1526,"title":{},"body":{"index.html":{}}}],["already",{"_index":947,"title":{},"body":{"injectables/StripeService.html":{}}}],["amount",{"_index":949,"title":{},"body":{"injectables/StripeService.html":{}}}],["api",{"_index":897,"title":{},"body":{"controllers/StripeController.html":{},"injectables/StripeService.html":{}}}],["api/auth",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["api/messages",{"_index":587,"title":{},"body":{"controllers/MessagesController.html":{}}}],["api/rooms",{"_index":801,"title":{},"body":{"controllers/RoomsController.html":{}}}],["api/tasks",{"_index":1088,"title":{},"body":{"controllers/TasksController.html":{}}}],["api/users",{"_index":1319,"title":{},"body":{"controllers/UsersController.html":{}}}],["apikey",{"_index":939,"title":{},"body":{"injectables/StripeService.html":{}}}],["app.controller",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argon2",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["argon2.hash(refreshtoken",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2.verify",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["arial",{"_index":968,"title":{},"body":{"injectables/StripeService.html":{}}}],["asked",{"_index":1558,"title":{},"body":{"index.html":{}}}],["assign",{"_index":1192,"title":{},"body":{"injectables/TasksService.html":{},"index.html":{}}}],["assigned",{"_index":1190,"title":{},"body":{"injectables/TasksService.html":{},"index.html":{}}}],["async",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"injectables/MailService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RefreshJWTStrategy.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"controllers/UsersController.html":{},"guards/WsJwtGuard.html":{}}}],["auth",{"_index":543,"title":{},"body":{"modules/MailModule.html":{}}}],["auth.controller",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["auth/types/auth.types",{"_index":838,"title":{},"body":{"injectables/RoomsService.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{}}}],["authcontroller",{"_index":86,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":523,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/RefreshAuthGuard.html":{}}}],["authguard('jwt",{"_index":522,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard(`refresh",{"_index":751,"title":{},"body":{"injectables/RefreshAuthGuard.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1575,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":329,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{}}}],["authorization.split",{"_index":333,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{}}}],["authorized",{"_index":1512,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":124,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshJWTStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":983,"title":{},"body":{"injectables/StripeService.html":{}}}],["automatically",{"_index":1539,"title":{},"body":{"index.html":{}}}],["await",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RefreshJWTStrategy.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"controllers/UsersController.html":{},"guards/WsJwtGuard.html":{}}}],["axios",{"_index":1446,"title":{},"body":{"dependencies.html":{}}}],["background",{"_index":971,"title":{},"body":{"injectables/StripeService.html":{}}}],["badrequestexception",{"_index":649,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/TasksService.html":{}}}],["badrequestexception(`cannot",{"_index":1210,"title":{},"body":{"injectables/TasksService.html":{}}}],["badrequestexception(`invalid",{"_index":1230,"title":{},"body":{"injectables/TasksService.html":{}}}],["badrequestexception(`worker",{"_index":1187,"title":{},"body":{"injectables/TasksService.html":{}}}],["based",{"_index":1507,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SeederService.html":{}}}],["bcrypt.compare",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":875,"title":{},"body":{"injectables/SeederService.html":{}}}],["bcrypt.hash(`admin",{"_index":879,"title":{},"body":{"injectables/SeederService.html":{}}}],["bcryptjs",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SeederService.html":{},"dependencies.html":{}}}],["before",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["below",{"_index":1019,"title":{},"body":{"injectables/StripeService.html":{}}}],["best",{"_index":1024,"title":{},"body":{"injectables/StripeService.html":{}}}],["block",{"_index":1004,"title":{},"body":{"injectables/StripeService.html":{}}}],["body",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["bold",{"_index":1008,"title":{},"body":{"injectables/StripeService.html":{}}}],["boolean",{"_index":777,"title":{},"body":{"guards/RoleGuard.html":{},"classes/Room.html":{},"classes/UpdateRoomDTO.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/RoomsModule.html":{},"modules/SeederModule.html":{},"modules/StripeModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["border",{"_index":985,"title":{},"body":{"injectables/StripeService.html":{}}}],["both",{"_index":1527,"title":{},"body":{"index.html":{}}}],["bottom",{"_index":996,"title":{},"body":{"injectables/StripeService.html":{}}}],["box",{"_index":988,"title":{},"body":{"injectables/StripeService.html":{}}}],["break",{"_index":1051,"title":{},"body":{"injectables/StripeService.html":{}}}],["browse",{"_index":1564,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1561,"title":{},"body":{"modules.html":{}}}],["canactivate",{"_index":769,"title":{},"body":{"guards/RoleGuard.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{}}}],["canactivate(context",{"_index":773,"title":{},"body":{"guards/RoleGuard.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{}}}],["case",{"_index":1039,"title":{},"body":{"injectables/StripeService.html":{}}}],["catch",{"_index":355,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["center",{"_index":995,"title":{},"body":{"injectables/StripeService.html":{}}}],["change",{"_index":1215,"title":{},"body":{"injectables/TasksService.html":{},"index.html":{}}}],["changes",{"_index":1520,"title":{},"body":{"index.html":{}}}],["chat",{"_index":321,"title":{},"body":{"classes/ChatGateway.html":{},"index.html":{}}}],["chat.gateway",{"_index":388,"title":{},"body":{"modules/ChatModule.html":{}}}],["chatgateway",{"_index":266,"title":{"classes/ChatGateway.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"coverage.html":{},"overview.html":{}}}],["chatmodule",{"_index":41,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules.html":{},"overview.html":{}}}],["check",{"_index":870,"title":{},"body":{"injectables/SeederService.html":{},"index.html":{}}}],["check.length",{"_index":873,"title":{},"body":{"injectables/SeederService.html":{}}}],["checkuser",{"_index":275,"title":{},"body":{"classes/ChatGateway.html":{}}}],["checkuser(userid",{"_index":288,"title":{},"body":{"classes/ChatGateway.html":{}}}],["clarity",{"_index":1536,"title":{},"body":{"index.html":{}}}],["class",{"_index":21,"title":{"classes/ChatGateway.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"classes/EmailDTO.html":{},"classes/LoginDTO.html":{},"classes/Manager.html":{},"classes/Message.html":{},"classes/Notification.html":{},"classes/PaginationDTO.html":{},"classes/ReassignWorkerDTO.html":{},"classes/Room.html":{},"classes/RoomSearchDTO.html":{},"classes/SearchMessageDTO.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"classes/VerifyDTO.html":{},"classes/Worker.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"classes/EmailDTO.html":{},"injectables/JWTStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDTO.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Manager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationDTO.html":{},"classes/ReassignWorkerDTO.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"classes/Room.html":{},"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SearchMessageDTO.html":{},"modules/SeederModule.html":{},"injectables/SeederService.html":{},"controllers/StripeController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VerifyDTO.html":{},"classes/Worker.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":267,"title":{},"body":{"classes/ChatGateway.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"classes/EmailDTO.html":{},"classes/LoginDTO.html":{},"classes/Manager.html":{},"classes/Message.html":{},"classes/Notification.html":{},"classes/PaginationDTO.html":{},"classes/ReassignWorkerDTO.html":{},"classes/Room.html":{},"classes/RoomSearchDTO.html":{},"classes/SearchMessageDTO.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"classes/VerifyDTO.html":{},"classes/Worker.html":{},"overview.html":{}}}],["client",{"_index":293,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{}}}],["client.disconnect",{"_index":332,"title":{},"body":{"classes/ChatGateway.html":{}}}],["client.handshake.auth",{"_index":331,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{}}}],["client.handshake.headers",{"_index":330,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{}}}],["client.id",{"_index":361,"title":{},"body":{"classes/ChatGateway.html":{}}}],["client.join(room.id",{"_index":353,"title":{},"body":{"classes/ChatGateway.html":{}}}],["client_secret",{"_index":935,"title":{},"body":{"injectables/StripeService.html":{}}}],["clientsession",{"_index":645,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RoomsService.html":{},"injectables/TasksService.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_chatmodule",{"_index":384,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_exports",{"_index":385,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_imports",{"_index":386,"title":{},"body":{"modules/ChatModule.html":{}}}],["cluster_mailmodule",{"_index":527,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":529,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":528,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_messagesmodule",{"_index":624,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_exports",{"_index":626,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_imports",{"_index":627,"title":{},"body":{"modules/MessagesModule.html":{}}}],["cluster_messagesmodule_providers",{"_index":625,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule",{"_index":690,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule_exports",{"_index":692,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule_imports",{"_index":693,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["cluster_notificationsmodule_providers",{"_index":691,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_roomsmodule",{"_index":810,"title":{},"body":{"modules/RoomsModule.html":{},"overview.html":{}}}],["cluster_roomsmodule_exports",{"_index":811,"title":{},"body":{"modules/RoomsModule.html":{},"overview.html":{}}}],["cluster_roomsmodule_providers",{"_index":812,"title":{},"body":{"modules/RoomsModule.html":{},"overview.html":{}}}],["cluster_seedermodule",{"_index":855,"title":{},"body":{"modules/SeederModule.html":{},"overview.html":{}}}],["cluster_seedermodule_providers",{"_index":856,"title":{},"body":{"modules/SeederModule.html":{},"overview.html":{}}}],["cluster_stripemodule",{"_index":922,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_stripemodule_imports",{"_index":924,"title":{},"body":{"modules/StripeModule.html":{}}}],["cluster_stripemodule_providers",{"_index":923,"title":{},"body":{"modules/StripeModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":1133,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_exports",{"_index":1135,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_imports",{"_index":1134,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":1136,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1378,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1380,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1381,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1379,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["co",{"_index":1555,"title":{},"body":{"index.html":{}}}],["code",{"_index":1001,"title":{},"body":{"injectables/StripeService.html":{}}}],["collaboration",{"_index":1532,"title":{},"body":{"index.html":{}}}],["collaboratorcheck",{"_index":1226,"title":{},"body":{"injectables/TasksService.html":{}}}],["collaboratorcheck.length",{"_index":1228,"title":{},"body":{"injectables/TasksService.html":{}}}],["collaborators",{"_index":1055,"title":{},"body":{"classes/Task.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDTO.html":{}}}],["color",{"_index":972,"title":{},"body":{"injectables/StripeService.html":{}}}],["common/config/jwt.config",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["common/guards/jwt.guard",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["communicate",{"_index":1487,"title":{},"body":{"index.html":{}}}],["complete",{"_index":1020,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["completed",{"_index":1211,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["config/refresh",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["configmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{},"modules/ChatModule.html":{}}}],["configmodule.forfeature(refreshjwtconfig",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"injectables/StripeService.html":{}}}],["configservice.get(`mongo_string",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["connected:${payload.userid",{"_index":340,"title":{},"body":{"classes/ChatGateway.html":{}}}],["connectedsocket",{"_index":303,"title":{},"body":{"classes/ChatGateway.html":{}}}],["connection",{"_index":357,"title":{},"body":{"classes/ChatGateway.html":{}}}],["console.log('heloooooooo",{"_index":1403,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["console.log(`admin",{"_index":888,"title":{},"body":{"injectables/SeederService.html":{}}}],["console.log(`check",{"_index":1232,"title":{},"body":{"injectables/TasksService.html":{}}}],["console.log(`message",{"_index":365,"title":{},"body":{"classes/ChatGateway.html":{},"controllers/MessagesController.html":{}}}],["console.log(`room",{"_index":350,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/MessagesService.html":{}}}],["console.log(`the",{"_index":356,"title":{},"body":{"classes/ChatGateway.html":{}}}],["console.log(`token",{"_index":1407,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["console.log(`trial",{"_index":379,"title":{},"body":{"classes/ChatGateway.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{}}}],["console.log(`unhandled",{"_index":1052,"title":{},"body":{"injectables/StripeService.html":{}}}],["console.log(`user",{"_index":339,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{}}}],["console.log(`userid",{"_index":1043,"title":{},"body":{"injectables/StripeService.html":{}}}],["console.log(`users",{"_index":342,"title":{},"body":{"classes/ChatGateway.html":{}}}],["console.log(`webhook",{"_index":1035,"title":{},"body":{"injectables/StripeService.html":{}}}],["console.log(client.id",{"_index":328,"title":{},"body":{"classes/ChatGateway.html":{}}}],["console.log(data",{"_index":715,"title":{},"body":{"injectables/NotificationsService.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{}}}],["console.log(dbuser.id",{"_index":381,"title":{},"body":{"classes/ChatGateway.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{}}}],["console.log(dbuser.trialexpiration",{"_index":382,"title":{},"body":{"classes/ChatGateway.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{}}}],["console.log(err",{"_index":1034,"title":{},"body":{"injectables/StripeService.html":{}}}],["console.log(payload",{"_index":1408,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["console.log(rooms",{"_index":348,"title":{},"body":{"classes/ChatGateway.html":{}}}],["console.log(searchdto.duedate",{"_index":1160,"title":{},"body":{"injectables/TasksService.html":{}}}],["console.log(this.users",{"_index":363,"title":{},"body":{"classes/ChatGateway.html":{}}}],["const",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"classes/Manager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"injectables/NotificationsService.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"classes/Room.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/Worker.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"injectables/MailService.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{}}}],["constructor(@injectmodel(room.name",{"_index":840,"title":{},"body":{"injectables/RoomsService.html":{}}}],["constructor(configservice",{"_index":931,"title":{},"body":{"injectables/StripeService.html":{}}}],["constructor(jwtservice",{"_index":280,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{}}}],["constructor(mailerservice",{"_index":549,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(messagemodel",{"_index":637,"title":{},"body":{"injectables/MessagesService.html":{}}}],["constructor(notificationmodel",{"_index":702,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/JWTStrategy.html":{},"injectables/MailService.html":{},"controllers/MessagesController.html":{},"guards/RoleGuard.html":{},"controllers/RoomsController.html":{},"controllers/StripeController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":770,"title":{},"body":{"guards/RoleGuard.html":{},"guards/TrialGuard.html":{}}}],["constructor(refreshjwtconfiguration",{"_index":753,"title":{},"body":{"injectables/RefreshJWTStrategy.html":{}}}],["constructor(roommodel",{"_index":820,"title":{},"body":{"injectables/RoomsService.html":{}}}],["constructor(taskmodel",{"_index":1144,"title":{},"body":{"injectables/TasksService.html":{}}}],["constructor(usermodel",{"_index":865,"title":{},"body":{"injectables/SeederService.html":{}}}],["constructor(usersservice",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{}}}],["consume",{"_index":728,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["container",{"_index":977,"title":{},"body":{"injectables/StripeService.html":{}}}],["content",{"_index":395,"title":{},"body":{"classes/CreateMessageDTO.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/StripeService.html":{},"classes/UpdateMessageDTO.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":776,"title":{},"body":{"guards/RoleGuard.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{}}}],["context.gethandler",{"_index":783,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.gettype",{"_index":1404,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":784,"title":{},"body":{"guards/RoleGuard.html":{},"guards/TrialGuard.html":{}}}],["context.switchtows().getclient",{"_index":1406,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["control",{"_index":1508,"title":{},"body":{"index.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"controllers/StripeController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"controllers/StripeController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('api",{"_index":914,"title":{},"body":{"controllers/StripeController.html":{}}}],["controller('api/auth",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('api/messages",{"_index":603,"title":{},"body":{"controllers/MessagesController.html":{}}}],["controller('api/rooms",{"_index":806,"title":{},"body":{"controllers/RoomsController.html":{}}}],["controller('api/tasks",{"_index":1114,"title":{},"body":{"controllers/TasksController.html":{}}}],["controller('api/users",{"_index":1352,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"controllers/StripeController.html":{},"modules/StripeModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":1451,"title":{},"body":{"dependencies.html":{}}}],["cors",{"_index":322,"title":{},"body":{"classes/ChatGateway.html":{}}}],["count",{"_index":1182,"title":{},"body":{"injectables/TasksService.html":{}}}],["coverage",{"_index":1409,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":588,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RoomsService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["create(@body",{"_index":605,"title":{},"body":{"controllers/MessagesController.html":{}}}],["create(data",{"_index":705,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["create(message",{"_index":590,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["create(room",{"_index":823,"title":{},"body":{"injectables/RoomsService.html":{}}}],["create(task",{"_index":1089,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["created",{"_index":606,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/SeederService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["createdat",{"_index":574,"title":{},"body":{"classes/Message.html":{},"injectables/MessagesService.html":{}}}],["createdmessage",{"_index":662,"title":{},"body":{"injectables/MessagesService.html":{}}}],["createdroom",{"_index":841,"title":{},"body":{"injectables/RoomsService.html":{}}}],["createdroom.save",{"_index":843,"title":{},"body":{"injectables/RoomsService.html":{}}}],["createdtask",{"_index":1196,"title":{},"body":{"injectables/TasksService.html":{}}}],["createdtask.id",{"_index":1200,"title":{},"body":{"injectables/TasksService.html":{}}}],["createdtask.manager.tostring",{"_index":1201,"title":{},"body":{"injectables/TasksService.html":{}}}],["createdtask.save",{"_index":1198,"title":{},"body":{"injectables/TasksService.html":{}}}],["createdtask.worker.tostring",{"_index":1202,"title":{},"body":{"injectables/TasksService.html":{}}}],["createmessagedto",{"_index":392,"title":{"classes/CreateMessageDTO.html":{}},"body":{"classes/CreateMessageDTO.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"coverage.html":{}}}],["createnotificationdto",{"_index":410,"title":{"classes/CreateNotificationDTO.html":{}},"body":{"classes/CreateNotificationDTO.html":{},"injectables/NotificationsService.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpaymentintent",{"_index":898,"title":{},"body":{"controllers/StripeController.html":{},"injectables/StripeService.html":{}}}],["createpaymentintent(@currentuser",{"_index":917,"title":{},"body":{"controllers/StripeController.html":{}}}],["createpaymentintent(user",{"_index":900,"title":{},"body":{"controllers/StripeController.html":{},"injectables/StripeService.html":{}}}],["createpaymentlink",{"_index":930,"title":{},"body":{"injectables/StripeService.html":{}}}],["createpaymentlink(userid",{"_index":934,"title":{},"body":{"injectables/StripeService.html":{}}}],["createroomdto",{"_index":418,"title":{"classes/CreateRoomDTO.html":{}},"body":{"classes/CreateRoomDTO.html":{},"injectables/RoomsService.html":{},"coverage.html":{}}}],["createtaskdto",{"_index":423,"title":{"classes/CreateTaskDTO.html":{}},"body":{"classes/CreateTaskDTO.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["createuserdto",{"_index":114,"title":{"classes/CreateUserDTO.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreateUserDTO.html":{},"coverage.html":{}}}],["createworkerdto",{"_index":458,"title":{"classes/CreateWorkerDTO.html":{}},"body":{"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"coverage.html":{}}}],["creating",{"_index":887,"title":{},"body":{"injectables/SeederService.html":{}}}],["credentials",{"_index":1509,"title":{},"body":{"index.html":{}}}],["ctx",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currency",{"_index":953,"title":{},"body":{"injectables/StripeService.html":{}}}],["currentuser",{"_index":911,"title":{},"body":{"controllers/StripeController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/IResponse.html":{},"injectables/MailService.html":{},"injectables/NotificationsService.html":{},"injectables/RoomsService.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["data.collaborators",{"_index":1222,"title":{},"body":{"injectables/TasksService.html":{}}}],["data.collaborators.includes(data.worker",{"_index":1225,"title":{},"body":{"injectables/TasksService.html":{}}}],["data.collaborators.includes(task.manager.tostring",{"_index":1223,"title":{},"body":{"injectables/TasksService.html":{}}}],["data.collaborators.includes(task.worker.tostring",{"_index":1224,"title":{},"body":{"injectables/TasksService.html":{}}}],["data.collaborators.length",{"_index":1229,"title":{},"body":{"injectables/TasksService.html":{}}}],["data.status",{"_index":1213,"title":{},"body":{"injectables/TasksService.html":{}}}],["data.worker",{"_index":1217,"title":{},"body":{"injectables/TasksService.html":{}}}],["data[0].tasks.length",{"_index":1117,"title":{},"body":{"controllers/TasksController.html":{}}}],["data[0].totalcount[0].count",{"_index":1364,"title":{},"body":{"controllers/UsersController.html":{}}}],["data[0].users",{"_index":1363,"title":{},"body":{"controllers/UsersController.html":{}}}],["data[0].users.length",{"_index":1362,"title":{},"body":{"controllers/UsersController.html":{}}}],["data[0]?.tasks",{"_index":1120,"title":{},"body":{"controllers/TasksController.html":{}}}],["data[0]?.totalcount[0]?.count",{"_index":1122,"title":{},"body":{"controllers/TasksController.html":{}}}],["date",{"_index":430,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/Message.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"index.html":{}}}],["date(searchdto.duedate.sethours(0",{"_index":1170,"title":{},"body":{"injectables/TasksService.html":{}}}],["date(searchdto.duedate.sethours(23",{"_index":1172,"title":{},"body":{"injectables/TasksService.html":{}}}],["date(value",{"_index":1085,"title":{},"body":{"classes/TaskSearchDTO.html":{}}}],["datefilter",{"_index":1167,"title":{},"body":{"injectables/TasksService.html":{}}}],["dbuser",{"_index":376,"title":{},"body":{"classes/ChatGateway.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{}}}],["dbuser.istrialactive",{"_index":378,"title":{},"body":{"classes/ChatGateway.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{}}}],["dbuser.trialexpiration",{"_index":383,"title":{},"body":{"classes/ChatGateway.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{}}}],["deactivated",{"_index":661,"title":{},"body":{"injectables/MessagesService.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/RoomsModule.html":{},"modules/SeederModule.html":{},"modules/StripeModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChatGateway.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"classes/EmailDTO.html":{},"classes/LoginDTO.html":{},"classes/Manager.html":{},"controllers/MessagesController.html":{},"classes/Notification.html":{},"classes/PaginationDTO.html":{},"classes/ReassignWorkerDTO.html":{},"classes/Room.html":{},"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"classes/SearchMessageDTO.html":{},"controllers/StripeController.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"classes/VerifyDTO.html":{},"classes/Worker.html":{}}}],["decorators/role.decorator",{"_index":780,"title":{},"body":{"guards/RoleGuard.html":{}}}],["default",{"_index":286,"title":{},"body":{"classes/ChatGateway.html":{},"classes/CreateUserDTO.html":{},"classes/Manager.html":{},"classes/Room.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/User.html":{},"classes/Worker.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"classes/EmailDTO.html":{},"injectables/JWTStrategy.html":{},"classes/LoginDTO.html":{},"injectables/MailService.html":{},"classes/Manager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"injectables/NotificationsService.html":{},"classes/PaginationDTO.html":{},"classes/ReassignWorkerDTO.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"classes/Room.html":{},"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/SearchMessageDTO.html":{},"injectables/SeederService.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"classes/VerifyDTO.html":{},"classes/Worker.html":{},"guards/WsJwtGuard.html":{}}}],["delete",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["delete(:id)@useguards(jwtauthguard",{"_index":1095,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["delete(`:id",{"_index":621,"title":{},"body":{"controllers/MessagesController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["delete(id",{"_index":1094,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["delete(options",{"_index":643,"title":{},"body":{"injectables/MessagesService.html":{}}}],["delete(user",{"_index":1325,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletebyuser",{"_index":700,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["deletebyuser(userid",{"_index":707,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["deleted",{"_index":623,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/TasksService.html":{}}}],["deletemany",{"_index":676,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/RoomsService.html":{},"injectables/TasksService.html":{}}}],["deletemessage",{"_index":473,"title":{"interfaces/DeleteMessage.html":{}},"body":{"interfaces/DeleteMessage.html":{},"injectables/MessagesService.html":{},"coverage.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/RoomsModule.html":{},"modules/SeederModule.html":{},"modules/StripeModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":374,"title":{},"body":{"classes/ChatGateway.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/Notification.html":{},"interfaces/ServerToClientEvents.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDTO.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":1517,"title":{},"body":{"index.html":{}}}],["directly",{"_index":1528,"title":{},"body":{"index.html":{}}}],["disconnected",{"_index":364,"title":{},"body":{"classes/ChatGateway.html":{}}}],["discriminatorkey",{"_index":1305,"title":{},"body":{"classes/User.html":{}}}],["discriminators",{"_index":1391,"title":{},"body":{"modules/UsersModule.html":{}}}],["display",{"_index":1002,"title":{},"body":{"injectables/StripeService.html":{}}}],["doc",{"_index":1301,"title":{},"body":{"classes/User.html":{}}}],["document",{"_index":573,"title":{},"body":{"classes/Message.html":{}}}],["documentation",{"_index":1410,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":314,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/WsJwtGuard.html":{}}}],["dotenv.config",{"_index":319,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/WsJwtGuard.html":{}}}],["dto",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDTO.html":{},"injectables/MailService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{}}}],["dto.ts",{"_index":394,"title":{},"body":{"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"classes/EmailDTO.html":{},"classes/PaginationDTO.html":{},"classes/RoomSearchDTO.html":{},"classes/SearchMessageDTO.html":{},"classes/TaskSearchDTO.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/VerifyDTO.html":{},"coverage.html":{}}}],["dto.ts:10",{"_index":1077,"title":{},"body":{"classes/TaskSearchDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{}}}],["dto.ts:11",{"_index":415,"title":{},"body":{"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/EmailDTO.html":{}}}],["dto.ts:12",{"_index":401,"title":{},"body":{"classes/CreateMessageDTO.html":{}}}],["dto.ts:13",{"_index":740,"title":{},"body":{"classes/PaginationDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["dto.ts:14",{"_index":435,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["dto.ts:15",{"_index":487,"title":{},"body":{"classes/EmailDTO.html":{},"classes/TaskSearchDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["dto.ts:17",{"_index":403,"title":{},"body":{"classes/CreateMessageDTO.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["dto.ts:18",{"_index":429,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["dto.ts:19",{"_index":486,"title":{},"body":{"classes/EmailDTO.html":{},"classes/PaginationDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["dto.ts:20",{"_index":1075,"title":{},"body":{"classes/TaskSearchDTO.html":{}}}],["dto.ts:21",{"_index":399,"title":{},"body":{"classes/CreateMessageDTO.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["dto.ts:23",{"_index":434,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["dto.ts:24",{"_index":1272,"title":{},"body":{"classes/UpdateTaskDTO.html":{}}}],["dto.ts:25",{"_index":449,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["dto.ts:26",{"_index":1279,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["dto.ts:27",{"_index":432,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["dto.ts:29",{"_index":452,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["dto.ts:30",{"_index":1277,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["dto.ts:31",{"_index":436,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["dto.ts:33",{"_index":1271,"title":{},"body":{"classes/UpdateTaskDTO.html":{}}}],["dto.ts:34",{"_index":454,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["dto.ts:37",{"_index":1273,"title":{},"body":{"classes/UpdateTaskDTO.html":{}}}],["dto.ts:38",{"_index":451,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["dto.ts:42",{"_index":457,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["dto.ts:48",{"_index":461,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["dto.ts:6",{"_index":413,"title":{},"body":{"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateWorkerDTO.html":{},"classes/RoomSearchDTO.html":{},"classes/SearchMessageDTO.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{}}}],["dto.ts:7",{"_index":404,"title":{},"body":{"classes/CreateMessageDTO.html":{},"classes/EmailDTO.html":{},"classes/PaginationDTO.html":{},"classes/VerifyDTO.html":{}}}],["dtos/create",{"_index":599,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RoomsService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dtos/email",{"_index":554,"title":{},"body":{"injectables/MailService.html":{}}}],["dtos/login.dto",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dtos/message",{"_index":602,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["dtos/reassign",{"_index":1350,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/room",{"_index":805,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["dtos/task",{"_index":1112,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dtos/update",{"_index":837,"title":{},"body":{"injectables/RoomsService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{}}}],["dtos/user",{"_index":1348,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/verify",{"_index":1347,"title":{},"body":{"controllers/UsersController.html":{}}}],["due",{"_index":1519,"title":{},"body":{"index.html":{}}}],["duedate",{"_index":425,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDTO.html":{}}}],["duties",{"_index":1501,"title":{},"body":{"index.html":{}}}],["e",{"_index":1204,"title":{},"body":{"injectables/TasksService.html":{}}}],["e.g",{"_index":1506,"title":{},"body":{"index.html":{}}}],["each",{"_index":417,"title":{},"body":{"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["easier",{"_index":1484,"title":{},"body":{"index.html":{}}}],["eee",{"_index":999,"title":{},"body":{"injectables/StripeService.html":{}}}],["effective",{"_index":1492,"title":{},"body":{"index.html":{}}}],["effectively",{"_index":1524,"title":{},"body":{"index.html":{}}}],["email",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/JWTStrategy.html":{},"classes/LoginDTO.html":{},"interfaces/Payload.html":{},"injectables/SeederService.html":{},"injectables/StripeService.html":{},"interfaces/Unique.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/VerifyDTO.html":{}}}],["emaildto",{"_index":480,"title":{"classes/EmailDTO.html":{}},"body":{"classes/EmailDTO.html":{},"injectables/MailService.html":{},"coverage.html":{}}}],["emit(`newmessage",{"_index":369,"title":{},"body":{"classes/ChatGateway.html":{}}}],["emit(`sendnotification",{"_index":373,"title":{},"body":{"classes/ChatGateway.html":{}}}],["emphasizing",{"_index":1490,"title":{},"body":{"index.html":{}}}],["employees",{"_index":1486,"title":{},"body":{"index.html":{}}}],["ends",{"_index":1557,"title":{},"body":{"index.html":{}}}],["enforced",{"_index":1510,"title":{},"body":{"index.html":{}}}],["enhances",{"_index":1531,"title":{},"body":{"index.html":{}}}],["ensures",{"_index":1535,"title":{},"body":{"index.html":{}}}],["enum",{"_index":1062,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["enumerations",{"_index":1466,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/tasks.enums",{"_index":440,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDTO.html":{}}}],["enums/users.enums",{"_index":466,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{}}}],["err",{"_index":1033,"title":{},"body":{"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["error",{"_index":886,"title":{},"body":{"injectables/SeederService.html":{},"injectables/TasksService.html":{}}}],["error('stripe",{"_index":941,"title":{},"body":{"injectables/StripeService.html":{}}}],["error(`notification",{"_index":719,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["error(`there",{"_index":885,"title":{},"body":{"injectables/SeederService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["essential",{"_index":1516,"title":{},"body":{"index.html":{}}}],["established",{"_index":358,"title":{},"body":{"classes/ChatGateway.html":{}}}],["event",{"_index":1027,"title":{},"body":{"injectables/StripeService.html":{}}}],["event.data.object",{"_index":1041,"title":{},"body":{"injectables/StripeService.html":{}}}],["event.type",{"_index":1038,"title":{},"body":{"injectables/StripeService.html":{}}}],["executioncontext",{"_index":774,"title":{},"body":{"guards/RoleGuard.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/variables.html":{}}}],["expectations",{"_index":1537,"title":{},"body":{"index.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"interfaces/DeleteMessage.html":{},"classes/EmailDTO.html":{},"interfaces/IResponse.html":{},"injectables/JWTStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDTO.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Manager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationDTO.html":{},"interfaces/Payload.html":{},"classes/ReassignWorkerDTO.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"classes/Room.html":{},"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SearchMessageDTO.html":{},"modules/SeederModule.html":{},"injectables/SeederService.html":{},"interfaces/ServerToClientEvents.html":{},"controllers/StripeController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"interfaces/Unique.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VerifyDTO.html":{},"classes/Worker.html":{},"guards/WsJwtGuard.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/RoomsModule.html":{},"modules/SeederModule.html":{},"modules/StripeModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JWTStrategy.html":{},"controllers/MessagesController.html":{},"injectables/RefreshJWTStrategy.html":{},"controllers/RoomsController.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":491,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/Manager.html":{},"classes/Message.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshJWTStrategy.html":{},"classes/TaskSearchDTO.html":{},"classes/UserSearchDTO.html":{},"classes/Worker.html":{}}}],["extractjwt",{"_index":494,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["extractjwt(req",{"_index":497,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":510,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":508,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["f0f9f4",{"_index":1010,"title":{},"body":{"injectables/StripeService.html":{}}}],["f4f7fc",{"_index":973,"title":{},"body":{"injectables/StripeService.html":{}}}],["facet",{"_index":1181,"title":{},"body":{"injectables/TasksService.html":{}}}],["failed",{"_index":1036,"title":{},"body":{"injectables/StripeService.html":{}}}],["false",{"_index":377,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"injectables/MessagesService.html":{},"injectables/RefreshJWTStrategy.html":{},"injectables/SeederService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"classes/User.html":{},"guards/WsJwtGuard.html":{}}}],["family",{"_index":967,"title":{},"body":{"injectables/StripeService.html":{}}}],["feature",{"_index":1530,"title":{},"body":{"index.html":{}}}],["features",{"_index":1502,"title":{},"body":{"index.html":{}}}],["fee",{"_index":1560,"title":{},"body":{"index.html":{}}}],["feel",{"_index":1549,"title":{},"body":{"index.html":{}}}],["female",{"_index":1471,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fetched",{"_index":1359,"title":{},"body":{"controllers/UsersController.html":{}}}],["ffffff",{"_index":984,"title":{},"body":{"injectables/StripeService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"interfaces/DeleteMessage.html":{},"classes/EmailDTO.html":{},"interfaces/IResponse.html":{},"injectables/JWTStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDTO.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Manager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationDTO.html":{},"interfaces/Payload.html":{},"classes/ReassignWorkerDTO.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"classes/Room.html":{},"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SearchMessageDTO.html":{},"modules/SeederModule.html":{},"injectables/SeederService.html":{},"interfaces/ServerToClientEvents.html":{},"controllers/StripeController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"interfaces/Unique.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VerifyDTO.html":{},"classes/Worker.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["filter",{"_index":1521,"title":{},"body":{"index.html":{}}}],["finally",{"_index":1206,"title":{},"body":{"injectables/TasksService.html":{}}}],["find(query",{"_index":670,"title":{},"body":{"injectables/MessagesService.html":{}}}],["findall",{"_index":589,"title":{},"body":{"controllers/MessagesController.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["findall(search",{"_index":593,"title":{},"body":{"controllers/MessagesController.html":{},"controllers/TasksController.html":{}}}],["findall(searchdto",{"_index":1150,"title":{},"body":{"injectables/TasksService.html":{}}}],["findbyidanddelete(options.messageid",{"_index":674,"title":{},"body":{"injectables/MessagesService.html":{}}}],["findbyidandupdate(id",{"_index":1240,"title":{},"body":{"injectables/TasksService.html":{}}}],["findbyidandupdate(notificationid",{"_index":731,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["findmultiple",{"_index":636,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/UsersController.html":{}}}],["findmultiple(search",{"_index":647,"title":{},"body":{"injectables/MessagesService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["findmultiple(searchdto",{"_index":1327,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone",{"_index":613,"title":{},"body":{"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":678,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RoomsService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{}}}],["findoneanddelete",{"_index":849,"title":{},"body":{"injectables/RoomsService.html":{}}}],["findoneandupdate",{"_index":848,"title":{},"body":{"injectables/RoomsService.html":{}}}],["firstname",{"_index":443,"title":{},"body":{"classes/CreateUserDTO.html":{},"injectables/SeederService.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{}}}],["font",{"_index":966,"title":{},"body":{"injectables/StripeService.html":{}}}],["footer",{"_index":1013,"title":{},"body":{"injectables/StripeService.html":{}}}],["forbiddenexception",{"_index":1105,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["forbiddenexception(`invalid",{"_index":1131,"title":{},"body":{"controllers/TasksController.html":{}}}],["forbiddenexception(`tasks",{"_index":1189,"title":{},"body":{"injectables/TasksService.html":{}}}],["forbidnonwhitelisted",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["forwardref",{"_index":310,"title":{},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"modules/UsersModule.html":{},"guards/WsJwtGuard.html":{}}}],["found",{"_index":657,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["function",{"_index":892,"title":{},"body":{"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["functions",{"_index":1476,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":444,"title":{},"body":{"classes/CreateUserDTO.html":{},"injectables/SeederService.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"miscellaneous/enumerations.html":{}}}],["gender.male",{"_index":880,"title":{},"body":{"injectables/SeederService.html":{}}}],["generatedescription",{"_index":701,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["generatedescription(task",{"_index":709,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["generatetokens",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetokens(payload",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["get()@usepipes(new",{"_index":595,"title":{},"body":{"controllers/MessagesController.html":{}}}],["get(:id)@useguards(jwtauthguard",{"_index":1099,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["get(`:id",{"_index":612,"title":{},"body":{"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":1478,"title":{"index.html":{}},"body":{}}],["gte",{"_index":1169,"title":{},"body":{"injectables/TasksService.html":{}}}],["guaranteeing",{"_index":1511,"title":{},"body":{"index.html":{}}}],["guarantees",{"_index":1495,"title":{},"body":{"index.html":{}}}],["guard",{"_index":380,"title":{"guards/RoleGuard.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{}},"body":{"classes/ChatGateway.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["guards",{"_index":767,"title":{},"body":{"guards/RoleGuard.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{},"overview.html":{}}}],["guards/refresh.guard",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["handleconnection",{"_index":276,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleconnection(@connectedsocket",{"_index":326,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleconnection(client",{"_index":290,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handledisconnect",{"_index":277,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handledisconnect(client",{"_index":294,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handlewebhook",{"_index":899,"title":{},"body":{"controllers/StripeController.html":{},"injectables/StripeService.html":{}}}],["handlewebhook(@req",{"_index":920,"title":{},"body":{"controllers/StripeController.html":{}}}],["handlewebhook(req",{"_index":904,"title":{},"body":{"controllers/StripeController.html":{},"injectables/StripeService.html":{}}}],["hashedrefreshtoken",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{}}}],["header",{"_index":993,"title":{},"body":{"injectables/StripeService.html":{}}}],["hello",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"injectables/StripeService.html":{}}}],["helping",{"_index":1522,"title":{},"body":{"index.html":{}}}],["helps",{"_index":1542,"title":{},"body":{"index.html":{}}}],["here",{"_index":964,"title":{},"body":{"injectables/StripeService.html":{}}}],["high",{"_index":1475,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["host",{"_index":538,"title":{},"body":{"modules/MailModule.html":{}}}],["html",{"_index":482,"title":{},"body":{"classes/EmailDTO.html":{},"injectables/StripeService.html":{}}}],["http://127.0.0.1:5500/src/payment.html?userid=${userid}&client_secret=${client_secret",{"_index":1026,"title":{},"body":{"injectables/StripeService.html":{}}}],["httponly",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["hydrateddocument",{"_index":566,"title":{},"body":{"classes/Manager.html":{},"classes/Notification.html":{},"classes/Room.html":{},"classes/Task.html":{},"classes/User.html":{},"classes/Worker.html":{},"miscellaneous/typealiases.html":{}}}],["id",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"controllers/MessagesController.html":{},"injectables/RefreshJWTStrategy.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{}}}],["id.tostring",{"_index":1250,"title":{},"body":{"injectables/TasksService.html":{}}}],["id:${message.room.tostring",{"_index":366,"title":{},"body":{"classes/ChatGateway.html":{}}}],["identifier",{"_index":1411,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":511,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["implements",{"_index":269,"title":{},"body":{"classes/ChatGateway.html":{},"guards/RoleGuard.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"interfaces/DeleteMessage.html":{},"classes/EmailDTO.html":{},"injectables/JWTStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDTO.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Manager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationDTO.html":{},"classes/ReassignWorkerDTO.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"classes/Room.html":{},"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SearchMessageDTO.html":{},"modules/SeederModule.html":{},"injectables/SeederService.html":{},"interfaces/ServerToClientEvents.html":{},"controllers/StripeController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VerifyDTO.html":{},"classes/Worker.html":{},"guards/WsJwtGuard.html":{}}}],["imports",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/RoomsModule.html":{},"modules/SeederModule.html":{},"modules/StripeModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["in_progress",{"_index":1216,"title":{},"body":{"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{}}}],["inclusive",{"_index":1480,"title":{},"body":{"index.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"interfaces/DeleteMessage.html":{},"classes/EmailDTO.html":{},"interfaces/IResponse.html":{},"injectables/JWTStrategy.html":{},"classes/LoginDTO.html":{},"injectables/MailService.html":{},"classes/Manager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"injectables/NotificationsService.html":{},"classes/PaginationDTO.html":{},"interfaces/Payload.html":{},"classes/ReassignWorkerDTO.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"classes/Room.html":{},"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/SearchMessageDTO.html":{},"injectables/SeederService.html":{},"interfaces/ServerToClientEvents.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"interfaces/Unique.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"classes/VerifyDTO.html":{},"classes/Worker.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"interfaces/DeleteMessage.html":{},"classes/EmailDTO.html":{},"interfaces/IResponse.html":{},"injectables/JWTStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDTO.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Manager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationDTO.html":{},"interfaces/Payload.html":{},"classes/ReassignWorkerDTO.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"classes/Room.html":{},"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SearchMessageDTO.html":{},"modules/SeederModule.html":{},"injectables/SeederService.html":{},"interfaces/ServerToClientEvents.html":{},"controllers/StripeController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"interfaces/Unique.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VerifyDTO.html":{},"classes/Worker.html":{},"guards/WsJwtGuard.html":{}}}],["inherited",{"_index":1079,"title":{},"body":{"classes/TaskSearchDTO.html":{},"classes/UserSearchDTO.html":{}}}],["inject",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/MessagesService.html":{},"injectables/RefreshJWTStrategy.html":{},"injectables/TasksService.html":{},"guards/WsJwtGuard.html":{}}}],["inject(forwardref",{"_index":325,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/MessagesService.html":{},"injectables/TasksService.html":{},"guards/WsJwtGuard.html":{}}}],["inject(refreshjwtconfig.key",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["injectable",{"_index":80,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MailService.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshJWTStrategy.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MailService.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":81,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MailService.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshJWTStrategy.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["injectmodel",{"_index":651,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"injectables/TasksService.html":{}}}],["injectmodel(message.name",{"_index":654,"title":{},"body":{"injectables/MessagesService.html":{}}}],["injectmodel(notification.name",{"_index":714,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["injectmodel(task.name",{"_index":1159,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectmodel(user.name",{"_index":869,"title":{},"body":{"injectables/SeederService.html":{}}}],["inline",{"_index":1003,"title":{},"body":{"injectables/StripeService.html":{}}}],["integrated",{"_index":1525,"title":{},"body":{"index.html":{}}}],["intent",{"_index":916,"title":{},"body":{"controllers/StripeController.html":{},"injectables/StripeService.html":{}}}],["intent)@useguards(jwtauthguard",{"_index":902,"title":{},"body":{"controllers/StripeController.html":{}}}],["interface",{"_index":472,"title":{"interfaces/DeleteMessage.html":{},"interfaces/IResponse.html":{},"interfaces/Payload.html":{},"interfaces/ServerToClientEvents.html":{},"interfaces/Unique.html":{}},"body":{"interfaces/DeleteMessage.html":{},"interfaces/IResponse.html":{},"interfaces/Payload.html":{},"interfaces/ServerToClientEvents.html":{},"interfaces/Unique.html":{},"coverage.html":{}}}],["interfaces",{"_index":474,"title":{},"body":{"interfaces/DeleteMessage.html":{},"interfaces/IResponse.html":{},"interfaces/Payload.html":{},"interfaces/ServerToClientEvents.html":{},"interfaces/Unique.html":{},"overview.html":{}}}],["interfaces/messages.interface",{"_index":653,"title":{},"body":{"injectables/MessagesService.html":{}}}],["iresponse",{"_index":137,"title":{"interfaces/IResponse.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/IResponse.html":{},"controllers/StripeController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["isactive",{"_index":787,"title":{},"body":{"classes/Room.html":{},"injectables/TasksService.html":{},"classes/UpdateRoomDTO.html":{}}}],["isarray",{"_index":416,"title":{},"body":{"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["isboolean",{"_index":1268,"title":{},"body":{"classes/UpdateRoomDTO.html":{}}}],["isdate",{"_index":1083,"title":{},"body":{"classes/TaskSearchDTO.html":{}}}],["isdate()@isoptional()@transform",{"_index":1074,"title":{},"body":{"classes/TaskSearchDTO.html":{}}}],["isdatestring",{"_index":438,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["isemail",{"_index":462,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/EmailDTO.html":{},"classes/LoginDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/VerifyDTO.html":{}}}],["isemail()@isnotempty",{"_index":448,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{}}}],["isemail()@isoptional",{"_index":1275,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["isenum",{"_index":437,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/TaskSearchDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/UserSearchDTO.html":{}}}],["isenum(['undefined",{"_index":1314,"title":{},"body":{"classes/UserSearchDTO.html":{}}}],["isenum([role.manager",{"_index":1316,"title":{},"body":{"classes/UserSearchDTO.html":{}}}],["isenum(gender",{"_index":450,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/UserSearchDTO.html":{}}}],["isenum(gender)@isoptional",{"_index":1276,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["isenum(priority",{"_index":441,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/TaskSearchDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["isenum(priority)@isnotempty()@transform",{"_index":433,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["isenum(priority)@isoptional()@transform",{"_index":1076,"title":{},"body":{"classes/TaskSearchDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["isenum(role",{"_index":456,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isenum(status",{"_index":1084,"title":{},"body":{"classes/TaskSearchDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["isenum(status)@isoptional()@transform",{"_index":1078,"title":{},"body":{"classes/TaskSearchDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["isglobal",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["ismongoid",{"_index":408,"title":{},"body":{"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateWorkerDTO.html":{},"classes/ReassignWorkerDTO.html":{},"classes/RoomSearchDTO.html":{},"classes/SearchMessageDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["isnotempty",{"_index":406,"title":{},"body":{"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"classes/EmailDTO.html":{},"classes/LoginDTO.html":{},"classes/ReassignWorkerDTO.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/VerifyDTO.html":{}}}],["isnotempty()@isarray()@ismongoid({each",{"_index":414,"title":{},"body":{"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{}}}],["isnotempty()@isdatestring",{"_index":431,"title":{},"body":{"classes/CreateTaskDTO.html":{}}}],["isnotempty()@ismongoid",{"_index":422,"title":{},"body":{"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateWorkerDTO.html":{},"classes/ReassignWorkerDTO.html":{}}}],["isnotempty()@isnumber",{"_index":1264,"title":{},"body":{"classes/UpdatePasswordDTO.html":{}}}],["isnotempty()@isstring",{"_index":412,"title":{},"body":{"classes/CreateNotificationDTO.html":{},"classes/EmailDTO.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{}}}],["isnotempty()@isstring()@isemail",{"_index":488,"title":{},"body":{"classes/EmailDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/VerifyDTO.html":{}}}],["isnotempty()@isstring()@ismongoid",{"_index":402,"title":{},"body":{"classes/CreateMessageDTO.html":{}}}],["isnotempty()@validatenested()@type(undefined",{"_index":460,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isnumber",{"_index":741,"title":{},"body":{"classes/PaginationDTO.html":{},"classes/UpdatePasswordDTO.html":{}}}],["isoptional",{"_index":407,"title":{},"body":{"classes/CreateMessageDTO.html":{},"classes/EmailDTO.html":{},"classes/PaginationDTO.html":{},"classes/RoomSearchDTO.html":{},"classes/SearchMessageDTO.html":{},"classes/TaskSearchDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/UserSearchDTO.html":{}}}],["isoptional()@isarray()@ismongoid({each",{"_index":1267,"title":{},"body":{"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["isoptional()@isboolean",{"_index":1266,"title":{},"body":{"classes/UpdateRoomDTO.html":{}}}],["isoptional()@isdatestring",{"_index":1270,"title":{},"body":{"classes/UpdateTaskDTO.html":{}}}],["isoptional()@ismongoid",{"_index":798,"title":{},"body":{"classes/RoomSearchDTO.html":{},"classes/SearchMessageDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["isoptional()@isstring",{"_index":485,"title":{},"body":{"classes/EmailDTO.html":{},"classes/PaginationDTO.html":{},"classes/TaskSearchDTO.html":{},"classes/UserSearchDTO.html":{}}}],["isoptional()@isstring()@ismongoid",{"_index":400,"title":{},"body":{"classes/CreateMessageDTO.html":{}}}],["isoptional()@transform",{"_index":1312,"title":{},"body":{"classes/UserSearchDTO.html":{}}}],["isphonenumber",{"_index":465,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["isstring",{"_index":405,"title":{},"body":{"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/EmailDTO.html":{},"classes/LoginDTO.html":{},"classes/PaginationDTO.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/VerifyDTO.html":{}}}],["isstring()@isnotempty",{"_index":398,"title":{},"body":{"classes/CreateMessageDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{}}}],["isstring()@isnotempty()@isphonenumber",{"_index":453,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isstring()@isoptional",{"_index":1269,"title":{},"body":{"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["isstring()@isoptional()@isphonenumber",{"_index":1278,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["issue",{"_index":1048,"title":{},"body":{"injectables/StripeService.html":{}}}],["istrialactive",{"_index":882,"title":{},"body":{"injectables/SeederService.html":{},"classes/User.html":{}}}],["isverified",{"_index":883,"title":{},"body":{"injectables/SeederService.html":{},"classes/User.html":{}}}],["jwt",{"_index":505,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshJWTStrategy.html":{},"dependencies.html":{}}}],["jwt.config",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["jwt.guard",{"_index":313,"title":{},"body":{"classes/ChatGateway.html":{}}}],["jwt.guard.ts",{"_index":1399,"title":{},"body":{"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["jwt.guard.ts:16",{"_index":1400,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["jwt.guard.ts:23",{"_index":1401,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["jwtauthguard",{"_index":135,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/StripeController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtconfig",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{},"modules/ChatModule.html":{}}}],["jwtfromrequest",{"_index":507,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["jwtmodule",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{},"modules/ChatModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"modules/ChatModule.html":{}}}],["jwtservice",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{}}}],["jwtstrategy",{"_index":184,"title":{"injectables/JWTStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JWTStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtstrategy.extractjwt",{"_index":509,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["key",{"_index":942,"title":{},"body":{"injectables/StripeService.html":{}}}],["lastname",{"_index":445,"title":{},"body":{"classes/CreateUserDTO.html":{},"injectables/SeederService.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/RoomsModule.html":{},"modules/SeederModule.html":{},"modules/StripeModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":1573,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":736,"title":{},"body":{"classes/PaginationDTO.html":{},"classes/TaskSearchDTO.html":{},"injectables/TasksService.html":{},"classes/UserSearchDTO.html":{}}}],["link",{"_index":965,"title":{},"body":{"injectables/StripeService.html":{}}}],["log",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["logged",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["login",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["login(logindto",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":95,"title":{"classes/LoginDTO.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDTO.html":{},"coverage.html":{}}}],["logindto.email",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["low",{"_index":1473,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lte",{"_index":1171,"title":{},"body":{"injectables/TasksService.html":{}}}],["made",{"_index":1482,"title":{},"body":{"index.html":{}}}],["mail.service",{"_index":532,"title":{},"body":{"modules/MailModule.html":{}}}],["mail/mail.module",{"_index":927,"title":{},"body":{"modules/StripeModule.html":{}}}],["mail/mail.service",{"_index":938,"title":{},"body":{"injectables/StripeService.html":{}}}],["mailermodule",{"_index":533,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forroot",{"_index":536,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":550,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":42,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules/StripeModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":530,"title":{"injectables/MailService.html":{}},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/StripeService.html":{},"coverage.html":{},"overview.html":{}}}],["make",{"_index":1483,"title":{},"body":{"index.html":{}}}],["male",{"_index":1470,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["manage",{"_index":1554,"title":{},"body":{"index.html":{}}}],["management",{"_index":1493,"title":{},"body":{"index.html":{}}}],["manager",{"_index":471,"title":{"classes/Manager.html":{}},"body":{"classes/CreateWorkerDTO.html":{},"classes/Manager.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"injectables/TasksService.html":{},"modules/UsersModule.html":{},"classes/Worker.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["manager.name",{"_index":1393,"title":{},"body":{"modules/UsersModule.html":{}}}],["managerdocument",{"_index":568,"title":{},"body":{"classes/Manager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["managerid",{"_index":748,"title":{},"body":{"classes/ReassignWorkerDTO.html":{}}}],["managers",{"_index":1485,"title":{},"body":{"index.html":{}}}],["managerschema",{"_index":570,"title":{},"body":{"classes/Manager.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["map",{"_index":285,"title":{},"body":{"classes/ChatGateway.html":{}}}],["margin",{"_index":974,"title":{},"body":{"injectables/StripeService.html":{}}}],["match",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"interfaces/DeleteMessage.html":{},"classes/EmailDTO.html":{},"interfaces/IResponse.html":{},"injectables/JWTStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDTO.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Manager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationDTO.html":{},"interfaces/Payload.html":{},"classes/ReassignWorkerDTO.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"classes/Room.html":{},"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SearchMessageDTO.html":{},"modules/SeederModule.html":{},"injectables/SeederService.html":{},"interfaces/ServerToClientEvents.html":{},"controllers/StripeController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"interfaces/Unique.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VerifyDTO.html":{},"classes/Worker.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":980,"title":{},"body":{"injectables/StripeService.html":{}}}],["medium",{"_index":1474,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["member",{"_index":346,"title":{},"body":{"classes/ChatGateway.html":{},"classes/RoomSearchDTO.html":{}}}],["memberfilter",{"_index":844,"title":{},"body":{"injectables/RoomsService.html":{}}}],["members",{"_index":420,"title":{},"body":{"classes/CreateRoomDTO.html":{},"classes/Room.html":{},"injectables/RoomsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRoomDTO.html":{}}}],["message",{"_index":163,"title":{"classes/Message.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/CreateMessageDTO.html":{},"interfaces/IResponse.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"interfaces/ServerToClientEvents.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateMessageDTO.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["message.name",{"_index":634,"title":{},"body":{"modules/MessagesModule.html":{}}}],["message.schema",{"_index":630,"title":{},"body":{"modules/MessagesModule.html":{},"injectables/MessagesService.html":{}}}],["messageid",{"_index":476,"title":{},"body":{"interfaces/DeleteMessage.html":{}}}],["messagemodel",{"_index":641,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messages",{"_index":608,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["messages.controller",{"_index":629,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messages.length",{"_index":610,"title":{},"body":{"controllers/MessagesController.html":{}}}],["messages.service",{"_index":601,"title":{},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{}}}],["messages/message.schema",{"_index":309,"title":{},"body":{"classes/ChatGateway.html":{}}}],["messages/messages.module",{"_index":1141,"title":{},"body":{"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["messages/messages.service",{"_index":1158,"title":{},"body":{"injectables/TasksService.html":{}}}],["messageschema",{"_index":581,"title":{},"body":{"classes/Message.html":{},"modules/MessagesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["messagescontroller",{"_index":585,"title":{"controllers/MessagesController.html":{}},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messageservice",{"_index":604,"title":{},"body":{"controllers/MessagesController.html":{}}}],["messagesmodule",{"_index":43,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesservice",{"_index":600,"title":{"injectables/MessagesService.html":{}},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["metadata",{"_index":956,"title":{},"body":{"injectables/StripeService.html":{},"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"injectables/MailService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"controllers/UsersController.html":{},"guards/WsJwtGuard.html":{}}}],["min",{"_index":742,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["min(1",{"_index":743,"title":{},"body":{"classes/PaginationDTO.html":{}}}],["minlength",{"_index":684,"title":{},"body":{"classes/Notification.html":{},"classes/Task.html":{}}}],["miscellaneous",{"_index":1465,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misunderstandings",{"_index":1534,"title":{},"body":{"index.html":{}}}],["model",{"_index":638,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"injectables/TasksService.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/RoomsModule.html":{},"modules/SeederModule.html":{},"modules/StripeModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/RoomsModule.html":{},"modules/SeederModule.html":{},"modules/StripeModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/RoomsModule.html":{},"modules/SeederModule.html":{},"modules/StripeModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/chat/chat.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/mail/mail.module",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/mailer",{"_index":535,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/messages/messages.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/notifications/notifications.module",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/rooms/rooms.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/seeder/seeder.module",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/stripe/stripe.module",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/tasks/tasks.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/users.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":479,"title":{},"body":{"interfaces/DeleteMessage.html":{},"classes/Manager.html":{},"classes/Message.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"injectables/NotificationsService.html":{},"classes/Room.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"classes/Task.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/Worker.html":{},"dependencies.html":{}}}],["mongoose.schema",{"_index":582,"title":{},"body":{"classes/Message.html":{},"miscellaneous/variables.html":{}}}],["mongoose.schema.types.objectid",{"_index":560,"title":{},"body":{"classes/Manager.html":{},"classes/Message.html":{},"classes/Notification.html":{},"classes/Room.html":{},"classes/Task.html":{},"classes/Worker.html":{},"miscellaneous/variables.html":{}}}],["mongoose.types.objectid",{"_index":828,"title":{},"body":{"injectables/RoomsService.html":{}}}],["mongoosemodule",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/RoomsModule.html":{},"modules/SeederModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":633,"title":{},"body":{"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/RoomsModule.html":{},"modules/SeederModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["name",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"injectables/MailService.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"modules/SeederModule.html":{},"injectables/SeederService.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"guards/WsJwtGuard.html":{}}}],["namespace",{"_index":320,"title":{},"body":{"classes/ChatGateway.html":{}}}],["nestjs",{"_index":534,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/JWTStrategy.html":{},"injectables/JwtAuthGuard.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"modules/SeederModule.html":{},"injectables/SeederService.html":{},"controllers/StripeController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"guards/WsJwtGuard.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ChatModule.html":{},"injectables/RefreshJWTStrategy.html":{},"injectables/StripeService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":778,"title":{},"body":{"guards/RoleGuard.html":{},"guards/TrialGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"guards/WsJwtGuard.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"classes/Manager.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/Room.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"modules/SeederModule.html":{},"injectables/SeederService.html":{},"classes/Task.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"classes/Worker.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JWTStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshJWTStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1439,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":1441,"title":{},"body":{"dependencies.html":{}}}],["nestjs/websockets",{"_index":305,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{},"dependencies.html":{}}}],["new",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"injectables/StripeService.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["newdata",{"_index":1337,"title":{},"body":{"controllers/UsersController.html":{}}}],["newmessage",{"_index":890,"title":{},"body":{"interfaces/ServerToClientEvents.html":{}}}],["newpassword",{"_index":1262,"title":{},"body":{"classes/UpdatePasswordDTO.html":{}}}],["nodemailer",{"_index":1455,"title":{},"body":{"dependencies.html":{}}}],["notfoundexception",{"_index":650,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["notfoundexception('task",{"_index":1208,"title":{},"body":{"injectables/TasksService.html":{}}}],["notfoundexception(`user",{"_index":656,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/StripeService.html":{}}}],["notification",{"_index":301,"title":{"classes/Notification.html":{}},"body":{"classes/ChatGateway.html":{},"classes/CreateNotificationDTO.html":{},"classes/Notification.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"coverage.html":{}}}],["notification.description",{"_index":375,"title":{},"body":{"classes/ChatGateway.html":{}}}],["notification.name",{"_index":698,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["notification.schema",{"_index":697,"title":{},"body":{"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{}}}],["notification.to.foreach((user",{"_index":370,"title":{},"body":{"classes/ChatGateway.html":{}}}],["notificationdata",{"_index":716,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notificationdata.save",{"_index":718,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notificationdocument",{"_index":687,"title":{},"body":{"classes/Notification.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["notificationid",{"_index":729,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notificationmodel",{"_index":704,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["notifications",{"_index":1538,"title":{},"body":{"index.html":{}}}],["notifications.service",{"_index":696,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["notifications/notification.schema",{"_index":317,"title":{},"body":{"classes/ChatGateway.html":{}}}],["notifications/notifications.module",{"_index":1390,"title":{},"body":{"modules/UsersModule.html":{}}}],["notificationschema",{"_index":688,"title":{},"body":{"classes/Notification.html":{},"modules/NotificationsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["notificationservice",{"_index":1145,"title":{},"body":{"injectables/TasksService.html":{}}}],["notificationsmodule",{"_index":44,"title":{"modules/NotificationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationsModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["notificationsservice",{"_index":694,"title":{"injectables/NotificationsService.html":{}},"body":{"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["null",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{},"injectables/TasksService.html":{}}}],["number",{"_index":738,"title":{},"body":{"classes/PaginationDTO.html":{},"classes/TaskSearchDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{}}}],["o.role",{"_index":469,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["object.keys(task).join",{"_index":724,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["omit",{"_index":832,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/TasksService.html":{}}}],["one",{"_index":1547,"title":{},"body":{"index.html":{}}}],["ongatewayconnection",{"_index":270,"title":{},"body":{"classes/ChatGateway.html":{}}}],["ongatewaydisconnect",{"_index":271,"title":{},"body":{"classes/ChatGateway.html":{}}}],["optional",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateUserDTO.html":{},"interfaces/DeleteMessage.html":{},"classes/EmailDTO.html":{},"interfaces/IResponse.html":{},"injectables/JWTStrategy.html":{},"injectables/MailService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"classes/PaginationDTO.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/SearchMessageDTO.html":{},"injectables/SeederService.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"guards/WsJwtGuard.html":{}}}],["options",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"injectables/MessagesService.html":{}}}],["options.messageid",{"_index":673,"title":{},"body":{"injectables/MessagesService.html":{}}}],["options.rooms",{"_index":677,"title":{},"body":{"injectables/MessagesService.html":{}}}],["ordinate",{"_index":1556,"title":{},"body":{"index.html":{}}}],["origin",{"_index":323,"title":{},"body":{"classes/ChatGateway.html":{}}}],["out",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/RoomsModule.html":{},"modules/SeederModule.html":{},"modules/StripeModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["outside",{"_index":1193,"title":{},"body":{"injectables/TasksService.html":{}}}],["over",{"_index":1515,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1565,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1432,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":975,"title":{},"body":{"injectables/StripeService.html":{}}}],["page",{"_index":737,"title":{},"body":{"classes/PaginationDTO.html":{},"classes/TaskSearchDTO.html":{},"classes/UserSearchDTO.html":{}}}],["paginationdto",{"_index":734,"title":{"classes/PaginationDTO.html":{}},"body":{"classes/PaginationDTO.html":{},"classes/TaskSearchDTO.html":{},"classes/UserSearchDTO.html":{},"coverage.html":{}}}],["paginationdto:13",{"_index":1081,"title":{},"body":{"classes/TaskSearchDTO.html":{},"classes/UserSearchDTO.html":{}}}],["paginationdto:19",{"_index":1080,"title":{},"body":{"classes/TaskSearchDTO.html":{},"classes/UserSearchDTO.html":{}}}],["paginationdto:7",{"_index":1082,"title":{},"body":{"classes/TaskSearchDTO.html":{},"classes/UserSearchDTO.html":{}}}],["paid",{"_index":948,"title":{},"body":{"injectables/StripeService.html":{}}}],["param",{"_index":1104,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["param(`id",{"_index":614,"title":{},"body":{"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"injectables/MailService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"controllers/UsersController.html":{},"guards/WsJwtGuard.html":{}}}],["parseint(process.env.smtp_port",{"_index":541,"title":{},"body":{"modules/MailModule.html":{}}}],["parser",{"_index":1452,"title":{},"body":{"dependencies.html":{}}}],["particular",{"_index":1513,"title":{},"body":{"index.html":{}}}],["parties",{"_index":1544,"title":{},"body":{"index.html":{}}}],["pass",{"_index":545,"title":{},"body":{"modules/MailModule.html":{}}}],["passed",{"_index":1233,"title":{},"body":{"injectables/TasksService.html":{}}}],["passport",{"_index":504,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":502,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["passportstrategy(strategy",{"_index":492,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["passreqtocallback",{"_index":761,"title":{},"body":{"injectables/RefreshJWTStrategy.html":{}}}],["passthrough",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["password",{"_index":446,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginDTO.html":{},"injectables/SeederService.html":{},"interfaces/Unique.html":{},"classes/UpdatePasswordDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["passwordmatched",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":1103,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["patch(:id/verify)@useguards(jwtauthguard",{"_index":1344,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(`:id",{"_index":616,"title":{},"body":{"controllers/MessagesController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["patch(`:id/reassign",{"_index":1375,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(`:id/verify",{"_index":1372,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(`password",{"_index":1365,"title":{},"body":{"controllers/UsersController.html":{}}}],["pay",{"_index":1559,"title":{},"body":{"index.html":{}}}],["payload",{"_index":212,"title":{"interfaces/Payload.html":{}},"body":{"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"interfaces/Payload.html":{},"injectables/RefreshJWTStrategy.html":{},"injectables/RoomsService.html":{},"interfaces/ServerToClientEvents.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["payload.email",{"_index":519,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["payload.role",{"_index":520,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["payload.userid",{"_index":347,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["payment",{"_index":955,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["payment_intent.succeeded",{"_index":1040,"title":{},"body":{"injectables/StripeService.html":{}}}],["paymentintent",{"_index":951,"title":{},"body":{"injectables/StripeService.html":{}}}],["paymentintent.client_secret",{"_index":960,"title":{},"body":{"injectables/StripeService.html":{}}}],["paymentintent.metadata.userid",{"_index":1047,"title":{},"body":{"injectables/StripeService.html":{}}}],["paymentlink",{"_index":957,"title":{},"body":{"injectables/StripeService.html":{}}}],["perform",{"_index":1553,"title":{},"body":{"index.html":{}}}],["period",{"_index":1546,"title":{},"body":{"index.html":{}}}],["phone",{"_index":447,"title":{},"body":{"classes/CreateUserDTO.html":{},"injectables/SeederService.html":{},"interfaces/Unique.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{}}}],["platform",{"_index":1481,"title":{},"body":{"index.html":{}}}],["populate(`sender",{"_index":671,"title":{},"body":{"injectables/MessagesService.html":{}}}],["port",{"_index":540,"title":{},"body":{"modules/MailModule.html":{}}}],["post",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"controllers/StripeController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(`email",{"_index":1369,"title":{},"body":{"controllers/UsersController.html":{}}}],["post(`payment/payment",{"_index":915,"title":{},"body":{"controllers/StripeController.html":{}}}],["post(`refresh",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(`signout",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(`signup",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(`stripe/webhook",{"_index":919,"title":{},"body":{"controllers/StripeController.html":{}}}],["post(payment/payment",{"_index":901,"title":{},"body":{"controllers/StripeController.html":{}}}],["post(signout)@useguards(jwtauthguard",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(stripe/webhook",{"_index":906,"title":{},"body":{"controllers/StripeController.html":{}}}],["prefix",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"controllers/StripeController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["prioritize",{"_index":1523,"title":{},"body":{"index.html":{}}}],["priority",{"_index":426,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDTO.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["priorityfilter",{"_index":1163,"title":{},"body":{"injectables/TasksService.html":{}}}],["private",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RefreshJWTStrategy.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{}}}],["process.env.jwt_secret",{"_index":337,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"guards/WsJwtGuard.html":{}}}],["process.env.mj_api_key",{"_index":544,"title":{},"body":{"modules/MailModule.html":{}}}],["process.env.mj_secret_key",{"_index":546,"title":{},"body":{"modules/MailModule.html":{}}}],["process.env.sender_mail",{"_index":557,"title":{},"body":{"injectables/MailService.html":{}}}],["process.env.sender_name",{"_index":556,"title":{},"body":{"injectables/MailService.html":{}}}],["process.env.smptp_secure",{"_index":542,"title":{},"body":{"modules/MailModule.html":{}}}],["process.env.smtp_host",{"_index":539,"title":{},"body":{"modules/MailModule.html":{}}}],["process.env.stripe_webhook_secret",{"_index":1032,"title":{},"body":{"injectables/StripeService.html":{}}}],["productively",{"_index":1499,"title":{},"body":{"index.html":{}}}],["profile",{"_index":1358,"title":{},"body":{"controllers/UsersController.html":{}}}],["progress",{"_index":1489,"title":{},"body":{"index.html":{}}}],["promise",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/StripeController.html":{},"controllers/TasksController.html":{},"guards/TrialGuard.html":{},"controllers/UsersController.html":{},"guards/WsJwtGuard.html":{}}}],["promise.all",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["prop",{"_index":563,"title":{},"body":{"classes/Manager.html":{},"classes/Notification.html":{},"classes/Room.html":{},"classes/Task.html":{},"classes/User.html":{},"classes/Worker.html":{}}}],["prop(['undefined",{"_index":561,"title":{},"body":{"classes/Manager.html":{},"classes/Notification.html":{},"classes/Room.html":{},"classes/Task.html":{}}}],["prop({default",{"_index":1287,"title":{},"body":{"classes/User.html":{}}}],["prop({required",{"_index":1061,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["prop({type",{"_index":683,"title":{},"body":{"classes/Notification.html":{},"classes/Room.html":{},"classes/Task.html":{},"classes/User.html":{},"classes/Worker.html":{}}}],["properties",{"_index":272,"title":{"properties.html":{}},"body":{"classes/ChatGateway.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"interfaces/DeleteMessage.html":{},"classes/EmailDTO.html":{},"interfaces/IResponse.html":{},"classes/LoginDTO.html":{},"classes/Manager.html":{},"classes/Message.html":{},"classes/Notification.html":{},"classes/PaginationDTO.html":{},"interfaces/Payload.html":{},"classes/ReassignWorkerDTO.html":{},"classes/Room.html":{},"classes/RoomSearchDTO.html":{},"classes/SearchMessageDTO.html":{},"interfaces/ServerToClientEvents.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"interfaces/Unique.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"classes/VerifyDTO.html":{},"classes/Worker.html":{},"properties.html":{}}}],["provided",{"_index":1231,"title":{},"body":{"injectables/TasksService.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/RoomsModule.html":{},"modules/SeederModule.html":{},"modules/StripeModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["pull",{"_index":732,"title":{},"body":{"injectables/NotificationsService.html":{},"injectables/RoomsService.html":{},"injectables/TasksService.html":{}}}],["query",{"_index":598,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/RoomsService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{}}}],["radius",{"_index":986,"title":{},"body":{"injectables/StripeService.html":{}}}],["rawbodyrequest",{"_index":905,"title":{},"body":{"controllers/StripeController.html":{},"injectables/StripeService.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/SeederService.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{}}}],["reassignworker",{"_index":1320,"title":{},"body":{"controllers/UsersController.html":{}}}],["reassignworker(id",{"_index":1330,"title":{},"body":{"controllers/UsersController.html":{}}}],["reassignworkerdto",{"_index":745,"title":{"classes/ReassignWorkerDTO.html":{}},"body":{"classes/ReassignWorkerDTO.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["received",{"_index":1053,"title":{},"body":{"injectables/StripeService.html":{}}}],["receiver",{"_index":396,"title":{},"body":{"classes/CreateMessageDTO.html":{}}}],["ref",{"_index":569,"title":{},"body":{"classes/Manager.html":{},"classes/Message.html":{},"classes/Notification.html":{},"classes/Room.html":{},"classes/Task.html":{},"classes/Worker.html":{},"miscellaneous/variables.html":{}}}],["reflect",{"_index":1459,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["reflector",{"_index":771,"title":{},"body":{"guards/RoleGuard.html":{},"guards/TrialGuard.html":{}}}],["refresh",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["refreshauthguard",{"_index":133,"title":{"injectables/RefreshAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/RefreshAuthGuard.html":{},"coverage.html":{}}}],["refreshed",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshjwtconfig",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["refreshjwtconfiguration",{"_index":755,"title":{},"body":{"injectables/RefreshJWTStrategy.html":{}}}],["refreshjwtconfiguration.secret",{"_index":760,"title":{},"body":{"injectables/RefreshJWTStrategy.html":{}}}],["refreshjwtstrategy",{"_index":185,"title":{"injectables/RefreshJWTStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RefreshJWTStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["refreshjwtstrategy.extractjwt",{"_index":759,"title":{},"body":{"injectables/RefreshJWTStrategy.html":{}}}],["refreshtoken",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["refreshtoken(id",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken(req",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokenconfig",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtokenmatches",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["regards",{"_index":1025,"title":{},"body":{"injectables/StripeService.html":{}}}],["register",{"_index":1552,"title":{},"body":{"index.html":{}}}],["registers",{"_index":1551,"title":{},"body":{"index.html":{}}}],["registration",{"_index":1503,"title":{},"body":{"index.html":{}}}],["relevant",{"_index":1541,"title":{},"body":{"index.html":{}}}],["remain",{"_index":1500,"title":{},"body":{"index.html":{}}}],["remove",{"_index":818,"title":{},"body":{"injectables/RoomsService.html":{}}}],["remove(taskid",{"_index":827,"title":{},"body":{"injectables/RoomsService.html":{}}}],["removeuser",{"_index":819,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/TasksService.html":{}}}],["removeuser(user",{"_index":831,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/TasksService.html":{}}}],["req",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{}}}],["req.cookies",{"_index":513,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["req.cookies.accesstoken",{"_index":516,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["req.cookies.accesstoken.length",{"_index":514,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["req.cookies.refreshtoken",{"_index":763,"title":{},"body":{"injectables/RefreshJWTStrategy.html":{}}}],["req.cookies.refreshtoken.length",{"_index":762,"title":{},"body":{"injectables/RefreshJWTStrategy.html":{}}}],["req.cookies[`refreshtoken`].trim",{"_index":764,"title":{},"body":{"injectables/RefreshJWTStrategy.html":{}}}],["req.header('stripe",{"_index":1030,"title":{},"body":{"injectables/StripeService.html":{}}}],["req.rawbody",{"_index":1029,"title":{},"body":{"injectables/StripeService.html":{}}}],["request",{"_index":498,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":583,"title":{},"body":{"classes/Message.html":{},"classes/Notification.html":{},"classes/Room.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["requiredrole",{"_index":781,"title":{},"body":{"guards/RoleGuard.html":{}}}],["requiredrole.includes(user.role",{"_index":785,"title":{},"body":{"guards/RoleGuard.html":{}}}],["res",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["res.status(204",{"_index":611,"title":{},"body":{"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/RoomsModule.html":{},"modules/SeederModule.html":{},"modules/StripeModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolves",{"_index":1533,"title":{},"body":{"index.html":{}}}],["response",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["response.clearcookie('accesstoken",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.clearcookie('refreshtoken",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.cookie('accesstoken",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.cookie('refreshtoken",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["result",{"_index":1123,"title":{},"body":{"controllers/TasksController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"interfaces/DeleteMessage.html":{},"classes/EmailDTO.html":{},"interfaces/IResponse.html":{},"injectables/JWTStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDTO.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Manager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationDTO.html":{},"interfaces/Payload.html":{},"classes/ReassignWorkerDTO.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"classes/Room.html":{},"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SearchMessageDTO.html":{},"modules/SeederModule.html":{},"injectables/SeederService.html":{},"interfaces/ServerToClientEvents.html":{},"controllers/StripeController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"interfaces/Unique.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VerifyDTO.html":{},"classes/Worker.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ret",{"_index":1302,"title":{},"body":{"classes/User.html":{}}}],["ret.password",{"_index":1303,"title":{},"body":{"classes/User.html":{}}}],["retrieved",{"_index":1119,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"injectables/MailService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"controllers/UsersController.html":{},"guards/WsJwtGuard.html":{}}}],["rgba(0",{"_index":991,"title":{},"body":{"injectables/StripeService.html":{}}}],["role",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/JWTStrategy.html":{},"interfaces/Payload.html":{},"injectables/RoomsService.html":{},"injectables/SeederService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["role.admin",{"_index":872,"title":{},"body":{"injectables/SeederService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{}}}],["role.manager",{"_index":1127,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["role.worker",{"_index":455,"title":{},"body":{"classes/CreateUserDTO.html":{},"injectables/RoomsService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{}}}],["roleguard",{"_index":766,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["roleguard)@roles(['undefined",{"_index":1092,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["roles",{"_index":1109,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["roles([role.admin",{"_index":1360,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles([role.manager",{"_index":1125,"title":{},"body":{"controllers/TasksController.html":{}}}],["roles_key",{"_index":779,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["room",{"_index":352,"title":{"classes/Room.html":{}},"body":{"classes/ChatGateway.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/Message.html":{},"injectables/MessagesService.html":{},"classes/Room.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SearchMessageDTO.html":{},"interfaces/ServerToClientEvents.html":{},"injectables/TasksService.html":{},"classes/UpdateRoomDTO.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["room._id",{"_index":1254,"title":{},"body":{"injectables/TasksService.html":{}}}],["room.id",{"_index":351,"title":{},"body":{"classes/ChatGateway.html":{}}}],["room.isactive",{"_index":659,"title":{},"body":{"injectables/MessagesService.html":{}}}],["room.name",{"_index":816,"title":{},"body":{"modules/RoomsModule.html":{}}}],["room.schema",{"_index":814,"title":{},"body":{"modules/RoomsModule.html":{},"injectables/RoomsService.html":{}}}],["roomdocument",{"_index":793,"title":{},"body":{"classes/Room.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["roomfilter",{"_index":667,"title":{},"body":{"injectables/MessagesService.html":{}}}],["roomlist",{"_index":891,"title":{},"body":{"interfaces/ServerToClientEvents.html":{}}}],["roommodel",{"_index":822,"title":{},"body":{"injectables/RoomsService.html":{}}}],["rooms",{"_index":344,"title":{},"body":{"classes/ChatGateway.html":{},"interfaces/DeleteMessage.html":{},"injectables/MessagesService.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"injectables/TasksService.html":{}}}],["rooms.controller",{"_index":815,"title":{},"body":{"modules/RoomsModule.html":{}}}],["rooms.foreach((room",{"_index":349,"title":{},"body":{"classes/ChatGateway.html":{}}}],["rooms.length",{"_index":808,"title":{},"body":{"controllers/RoomsController.html":{},"injectables/RoomsService.html":{}}}],["rooms.service",{"_index":804,"title":{},"body":{"controllers/RoomsController.html":{},"modules/RoomsModule.html":{}}}],["rooms/rooms.module",{"_index":632,"title":{},"body":{"modules/MessagesModule.html":{},"modules/UsersModule.html":{}}}],["rooms/rooms.service",{"_index":316,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/MessagesService.html":{}}}],["roomschema",{"_index":794,"title":{},"body":{"classes/Room.html":{},"modules/RoomsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roomscontroller",{"_index":799,"title":{"controllers/RoomsController.html":{}},"body":{"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"coverage.html":{}}}],["roomsearchdto",{"_index":796,"title":{"classes/RoomSearchDTO.html":{}},"body":{"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"coverage.html":{}}}],["roomservice",{"_index":639,"title":{},"body":{"injectables/MessagesService.html":{},"controllers/RoomsController.html":{}}}],["roomsmodule",{"_index":45,"title":{"modules/RoomsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/RoomsModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["roomsservice",{"_index":281,"title":{"injectables/RoomsService.html":{}},"body":{"classes/ChatGateway.html":{},"injectables/MessagesService.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["routes",{"_index":1514,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1461,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":874,"title":{},"body":{"injectables/SeederService.html":{}}}],["sans",{"_index":969,"title":{},"body":{"injectables/StripeService.html":{}}}],["schema",{"_index":564,"title":{},"body":{"classes/Manager.html":{},"modules/MessagesModule.html":{},"classes/Notification.html":{},"modules/NotificationsModule.html":{},"classes/Room.html":{},"modules/RoomsModule.html":{},"modules/SeederModule.html":{},"classes/Task.html":{},"modules/TasksModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"classes/Worker.html":{}}}],["schemafactory",{"_index":565,"title":{},"body":{"classes/Manager.html":{},"classes/Notification.html":{},"classes/Room.html":{},"classes/Task.html":{},"classes/User.html":{},"classes/Worker.html":{}}}],["schemafactory.createforclass(manager",{"_index":571,"title":{},"body":{"classes/Manager.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(notification",{"_index":689,"title":{},"body":{"classes/Notification.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(room",{"_index":795,"title":{},"body":{"classes/Room.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(task",{"_index":1070,"title":{},"body":{"classes/Task.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1307,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(worker",{"_index":1398,"title":{},"body":{"classes/Worker.html":{},"miscellaneous/variables.html":{}}}],["schemas/user.schema",{"_index":1383,"title":{},"body":{"modules/UsersModule.html":{}}}],["search",{"_index":597,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/PaginationDTO.html":{},"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/SearchMessageDTO.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserSearchDTO.html":{},"coverage.html":{}}}],["search.dto",{"_index":1349,"title":{},"body":{"controllers/UsersController.html":{}}}],["search.dto.ts",{"_index":1311,"title":{},"body":{"classes/UserSearchDTO.html":{},"coverage.html":{}}}],["search.dto.ts:10",{"_index":1313,"title":{},"body":{"classes/UserSearchDTO.html":{}}}],["search.dto.ts:15",{"_index":1315,"title":{},"body":{"classes/UserSearchDTO.html":{}}}],["search.member",{"_index":845,"title":{},"body":{"injectables/RoomsService.html":{}}}],["search.room",{"_index":668,"title":{},"body":{"injectables/MessagesService.html":{}}}],["searchdto",{"_index":1152,"title":{},"body":{"injectables/TasksService.html":{},"controllers/UsersController.html":{}}}],["searchdto.duedate",{"_index":1168,"title":{},"body":{"injectables/TasksService.html":{}}}],["searchdto.limit",{"_index":1175,"title":{},"body":{"injectables/TasksService.html":{}}}],["searchdto.page",{"_index":1178,"title":{},"body":{"injectables/TasksService.html":{}}}],["searchdto.priority",{"_index":1164,"title":{},"body":{"injectables/TasksService.html":{}}}],["searchdto.search",{"_index":1162,"title":{},"body":{"injectables/TasksService.html":{}}}],["searchdto.status",{"_index":1166,"title":{},"body":{"injectables/TasksService.html":{}}}],["searchmessagedto",{"_index":594,"title":{"classes/SearchMessageDTO.html":{}},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/SearchMessageDTO.html":{},"coverage.html":{}}}],["secret",{"_index":336,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{}}}],["secretorkey",{"_index":512,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["secure",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"modules/MailModule.html":{},"index.html":{}}}],["seed",{"_index":864,"title":{},"body":{"injectables/SeederService.html":{}}}],["seeder.service",{"_index":859,"title":{},"body":{"modules/SeederModule.html":{}}}],["seedermodule",{"_index":46,"title":{"modules/SeederModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SeederModule.html":{},"modules.html":{},"overview.html":{}}}],["seederservice",{"_index":857,"title":{"injectables/SeederService.html":{}},"body":{"modules/SeederModule.html":{},"injectables/SeederService.html":{},"coverage.html":{},"overview.html":{}}}],["send",{"_index":660,"title":{},"body":{"injectables/MessagesService.html":{}}}],["sendemail",{"_index":548,"title":{},"body":{"injectables/MailService.html":{}}}],["sendemail(data",{"_index":552,"title":{},"body":{"injectables/MailService.html":{}}}],["sender",{"_index":397,"title":{},"body":{"classes/CreateMessageDTO.html":{},"classes/Message.html":{},"miscellaneous/variables.html":{}}}],["sendername",{"_index":298,"title":{},"body":{"classes/ChatGateway.html":{},"interfaces/ServerToClientEvents.html":{}}}],["sendmessage",{"_index":278,"title":{},"body":{"classes/ChatGateway.html":{}}}],["sendmessage(message",{"_index":297,"title":{},"body":{"classes/ChatGateway.html":{}}}],["sendnotification",{"_index":279,"title":{},"body":{"classes/ChatGateway.html":{},"interfaces/ServerToClientEvents.html":{}}}],["sendnotification(notification",{"_index":300,"title":{},"body":{"classes/ChatGateway.html":{}}}],["sends",{"_index":1540,"title":{},"body":{"index.html":{}}}],["serif",{"_index":970,"title":{},"body":{"injectables/StripeService.html":{}}}],["server",{"_index":273,"title":{},"body":{"classes/ChatGateway.html":{}}}],["servertoclientevents",{"_index":307,"title":{"interfaces/ServerToClientEvents.html":{}},"body":{"classes/ChatGateway.html":{},"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["service",{"_index":1023,"title":{},"body":{"injectables/StripeService.html":{}}}],["session",{"_index":644,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RoomsService.html":{},"injectables/TasksService.html":{}}}],["session(session",{"_index":675,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RoomsService.html":{},"injectables/TasksService.html":{}}}],["session.aborttransaction",{"_index":1205,"title":{},"body":{"injectables/TasksService.html":{}}}],["session.committransaction",{"_index":1203,"title":{},"body":{"injectables/TasksService.html":{}}}],["session.endsession",{"_index":1207,"title":{},"body":{"injectables/TasksService.html":{}}}],["session.starttransaction",{"_index":1195,"title":{},"body":{"injectables/TasksService.html":{}}}],["setmetadata(roles_key",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shadow",{"_index":989,"title":{},"body":{"injectables/StripeService.html":{}}}],["signature",{"_index":1031,"title":{},"body":{"injectables/StripeService.html":{}}}],["signed",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signout",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signout(@req",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["signout(id",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["signout(req",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(@body",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(userdto",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["size",{"_index":1005,"title":{},"body":{"injectables/StripeService.html":{}}}],["skip",{"_index":1177,"title":{},"body":{"injectables/TasksService.html":{}}}],["socket",{"_index":291,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{}}}],["socket.id",{"_index":360,"title":{},"body":{"classes/ChatGateway.html":{}}}],["socket.io",{"_index":306,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{},"dependencies.html":{}}}],["solid",{"_index":998,"title":{},"body":{"injectables/StripeService.html":{}}}],["sort",{"_index":672,"title":{},"body":{"injectables/MessagesService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"interfaces/DeleteMessage.html":{},"classes/EmailDTO.html":{},"interfaces/IResponse.html":{},"injectables/JWTStrategy.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoginDTO.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/Manager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginationDTO.html":{},"interfaces/Payload.html":{},"classes/ReassignWorkerDTO.html":{},"injectables/RefreshAuthGuard.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"classes/Room.html":{},"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"modules/RoomsModule.html":{},"injectables/RoomsService.html":{},"classes/SearchMessageDTO.html":{},"modules/SeederModule.html":{},"injectables/SeederService.html":{},"interfaces/ServerToClientEvents.html":{},"controllers/StripeController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"interfaces/Unique.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VerifyDTO.html":{},"classes/Worker.html":{},"guards/WsJwtGuard.html":{}}}],["specific",{"_index":1529,"title":{},"body":{"index.html":{}}}],["src/.../current",{"_index":1585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1477,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../manager.schema.ts",{"_index":1578,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../message.schema.ts",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../notification.schema.ts",{"_index":1579,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../role.decorator.ts",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../room.schema.ts",{"_index":1580,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../task.schema.ts",{"_index":1581,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../tasks.enums.ts",{"_index":1468,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.schema.ts",{"_index":1582,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users.enums.ts",{"_index":1467,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../worker.schema.ts",{"_index":1583,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":82,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":83,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/config/jwt.config",{"_index":389,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/common/decorators/current",{"_index":912,"title":{},"body":{"controllers/StripeController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/role.decorator",{"_index":1110,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["src/common/decorators/role.decorator.ts",{"_index":1417,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dtos/pagination",{"_index":735,"title":{},"body":{"classes/PaginationDTO.html":{},"classes/TaskSearchDTO.html":{},"classes/UserSearchDTO.html":{},"coverage.html":{}}}],["src/common/guards/jwt.guard",{"_index":908,"title":{},"body":{"controllers/StripeController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["src/common/guards/jwt.guard.ts",{"_index":521,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/common/guards/role.guard",{"_index":1108,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["src/common/guards/role.guard.ts",{"_index":768,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/common/guards/role.guard.ts:6",{"_index":772,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/guards/role.guard.ts:9",{"_index":775,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/common/guards/trial.guard",{"_index":1113,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["src/common/guards/trial.guard.ts",{"_index":1255,"title":{},"body":{"guards/TrialGuard.html":{},"coverage.html":{}}}],["src/common/guards/trial.guard.ts:12",{"_index":1257,"title":{},"body":{"guards/TrialGuard.html":{}}}],["src/common/guards/trial.guard.ts:6",{"_index":1256,"title":{},"body":{"guards/TrialGuard.html":{}}}],["src/common/interfaces/response.interface",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["src/common/interfaces/response.interface.ts",{"_index":489,"title":{},"body":{"interfaces/IResponse.html":{},"coverage.html":{}}}],["src/common/strategies/jwt.strategy",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/common/strategies/jwt.strategy.ts",{"_index":490,"title":{},"body":{"injectables/JWTStrategy.html":{},"coverage.html":{}}}],["src/common/strategies/jwt.strategy.ts:11",{"_index":496,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["src/common/strategies/jwt.strategy.ts:23",{"_index":499,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["src/common/strategies/jwt.strategy.ts:34",{"_index":501,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["src/main.ts",{"_index":1420,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:35",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:47",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:66",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:85",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:109",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:12",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:20",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:58",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:70",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:91",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/dtos/login.dto.ts",{"_index":524,"title":{},"body":{"classes/LoginDTO.html":{},"coverage.html":{}}}],["src/modules/auth/dtos/login.dto.ts:10",{"_index":526,"title":{},"body":{"classes/LoginDTO.html":{}}}],["src/modules/auth/dtos/login.dto.ts:6",{"_index":525,"title":{},"body":{"classes/LoginDTO.html":{}}}],["src/modules/auth/guards/refresh.guard.ts",{"_index":750,"title":{},"body":{"injectables/RefreshAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/refresh.strategy.ts",{"_index":752,"title":{},"body":{"injectables/RefreshJWTStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/refresh.strategy.ts:16",{"_index":754,"title":{},"body":{"injectables/RefreshJWTStrategy.html":{}}}],["src/modules/auth/strategies/refresh.strategy.ts:33",{"_index":756,"title":{},"body":{"injectables/RefreshJWTStrategy.html":{}}}],["src/modules/auth/strategies/refresh.strategy.ts:44",{"_index":758,"title":{},"body":{"injectables/RefreshJWTStrategy.html":{}}}],["src/modules/auth/types/auth.types",{"_index":315,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{}}}],["src/modules/auth/types/auth.types.ts",{"_index":744,"title":{},"body":{"interfaces/Payload.html":{},"coverage.html":{}}}],["src/modules/chat/chat.gateway",{"_index":652,"title":{},"body":{"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{}}}],["src/modules/chat/chat.gateway.ts",{"_index":268,"title":{},"body":{"classes/ChatGateway.html":{},"coverage.html":{}}}],["src/modules/chat/chat.gateway.ts:105",{"_index":289,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/modules/chat/chat.gateway.ts:30",{"_index":282,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/modules/chat/chat.gateway.ts:39",{"_index":284,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/modules/chat/chat.gateway.ts:41",{"_index":292,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/modules/chat/chat.gateway.ts:78",{"_index":295,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/modules/chat/chat.gateway.ts:88",{"_index":299,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/modules/chat/chat.gateway.ts:95",{"_index":302,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/modules/chat/chat.module",{"_index":631,"title":{},"body":{"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{}}}],["src/modules/chat/chat.module.ts",{"_index":387,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/modules/chat/guards/ws",{"_index":312,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["src/modules/chat/types/chat.types.ts",{"_index":889,"title":{},"body":{"interfaces/ServerToClientEvents.html":{},"coverage.html":{}}}],["src/modules/mail/dtos/email",{"_index":481,"title":{},"body":{"classes/EmailDTO.html":{},"coverage.html":{}}}],["src/modules/mail/mail.module",{"_index":1388,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/mail/mail.module.ts",{"_index":531,"title":{},"body":{"modules/MailModule.html":{}}}],["src/modules/mail/mail.service.ts",{"_index":547,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/modules/mail/mail.service.ts:6",{"_index":551,"title":{},"body":{"injectables/MailService.html":{}}}],["src/modules/mail/mail.service.ts:9",{"_index":553,"title":{},"body":{"injectables/MailService.html":{}}}],["src/modules/messages/dtos/create",{"_index":393,"title":{},"body":{"classes/CreateMessageDTO.html":{},"coverage.html":{}}}],["src/modules/messages/dtos/message",{"_index":854,"title":{},"body":{"classes/SearchMessageDTO.html":{},"coverage.html":{}}}],["src/modules/messages/dtos/update",{"_index":1259,"title":{},"body":{"classes/UpdateMessageDTO.html":{},"coverage.html":{}}}],["src/modules/messages/interfaces/messages.interface.ts",{"_index":475,"title":{},"body":{"interfaces/DeleteMessage.html":{},"coverage.html":{}}}],["src/modules/messages/message.schema",{"_index":893,"title":{},"body":{"interfaces/ServerToClientEvents.html":{}}}],["src/modules/messages/message.schema.ts",{"_index":572,"title":{},"body":{"classes/Message.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/messages/message.schema.ts:10",{"_index":577,"title":{},"body":{"classes/Message.html":{}}}],["src/modules/messages/message.schema.ts:12",{"_index":580,"title":{},"body":{"classes/Message.html":{}}}],["src/modules/messages/message.schema.ts:4",{"_index":579,"title":{},"body":{"classes/Message.html":{}}}],["src/modules/messages/message.schema.ts:6",{"_index":576,"title":{},"body":{"classes/Message.html":{}}}],["src/modules/messages/message.schema.ts:8",{"_index":578,"title":{},"body":{"classes/Message.html":{}}}],["src/modules/messages/messages.controller.ts",{"_index":586,"title":{},"body":{"controllers/MessagesController.html":{},"coverage.html":{}}}],["src/modules/messages/messages.controller.ts:28",{"_index":592,"title":{},"body":{"controllers/MessagesController.html":{}}}],["src/modules/messages/messages.controller.ts:41",{"_index":596,"title":{},"body":{"controllers/MessagesController.html":{}}}],["src/modules/messages/messages.module.ts",{"_index":628,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/modules/messages/messages.service.ts",{"_index":635,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/modules/messages/messages.service.ts:19",{"_index":640,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/modules/messages/messages.service.ts:28",{"_index":642,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/modules/messages/messages.service.ts:56",{"_index":648,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/modules/messages/messages.service.ts:65",{"_index":646,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/modules/notifications/dtos/create",{"_index":411,"title":{},"body":{"classes/CreateNotificationDTO.html":{},"coverage.html":{}}}],["src/modules/notifications/notification.schema.ts",{"_index":682,"title":{},"body":{"classes/Notification.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/notifications/notification.schema.ts:19",{"_index":686,"title":{},"body":{"classes/Notification.html":{}}}],["src/modules/notifications/notification.schema.ts:9",{"_index":685,"title":{},"body":{"classes/Notification.html":{}}}],["src/modules/notifications/notifications.module",{"_index":1140,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/modules/notifications/notifications.module.ts",{"_index":695,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["src/modules/notifications/notifications.service",{"_index":1157,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/notifications/notifications.service.ts",{"_index":699,"title":{},"body":{"injectables/NotificationsService.html":{},"coverage.html":{}}}],["src/modules/notifications/notifications.service.ts:10",{"_index":703,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/notifications.service.ts:17",{"_index":706,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/notifications.service.ts:27",{"_index":712,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/notifications/notifications.service.ts:35",{"_index":708,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/modules/rooms/dtos/create",{"_index":419,"title":{},"body":{"classes/CreateRoomDTO.html":{},"coverage.html":{}}}],["src/modules/rooms/dtos/room",{"_index":797,"title":{},"body":{"classes/RoomSearchDTO.html":{},"coverage.html":{}}}],["src/modules/rooms/dtos/update",{"_index":1265,"title":{},"body":{"classes/UpdateRoomDTO.html":{},"coverage.html":{}}}],["src/modules/rooms/room.schema",{"_index":894,"title":{},"body":{"interfaces/ServerToClientEvents.html":{}}}],["src/modules/rooms/room.schema.ts",{"_index":786,"title":{},"body":{"classes/Room.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/rooms/room.schema.ts:14",{"_index":792,"title":{},"body":{"classes/Room.html":{}}}],["src/modules/rooms/room.schema.ts:24",{"_index":789,"title":{},"body":{"classes/Room.html":{}}}],["src/modules/rooms/room.schema.ts:27",{"_index":788,"title":{},"body":{"classes/Room.html":{}}}],["src/modules/rooms/rooms.controller.ts",{"_index":800,"title":{},"body":{"controllers/RoomsController.html":{},"coverage.html":{}}}],["src/modules/rooms/rooms.controller.ts:25",{"_index":803,"title":{},"body":{"controllers/RoomsController.html":{}}}],["src/modules/rooms/rooms.module",{"_index":390,"title":{},"body":{"modules/ChatModule.html":{},"modules/TasksModule.html":{}}}],["src/modules/rooms/rooms.module.ts",{"_index":813,"title":{},"body":{"modules/RoomsModule.html":{}}}],["src/modules/rooms/rooms.service",{"_index":1156,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/rooms/rooms.service.ts",{"_index":817,"title":{},"body":{"injectables/RoomsService.html":{},"coverage.html":{}}}],["src/modules/rooms/rooms.service.ts:13",{"_index":821,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:16",{"_index":824,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:21",{"_index":825,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:27",{"_index":836,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:37",{"_index":829,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:43",{"_index":833,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/rooms/rooms.service.ts:63",{"_index":826,"title":{},"body":{"injectables/RoomsService.html":{}}}],["src/modules/seeder/seeder.module.ts",{"_index":858,"title":{},"body":{"modules/SeederModule.html":{}}}],["src/modules/seeder/seeder.service.ts",{"_index":863,"title":{},"body":{"injectables/SeederService.html":{},"coverage.html":{}}}],["src/modules/seeder/seeder.service.ts:14",{"_index":868,"title":{},"body":{"injectables/SeederService.html":{}}}],["src/modules/seeder/seeder.service.ts:9",{"_index":866,"title":{},"body":{"injectables/SeederService.html":{}}}],["src/modules/stripe/stripe.controller.ts",{"_index":896,"title":{},"body":{"controllers/StripeController.html":{},"coverage.html":{}}}],["src/modules/stripe/stripe.controller.ts:15",{"_index":903,"title":{},"body":{"controllers/StripeController.html":{}}}],["src/modules/stripe/stripe.controller.ts:20",{"_index":907,"title":{},"body":{"controllers/StripeController.html":{}}}],["src/modules/stripe/stripe.module.ts",{"_index":925,"title":{},"body":{"modules/StripeModule.html":{}}}],["src/modules/stripe/stripe.service.ts",{"_index":928,"title":{},"body":{"injectables/StripeService.html":{},"coverage.html":{}}}],["src/modules/stripe/stripe.service.ts:12",{"_index":932,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/modules/stripe/stripe.service.ts:127",{"_index":936,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/modules/stripe/stripe.service.ts:132",{"_index":937,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/modules/stripe/stripe.service.ts:26",{"_index":933,"title":{},"body":{"injectables/StripeService.html":{}}}],["src/modules/tasks/dtos/create",{"_index":424,"title":{},"body":{"classes/CreateTaskDTO.html":{},"coverage.html":{}}}],["src/modules/tasks/dtos/task",{"_index":1073,"title":{},"body":{"classes/TaskSearchDTO.html":{},"coverage.html":{}}}],["src/modules/tasks/dtos/update",{"_index":713,"title":{},"body":{"injectables/NotificationsService.html":{},"classes/UpdateTaskDTO.html":{},"coverage.html":{}}}],["src/modules/tasks/enums/tasks.enums.ts",{"_index":1472,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/tasks/task.schema.ts",{"_index":1054,"title":{},"body":{"classes/Task.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/tasks/task.schema.ts:10",{"_index":1065,"title":{},"body":{"classes/Task.html":{}}}],["src/modules/tasks/task.schema.ts:13",{"_index":1058,"title":{},"body":{"classes/Task.html":{}}}],["src/modules/tasks/task.schema.ts:16",{"_index":1063,"title":{},"body":{"classes/Task.html":{}}}],["src/modules/tasks/task.schema.ts:19",{"_index":1064,"title":{},"body":{"classes/Task.html":{}}}],["src/modules/tasks/task.schema.ts:22",{"_index":1059,"title":{},"body":{"classes/Task.html":{}}}],["src/modules/tasks/task.schema.ts:30",{"_index":1060,"title":{},"body":{"classes/Task.html":{}}}],["src/modules/tasks/task.schema.ts:38",{"_index":1066,"title":{},"body":{"classes/Task.html":{}}}],["src/modules/tasks/task.schema.ts:41",{"_index":1057,"title":{},"body":{"classes/Task.html":{}}}],["src/modules/tasks/tasks.controller.ts",{"_index":1087,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/modules/tasks/tasks.controller.ts:108",{"_index":1102,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/modules/tasks/tasks.controller.ts:127",{"_index":1096,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/modules/tasks/tasks.controller.ts:43",{"_index":1098,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/modules/tasks/tasks.controller.ts:65",{"_index":1100,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/modules/tasks/tasks.controller.ts:92",{"_index":1093,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/modules/tasks/tasks.module.ts",{"_index":1137,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/modules/tasks/tasks.service.ts",{"_index":1143,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/modules/tasks/tasks.service.ts:132",{"_index":1155,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:25",{"_index":1146,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:257",{"_index":1149,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:287",{"_index":1154,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:35",{"_index":1151,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:81",{"_index":1153,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/tasks/tasks.service.ts:93",{"_index":1148,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/modules/users/dtos/create",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDTO.html":{},"coverage.html":{}}}],["src/modules/users/dtos/reassign",{"_index":746,"title":{},"body":{"classes/ReassignWorkerDTO.html":{},"coverage.html":{}}}],["src/modules/users/dtos/update",{"_index":1261,"title":{},"body":{"classes/UpdatePasswordDTO.html":{},"classes/UpdateUserDTO.html":{},"coverage.html":{}}}],["src/modules/users/dtos/user",{"_index":1310,"title":{},"body":{"classes/UserSearchDTO.html":{},"coverage.html":{}}}],["src/modules/users/dtos/verify",{"_index":1394,"title":{},"body":{"classes/VerifyDTO.html":{},"coverage.html":{}}}],["src/modules/users/dtos/worker",{"_index":470,"title":{},"body":{"classes/CreateWorkerDTO.html":{},"coverage.html":{}}}],["src/modules/users/enums/users.enums",{"_index":1111,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["src/modules/users/enums/users.enums.ts",{"_index":1469,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/users/interfaces/users.interfaces.ts",{"_index":1258,"title":{},"body":{"interfaces/Unique.html":{},"coverage.html":{}}}],["src/modules/users/schemas/manager.schema",{"_index":1386,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/schemas/manager.schema.ts",{"_index":558,"title":{},"body":{"classes/Manager.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/schemas/manager.schema.ts:11",{"_index":562,"title":{},"body":{"classes/Manager.html":{}}}],["src/modules/users/schemas/user.schema",{"_index":567,"title":{},"body":{"classes/Manager.html":{},"classes/Worker.html":{}}}],["src/modules/users/schemas/user.schema.ts",{"_index":1280,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/schemas/user.schema.ts:29",{"_index":1284,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/schemas/user.schema.ts:32",{"_index":1290,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/schemas/user.schema.ts:35",{"_index":1283,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/schemas/user.schema.ts:38",{"_index":1291,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/schemas/user.schema.ts:41",{"_index":1285,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/schemas/user.schema.ts:44",{"_index":1292,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/schemas/user.schema.ts:47",{"_index":1293,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/schemas/user.schema.ts:50",{"_index":1286,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/schemas/user.schema.ts:53",{"_index":1295,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/schemas/user.schema.ts:56",{"_index":1296,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/schemas/user.schema.ts:59",{"_index":1288,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/schemas/user.schema.ts:62",{"_index":1294,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/schemas/user.schema.ts:65",{"_index":1289,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/schemas/worker.schema",{"_index":1385,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/schemas/worker.schema.ts",{"_index":1395,"title":{},"body":{"classes/Worker.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/schemas/worker.schema.ts:11",{"_index":1396,"title":{},"body":{"classes/Worker.html":{}}}],["src/modules/users/users.controller.ts",{"_index":1318,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:108",{"_index":1338,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:128",{"_index":1342,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:135",{"_index":1345,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:149",{"_index":1332,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:158",{"_index":1326,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:38",{"_index":1329,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:67",{"_index":1328,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:95",{"_index":1335,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{}}}],["src/modules/users/users.module.ts",{"_index":1382,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.service",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"guards/WsJwtGuard.html":{}}}],["src/modules/users/users.service.ts",{"_index":1428,"title":{},"body":{"coverage.html":{}}}],["started",{"_index":1479,"title":{"index.html":{}},"body":{"index.html":{}}}],["statements",{"_index":1412,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":493,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["status",{"_index":1056,"title":{},"body":{"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDTO.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["status.completed",{"_index":1209,"title":{},"body":{"injectables/TasksService.html":{}}}],["status.in_progress",{"_index":1214,"title":{},"body":{"injectables/TasksService.html":{}}}],["status.new",{"_index":1068,"title":{},"body":{"classes/Task.html":{},"injectables/TasksService.html":{}}}],["statusfilter",{"_index":1165,"title":{},"body":{"injectables/TasksService.html":{}}}],["strategies/refresh.strategy",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":503,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["strategy:${user.id",{"_index":518,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"interfaces/DeleteMessage.html":{},"classes/EmailDTO.html":{},"interfaces/IResponse.html":{},"injectables/JWTStrategy.html":{},"classes/LoginDTO.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"injectables/NotificationsService.html":{},"classes/PaginationDTO.html":{},"interfaces/Payload.html":{},"classes/ReassignWorkerDTO.html":{},"injectables/RefreshJWTStrategy.html":{},"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/SearchMessageDTO.html":{},"interfaces/ServerToClientEvents.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/Unique.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"classes/VerifyDTO.html":{},"miscellaneous/variables.html":{}}}],["stripe",{"_index":929,"title":{},"body":{"injectables/StripeService.html":{},"dependencies.html":{}}}],["stripe(apikey",{"_index":944,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.controller",{"_index":926,"title":{},"body":{"modules/StripeModule.html":{}}}],["stripe.paymentintent",{"_index":1042,"title":{},"body":{"injectables/StripeService.html":{}}}],["stripe.service",{"_index":910,"title":{},"body":{"controllers/StripeController.html":{},"modules/StripeModule.html":{}}}],["stripecontroller",{"_index":895,"title":{"controllers/StripeController.html":{}},"body":{"controllers/StripeController.html":{},"modules/StripeModule.html":{},"coverage.html":{}}}],["stripemodule",{"_index":47,"title":{"modules/StripeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripeModule.html":{},"modules.html":{},"overview.html":{}}}],["stripeservice",{"_index":909,"title":{"injectables/StripeService.html":{}},"body":{"controllers/StripeController.html":{},"modules/StripeModule.html":{},"injectables/StripeService.html":{},"coverage.html":{},"overview.html":{}}}],["subject",{"_index":483,"title":{},"body":{"classes/EmailDTO.html":{},"injectables/StripeService.html":{}}}],["successfully",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/SeederService.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{}}}],["such",{"_index":1518,"title":{},"body":{"index.html":{}}}],["super",{"_index":506,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["support",{"_index":1562,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":1543,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1563,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1037,"title":{},"body":{"injectables/StripeService.html":{}}}],["system",{"_index":1494,"title":{},"body":{"index.html":{}}}],["table",{"_index":1431,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1430,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":421,"title":{"classes/Task.html":{}},"body":{"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"injectables/NotificationsService.html":{},"classes/Room.html":{},"injectables/RoomsService.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDTO.html":{},"coverage.html":{},"index.html":{}}}],["task._id",{"_index":1236,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.manager",{"_index":1219,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.manager.tostring",{"_index":1237,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.name",{"_index":1142,"title":{},"body":{"modules/TasksModule.html":{}}}],["task.schema",{"_index":1139,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["task.status",{"_index":1129,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["task.title",{"_index":1245,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.worker.tostring",{"_index":1238,"title":{},"body":{"injectables/TasksService.html":{}}}],["taskdocument",{"_index":1067,"title":{},"body":{"classes/Task.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["taskid",{"_index":830,"title":{},"body":{"injectables/RoomsService.html":{}}}],["taskmodel",{"_index":1147,"title":{},"body":{"injectables/TasksService.html":{}}}],["tasks",{"_index":1118,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["tasks.controller",{"_index":1138,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":1107,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":1389,"title":{},"body":{"modules/UsersModule.html":{}}}],["taskschema",{"_index":1069,"title":{},"body":{"classes/Task.html":{},"modules/TasksModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["taskschema.index",{"_index":1071,"title":{},"body":{"classes/Task.html":{}}}],["taskscontroller",{"_index":1086,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["tasksearchdto",{"_index":1072,"title":{"classes/TaskSearchDTO.html":{}},"body":{"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["taskservice",{"_index":1115,"title":{},"body":{"controllers/TasksController.html":{}}}],["tasksmodule",{"_index":48,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":1106,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["tasktitle",{"_index":711,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["team",{"_index":559,"title":{},"body":{"classes/Manager.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["teams",{"_index":1496,"title":{},"body":{"index.html":{}}}],["text",{"_index":484,"title":{},"body":{"classes/EmailDTO.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"injectables/TasksService.html":{},"classes/User.html":{}}}],["textfilter",{"_index":1161,"title":{},"body":{"injectables/TasksService.html":{}}}],["thank",{"_index":1021,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(logindto",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(req.user.userid",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signout(req.user.userid",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validaterefreshtoken(id",{"_index":765,"title":{},"body":{"injectables/RefreshJWTStrategy.html":{}}}],["this.chatgateway.sendmessage",{"_index":664,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.chatgateway.sendnotification(notification",{"_index":720,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.checkuser(payload.userid",{"_index":338,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.configservice.get('stripe_key",{"_index":940,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.createpaymentlink",{"_index":958,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.generatetokens(payload",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.signasync(payload",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":335,"title":{},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{}}}],["this.mailerservice.sendmail",{"_index":555,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.sendemail",{"_index":961,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.messagemodel",{"_index":669,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagemodel.create(message",{"_index":663,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagemodel.findbyid(id",{"_index":679,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagemodel.findbyidandupdate(id",{"_index":681,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messageservice.create(message",{"_index":607,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.messageservice.delete(id",{"_index":622,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.messageservice.findmultiple(search",{"_index":609,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.messageservice.findone(id",{"_index":615,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.messageservice.update(id",{"_index":619,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.messagesservice.delete",{"_index":1253,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.notificationmodel",{"_index":730,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationmodel(data",{"_index":717,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationmodel.deletemany",{"_index":725,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationmodel.find",{"_index":726,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationmodel.findbyid(id",{"_index":727,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationmodel.findbyidandupdate(notificationid",{"_index":733,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationservice.create",{"_index":1243,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.notificationservice.generatedescription",{"_index":1244,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.reflector.get",{"_index":782,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.refreshtokenconfig",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.roommodel",{"_index":847,"title":{},"body":{"injectables/RoomsService.html":{}}}],["this.roommodel(room",{"_index":842,"title":{},"body":{"injectables/RoomsService.html":{}}}],["this.roommodel.find",{"_index":850,"title":{},"body":{"injectables/RoomsService.html":{}}}],["this.roommodel.find(query).populate(`task",{"_index":846,"title":{},"body":{"injectables/RoomsService.html":{}}}],["this.roommodel.findbyid(id",{"_index":853,"title":{},"body":{"injectables/RoomsService.html":{}}}],["this.roomservice.findmultiple(search",{"_index":807,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomservice.findone(id",{"_index":809,"title":{},"body":{"controllers/RoomsController.html":{}}}],["this.roomservice.findone(message.room",{"_index":658,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.roomsservice.create",{"_index":1199,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.roomsservice.findmultiple",{"_index":345,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.roomsservice.remove(task._id",{"_index":1252,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.roomsservice.update",{"_index":1235,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.server",{"_index":367,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.server.to(client.id).emit(`roomlist",{"_index":354,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.stripe",{"_index":943,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.paymentintents.create",{"_index":952,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripe.webhooks.constructevent",{"_index":1028,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.stripeservice.createpaymentintent(user",{"_index":918,"title":{},"body":{"controllers/StripeController.html":{}}}],["this.stripeservice.handlewebhook(req",{"_index":921,"title":{},"body":{"controllers/StripeController.html":{}}}],["this.taskmodel",{"_index":1197,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskmodel.aggregate",{"_index":1180,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskmodel.db.startsession",{"_index":1221,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskmodel.findone",{"_index":1183,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskmodel.findoneanddelete",{"_index":1251,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskmodel.startsession",{"_index":1194,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskservice.create(task",{"_index":1126,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.delete(id",{"_index":1132,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.findall(search",{"_index":1116,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.findone(id",{"_index":1124,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.taskservice.update(id",{"_index":1128,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.usermodel",{"_index":877,"title":{},"body":{"injectables/SeederService.html":{}}}],["this.usermodel.find",{"_index":871,"title":{},"body":{"injectables/SeederService.html":{}}}],["this.users",{"_index":343,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.users.delete(userid",{"_index":362,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.users.foreach((socket",{"_index":359,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.users.has(user.tostring",{"_index":371,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.users.set(payload.userid",{"_index":341,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.userservice.create(userdto",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.delete(id",{"_index":1377,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findbyid(id",{"_index":1357,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findmultiple(searchdto",{"_index":1361,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.reassignworkers(id",{"_index":1376,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.update(newdata",{"_index":1368,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.updatepassword(data",{"_index":1367,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.verifyemail(data",{"_index":1371,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.verifyuser(id",{"_index":1374,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.checkcollaborators",{"_index":1227,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.usersservice.findbyid(id",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyid(message.sender",{"_index":655,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.usersservice.findbyid(payload.userid",{"_index":517,"title":{},"body":{"injectables/JWTStrategy.html":{},"guards/WsJwtGuard.html":{}}}],["this.usersservice.findbyid(user.userid",{"_index":945,"title":{},"body":{"injectables/StripeService.html":{},"guards/TrialGuard.html":{}}}],["this.usersservice.findbyid(userid",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatGateway.html":{}}}],["this.usersservice.findone",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findworkerbyid(data.worker",{"_index":1218,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.usersservice.findworkerbyid(task.worker",{"_index":1186,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.usersservice.removetrial",{"_index":1046,"title":{},"body":{"injectables/StripeService.html":{}}}],["this.usersservice.updatehashedrefreshtoken",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updatehashedrefreshtoken(id",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/SeederService.html":{},"injectables/StripeService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{}}}],["time",{"_index":1548,"title":{},"body":{"index.html":{}}}],["timestamps",{"_index":584,"title":{},"body":{"classes/Message.html":{},"classes/Notification.html":{},"classes/Room.html":{},"classes/Task.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["title",{"_index":427,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/Task.html":{},"classes/UpdateTaskDTO.html":{},"index.html":{}}}],["titlestring",{"_index":721,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["titlestring.concat",{"_index":723,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["to(message.room.tostring",{"_index":368,"title":{},"body":{"classes/ChatGateway.html":{}}}],["to(this.users.get(user.tostring()).id",{"_index":372,"title":{},"body":{"classes/ChatGateway.html":{}}}],["together",{"_index":1498,"title":{},"body":{"index.html":{}}}],["tojson",{"_index":1298,"title":{},"body":{"classes/User.html":{}}}],["token",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{}}}],["tokens",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.accesstoken",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.refreshtoken",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["toobject",{"_index":1304,"title":{},"body":{"classes/User.html":{}}}],["top",{"_index":1016,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["totalcount",{"_index":1121,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{}}}],["track",{"_index":1488,"title":{},"body":{"index.html":{}}}],["transform",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{}}}],["transformer",{"_index":439,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/PaginationDTO.html":{},"classes/TaskSearchDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UserSearchDTO.html":{},"dependencies.html":{}}}],["transport",{"_index":537,"title":{},"body":{"modules/MailModule.html":{}}}],["trial",{"_index":1050,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["trialexpiration",{"_index":1281,"title":{},"body":{"classes/User.html":{}}}],["trialguard",{"_index":1091,"title":{"guards/TrialGuard.html":{}},"body":{"controllers/TasksController.html":{},"guards/TrialGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["true",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/ChatGateway.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"modules/MailModule.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"classes/Notification.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"classes/Room.html":{},"controllers/RoomsController.html":{},"injectables/SeederService.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":327,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"guards/WsJwtGuard.html":{}}}],["type",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"interfaces/DeleteMessage.html":{},"classes/EmailDTO.html":{},"interfaces/IResponse.html":{},"injectables/JWTStrategy.html":{},"classes/LoginDTO.html":{},"injectables/MailService.html":{},"classes/Manager.html":{},"classes/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"injectables/NotificationsService.html":{},"classes/PaginationDTO.html":{},"interfaces/Payload.html":{},"classes/ReassignWorkerDTO.html":{},"injectables/RefreshJWTStrategy.html":{},"guards/RoleGuard.html":{},"classes/Room.html":{},"classes/RoomSearchDTO.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"classes/SearchMessageDTO.html":{},"injectables/SeederService.html":{},"interfaces/ServerToClientEvents.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"classes/TaskSearchDTO.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"interfaces/Unique.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"classes/VerifyDTO.html":{},"classes/Worker.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isoptional()@isnumber()@min(1",{"_index":739,"title":{},"body":{"classes/PaginationDTO.html":{},"classes/TaskSearchDTO.html":{},"classes/UserSearchDTO.html":{}}}],["typealiases",{"_index":1576,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1212,"title":{},"body":{"injectables/TasksService.html":{}}}],["types",{"_index":478,"title":{},"body":{"interfaces/DeleteMessage.html":{},"injectables/TasksService.html":{}}}],["types.objectid",{"_index":477,"title":{},"body":{"interfaces/DeleteMessage.html":{}}}],["types.objectid(id",{"_index":1185,"title":{},"body":{"injectables/TasksService.html":{}}}],["types.objectid(user.userid",{"_index":1179,"title":{},"body":{"injectables/TasksService.html":{}}}],["types/auth.types",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["types/bcryptjs",{"_index":1443,"title":{},"body":{"dependencies.html":{}}}],["types/chat.types",{"_index":308,"title":{},"body":{"classes/ChatGateway.html":{}}}],["unauthorizedexception",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JWTStrategy.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception(`cannot",{"_index":1355,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorizedexception(`invalid",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(`password",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":790,"title":{},"body":{"classes/Room.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserSearchDTO.html":{},"classes/Worker.html":{}}}],["unique",{"_index":791,"title":{"interfaces/Unique.html":{}},"body":{"classes/Room.html":{},"interfaces/Unique.html":{},"coverage.html":{}}}],["unknown",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"interfaces/IResponse.html":{},"injectables/JWTStrategy.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/NotificationsService.html":{},"injectables/RefreshJWTStrategy.html":{},"controllers/RoomsController.html":{},"injectables/RoomsService.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1574,"title":{},"body":{"properties.html":{}}}],["up",{"_index":1545,"title":{},"body":{"index.html":{}}}],["update",{"_index":617,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/RoomsService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["update(id",{"_index":680,"title":{},"body":{"injectables/MessagesService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["update(taskid",{"_index":834,"title":{},"body":{"injectables/RoomsService.html":{}}}],["updated",{"_index":620,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/NotificationsService.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["updated.the",{"_index":722,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["updatedat",{"_index":575,"title":{},"body":{"classes/Message.html":{}}}],["updatedroom",{"_index":1234,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatedtask",{"_index":1239,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatedtask._id",{"_index":1242,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatedtask.collaborators",{"_index":1248,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatedtask.collaborators.map((id",{"_index":1249,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatedtask.manager.tostring",{"_index":1247,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatedtask.status",{"_index":1241,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatedtask.worker.tostring",{"_index":1246,"title":{},"body":{"injectables/TasksService.html":{}}}],["updateduser",{"_index":1045,"title":{},"body":{"injectables/StripeService.html":{}}}],["updatemany",{"_index":852,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/TasksService.html":{}}}],["updatemessagedto",{"_index":618,"title":{"classes/UpdateMessageDTO.html":{}},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDTO.html":{},"coverage.html":{}}}],["updatepassword",{"_index":1321,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatepassword(@body",{"_index":1366,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatepassword(data",{"_index":1333,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatepassworddto",{"_index":1260,"title":{"classes/UpdatePasswordDTO.html":{}},"body":{"classes/UpdatePasswordDTO.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["updateprofile",{"_index":1322,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateprofile(id",{"_index":1336,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateroomdto",{"_index":835,"title":{"classes/UpdateRoomDTO.html":{}},"body":{"injectables/RoomsService.html":{},"classes/UpdateRoomDTO.html":{},"coverage.html":{}}}],["updatetaskdto",{"_index":710,"title":{"classes/UpdateTaskDTO.html":{}},"body":{"injectables/NotificationsService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDTO.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":1274,"title":{"classes/UpdateUserDTO.html":{}},"body":{"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["updating",{"_index":1049,"title":{},"body":{"injectables/StripeService.html":{},"injectables/TasksService.html":{}}}],["uri",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["usability",{"_index":1491,"title":{},"body":{"index.html":{}}}],["usd",{"_index":954,"title":{},"body":{"injectables/StripeService.html":{}}}],["use",{"_index":1018,"title":{},"body":{"injectables/StripeService.html":{}}}],["usefactory",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChatGateway.html":{},"controllers/StripeController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"controllers/StripeController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["useguards(refreshauthguard",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(refreshauthguard)@post(refresh",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(wsjwtguard",{"_index":324,"title":{},"body":{"classes/ChatGateway.html":{}}}],["usepipes",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["usepipes(new",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":129,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/JWTStrategy.html":{},"modules/MailModule.html":{},"classes/Manager.html":{},"classes/Message.html":{},"injectables/MessagesService.html":{},"classes/Notification.html":{},"guards/RoleGuard.html":{},"classes/Room.html":{},"injectables/RoomsService.html":{},"modules/SeederModule.html":{},"injectables/SeederService.html":{},"controllers/StripeController.html":{},"injectables/StripeService.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"classes/UpdateUserDTO.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/Worker.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user._id.tostring",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.decorator",{"_index":913,"title":{},"body":{"controllers/StripeController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":1414,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.firstname",{"_index":665,"title":{},"body":{"injectables/MessagesService.html":{}}}],["user.hashedrefreshtoken",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.isverified",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.lastname",{"_index":666,"title":{},"body":{"injectables/MessagesService.html":{}}}],["user.name",{"_index":862,"title":{},"body":{"modules/SeederModule.html":{},"modules/UsersModule.html":{}}}],["user.password",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RoomsService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{}}}],["user.userid",{"_index":851,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{}}}],["userdata",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StripeService.html":{},"controllers/UsersController.html":{}}}],["userdata._id.tostring",{"_index":959,"title":{},"body":{"injectables/StripeService.html":{}}}],["userdata.accesstoken",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["userdata.email",{"_index":962,"title":{},"body":{"injectables/StripeService.html":{}}}],["userdata.firstname",{"_index":963,"title":{},"body":{"injectables/StripeService.html":{}}}],["userdata.istrialactive",{"_index":946,"title":{},"body":{"injectables/StripeService.html":{}}}],["userdata.refreshtoken",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["userdata.role",{"_index":1353,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdata.userid",{"_index":1354,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdocument",{"_index":1297,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["userdto",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["userid",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"injectables/NotificationsService.html":{},"interfaces/Payload.html":{},"injectables/StripeService.html":{}}}],["usermodel",{"_index":867,"title":{},"body":{"injectables/SeederService.html":{}}}],["users",{"_index":274,"title":{},"body":{"classes/ChatGateway.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["users.controller",{"_index":1387,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1346,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/enums/users.enums",{"_index":839,"title":{},"body":{"injectables/RoomsService.html":{},"injectables/SeederService.html":{}}}],["users/schemas/user.schema",{"_index":860,"title":{},"body":{"modules/SeederModule.html":{},"injectables/SeederService.html":{}}}],["users/users.module",{"_index":391,"title":{},"body":{"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/StripeModule.html":{}}}],["users/users.service",{"_index":318,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/MessagesService.html":{},"injectables/StripeService.html":{}}}],["userschema",{"_index":861,"title":{},"body":{"modules/SeederModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userschema.index",{"_index":1308,"title":{},"body":{"classes/User.html":{}}}],["userscontroller",{"_index":1317,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersearchdto",{"_index":1309,"title":{"classes/UserSearchDTO.html":{}},"body":{"classes/UserSearchDTO.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userservice",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["usersmodule",{"_index":49,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MessagesModule.html":{},"modules/StripeModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChatGateway.html":{},"injectables/JWTStrategy.html":{},"injectables/MessagesService.html":{},"injectables/StripeService.html":{},"injectables/TasksService.html":{},"guards/TrialGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"overview.html":{}}}],["usertype",{"_index":1306,"title":{},"body":{"classes/User.html":{}}}],["using",{"_index":1022,"title":{},"body":{"injectables/StripeService.html":{},"index.html":{}}}],["validate",{"_index":495,"title":{},"body":{"injectables/JWTStrategy.html":{},"injectables/RefreshJWTStrategy.html":{}}}],["validate(payload",{"_index":500,"title":{},"body":{"injectables/JWTStrategy.html":{}}}],["validate(req",{"_index":757,"title":{},"body":{"injectables/RefreshJWTStrategy.html":{}}}],["validateif",{"_index":463,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["validateif((o",{"_index":468,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["validateif(o",{"_index":459,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["validatenested",{"_index":464,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["validaterefreshtoken",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["validaterefreshtoken(userid",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationpipe",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["validationpipe())@get",{"_index":802,"title":{},"body":{"controllers/RoomsController.html":{}}}],["validationpipe())@get()@useguards(jwtauthguard",{"_index":1097,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["validationpipe())@patch(:id)@useguards(jwtauthguard",{"_index":1101,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["validationpipe())@patch(:id/reassign)@useguards(jwtauthguard",{"_index":1331,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationpipe())@patch(password",{"_index":1334,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationpipe())@post",{"_index":591,"title":{},"body":{"controllers/MessagesController.html":{}}}],["validationpipe())@post('login",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["validationpipe())@post()@useguards(jwtauthguard",{"_index":1090,"title":{},"body":{"controllers/TasksController.html":{}}}],["validationpipe())@post(email",{"_index":1341,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationpipe())@post(signup",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["validator",{"_index":409,"title":{},"body":{"classes/CreateMessageDTO.html":{},"classes/CreateNotificationDTO.html":{},"classes/CreateRoomDTO.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/CreateWorkerDTO.html":{},"classes/EmailDTO.html":{},"classes/LoginDTO.html":{},"classes/PaginationDTO.html":{},"classes/ReassignWorkerDTO.html":{},"classes/RoomSearchDTO.html":{},"classes/SearchMessageDTO.html":{},"classes/TaskSearchDTO.html":{},"classes/UpdateMessageDTO.html":{},"classes/UpdatePasswordDTO.html":{},"classes/UpdateRoomDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/UserSearchDTO.html":{},"classes/VerifyDTO.html":{},"dependencies.html":{}}}],["value",{"_index":287,"title":{},"body":{"classes/ChatGateway.html":{},"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/TaskSearchDTO.html":{},"classes/UpdateTaskDTO.html":{},"classes/UserSearchDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.tolowercase",{"_index":467,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UserSearchDTO.html":{}}}],["value.touppercase",{"_index":442,"title":{},"body":{"classes/CreateTaskDTO.html":{},"classes/TaskSearchDTO.html":{},"classes/UpdateTaskDTO.html":{}}}],["variable",{"_index":1415,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1584,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":1000,"title":{},"body":{"injectables/StripeService.html":{},"controllers/UsersController.html":{}}}],["verificationcode",{"_index":1263,"title":{},"body":{"classes/UpdatePasswordDTO.html":{},"classes/User.html":{}}}],["verificationexpiration",{"_index":1282,"title":{},"body":{"classes/User.html":{}}}],["verified",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifydto",{"_index":1340,"title":{"classes/VerifyDTO.html":{}},"body":{"controllers/UsersController.html":{},"classes/VerifyDTO.html":{},"coverage.html":{}}}],["verifyemail",{"_index":1323,"title":{},"body":{"controllers/UsersController.html":{}}}],["verifyemail(@body",{"_index":1370,"title":{},"body":{"controllers/UsersController.html":{}}}],["verifyemail(data",{"_index":1339,"title":{},"body":{"controllers/UsersController.html":{}}}],["verifyuser",{"_index":1324,"title":{},"body":{"controllers/UsersController.html":{}}}],["verifyuser(@param(`id",{"_index":1373,"title":{},"body":{"controllers/UsersController.html":{}}}],["verifyuser(id",{"_index":1343,"title":{},"body":{"controllers/UsersController.html":{}}}],["version",{"_index":1571,"title":{},"body":{"properties.html":{}}}],["versionkey",{"_index":1300,"title":{},"body":{"classes/User.html":{}}}],["view",{"_index":1505,"title":{},"body":{"index.html":{}}}],["virtuals",{"_index":1299,"title":{},"body":{"classes/User.html":{}}}],["void",{"_index":296,"title":{},"body":{"classes/ChatGateway.html":{},"interfaces/ServerToClientEvents.html":{}}}],["webhook:${paymentintent.metadata.userid",{"_index":1044,"title":{},"body":{"injectables/StripeService.html":{}}}],["websocketgateway",{"_index":304,"title":{},"body":{"classes/ChatGateway.html":{}}}],["websocketserver",{"_index":283,"title":{},"body":{"classes/ChatGateway.html":{}}}],["weight",{"_index":1007,"title":{},"body":{"injectables/StripeService.html":{}}}],["whitelist",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MessagesController.html":{},"controllers/RoomsController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["width",{"_index":978,"title":{},"body":{"injectables/StripeService.html":{}}}],["work",{"_index":1497,"title":{},"body":{"index.html":{}}}],["worker",{"_index":428,"title":{"classes/Worker.html":{}},"body":{"classes/CreateTaskDTO.html":{},"classes/CreateUserDTO.html":{},"classes/Task.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDTO.html":{},"modules/UsersModule.html":{},"classes/Worker.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["worker.dto",{"_index":1351,"title":{},"body":{"controllers/UsersController.html":{}}}],["worker.dto.ts",{"_index":747,"title":{},"body":{"classes/ReassignWorkerDTO.html":{},"coverage.html":{}}}],["worker.dto.ts:6",{"_index":749,"title":{},"body":{"classes/ReassignWorkerDTO.html":{}}}],["worker.manager",{"_index":1220,"title":{},"body":{"injectables/TasksService.html":{}}}],["worker.manager.tostring",{"_index":1191,"title":{},"body":{"injectables/TasksService.html":{}}}],["worker.name",{"_index":1392,"title":{},"body":{"modules/UsersModule.html":{}}}],["worker.role",{"_index":1188,"title":{},"body":{"injectables/TasksService.html":{}}}],["workerdocument",{"_index":1397,"title":{},"body":{"classes/Worker.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["workers",{"_index":1130,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["workerschema",{"_index":1384,"title":{},"body":{"modules/UsersModule.html":{},"classes/Worker.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["workflow",{"_index":1550,"title":{},"body":{"index.html":{}}}],["world",{"_index":85,"title":{},"body":{"injectables/AppService.html":{}}}],["ws",{"_index":1405,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["wsexception",{"_index":1402,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["wsjwtguard",{"_index":311,"title":{"guards/WsJwtGuard.html":{}},"body":{"classes/ChatGateway.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["zoom",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/MailModule.html":{},"modules/MessagesModule.html":{},"modules/NotificationsModule.html":{},"modules/RoomsModule.html":{},"modules/SeederModule.html":{},"modules/StripeModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nRoomsModule\n\nRoomsModule\n\nAppModule -->\n\nRoomsModule->AppModule\n\n\n\n\n\nSeederModule\n\nSeederModule\n\nAppModule -->\n\nSeederModule->AppModule\n\n\n\n\n\nStripeModule\n\nStripeModule\n\nAppModule -->\n\nStripeModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            NotificationsModule\n                        \n                        \n                            RoomsModule\n                        \n                        \n                            SeederModule\n                        \n                        \n                            StripeModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TasksModule } from './modules/tasks/tasks.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersModule } from './modules/users/users.module';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { ChatModule } from './modules/chat/chat.module';\nimport { MessagesModule } from './modules/messages/messages.module';\nimport { RoomsModule } from './modules/rooms/rooms.module';\nimport { NotificationsModule } from './modules/notifications/notifications.module';\nimport { MailModule } from './modules/mail/mail.module';\nimport { StripeModule } from './modules/stripe/stripe.module';\nimport { SeederModule } from './modules/seeder/seeder.module';\n\n@Module({\n  imports: [\n    TasksModule,\n    ConfigModule.forRoot({ isGlobal: true }),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get(`MONGO_STRING`),\n      }),\n      inject: [ConfigService],\n    }),\n    UsersModule,\n    AuthModule,\n    ChatModule,\n    MessagesModule,\n    RoomsModule,\n    NotificationsModule,\n    MailModule,\n    StripeModule,\n    SeederModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    Async\n                                refreshToken\n                            \n                            \n                                    \n                                    \n                                    Async\n                                signout\n                            \n                            \n                                    \n                                    \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDTO, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(new ValidationPipe())@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(req, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(RefreshAuthGuard)@Post(refresh)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        signout\n                        \n                    \n                \n            \n            \n                \n                        \n                    signout(req, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(signout)@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                        \n                    signup(userDTO: CreateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(new ValidationPipe())@Post(signup)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userDTO\n                                            \n                                                            CreateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  UsePipes,\n  ValidationPipe,\n  Res,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersService } from 'src/modules/users/users.service';\nimport { CreateUserDTO } from 'src/modules/users/dtos/create-user-dto';\nimport { LoginDTO } from './dtos/login.dto';\nimport { Response } from 'express';\nimport { RefreshAuthGuard } from './guards/refresh.guard';\nimport { JwtAuthGuard } from '../../common/guards/jwt.guard';\nimport { IResponse } from 'src/common/interfaces/response.interface';\n\n@Controller('api/auth')\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly userService: UsersService,\n  ) {}\n\n  @UsePipes(\n    new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n    }),\n  )\n  @Post(`signup`)\n  async signup(@Body() userDTO: CreateUserDTO): Promise {\n    return this.userService.create(userDTO);\n  }\n\n  @UsePipes(\n    new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n    }),\n  )\n  @Post('login')\n  async login(\n    @Body() loginDto: LoginDTO,\n    @Res({ passthrough: true }) response: Response,\n  ): Promise {\n    const userData = await this.authService.login(loginDto);\n    const Options = {\n      httpOnly: true,\n      secure: true,\n    };\n    response.cookie('accessToken', userData.accessToken, Options);\n    response.cookie('refreshToken', userData.refreshToken, Options);\n    return {\n      message: 'Logged in Successfully',\n      data: userData,\n    };\n  }\n\n  @UseGuards(RefreshAuthGuard)\n  @Post(`refresh`)\n  async refreshToken(\n    @Req() req,\n    @Res({ passthrough: true }) response: Response,\n  ): Promise {\n    const tokens = await this.authService.refreshToken(req.user.userId);\n    const Options = {\n      httpOnly: true,\n      secure: true,\n    };\n    response.cookie('accessToken', tokens.accessToken, Options);\n    response.cookie('refreshToken', tokens.refreshToken, Options);\n    return {\n      message: 'Tokens refreshed successfully',\n      data: tokens,\n    };\n  }\n\n  @Post(`signout`)\n  @UseGuards(JwtAuthGuard)\n  async signout(@Req() req, @Res({ passthrough: true }) response: Response) {\n    const signOut = await this.authService.signout(req.user.userId);\n    const Options = {\n      httpOnly: true,\n      secure: true,\n    };\n    if (signOut) {\n      response.clearCookie('accessToken', Options);\n      response.clearCookie('refreshToken', Options);\n    }\n\n    return {\n      message: 'Signed out successfully',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJWTStrategy\n\nJWTStrategy\n\nAuthModule -->\n\nJWTStrategy->AuthModule\n\n\n\n\n\nRefreshJWTStrategy\n\nRefreshJWTStrategy\n\nAuthModule -->\n\nRefreshJWTStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JWTStrategy\n                        \n                        \n                            RefreshJWTStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/modules/users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from '../../common/config/jwt.config';\nimport refreshJwtConfig from './config/refresh-jwt.config';\nimport { JWTStrategy } from 'src/common/strategies/jwt.strategy';\nimport { RefreshJWTStrategy } from './strategies/refresh.strategy';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    ConfigModule.forFeature(jwtConfig),\n    ConfigModule.forFeature(refreshJwtConfig),\n  ],\n  providers: [AuthService, JWTStrategy, RefreshJWTStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateTokens\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signout\n                            \n                            \n                                    Async\n                                validateRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, refreshTokenConfig: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenConfig\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(payload: Payload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signout\n                        \n                    \n                \n            \n            \n                \n                        \n                    signout(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateRefreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, UnauthorizedException } from '@nestjs/common';\nimport { UsersService } from 'src/modules/users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport refreshJwtConfig from './config/refresh-jwt.config';\nimport { Payload } from './types/auth.types';\nimport * as argon2 from 'argon2';\nimport { ConfigType } from '@nestjs/config';\nimport { LoginDTO } from './dtos/login.dto';\nimport * as bcrypt from 'bcryptjs';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n    @Inject(refreshJwtConfig.KEY)\n    private refreshTokenConfig: ConfigType,\n  ) {}\n\n  async login(\n    loginDto: LoginDTO,\n  ): Promise {\n    const user = await this.usersService.findOne({ email: loginDto.email });\n    if (!user.isVerified) {\n      throw new UnauthorizedException(\n        `User must be verified before they can log in`,\n      );\n    }\n    const passwordMatched = await bcrypt.compare(\n      loginDto.password,\n      user.password,\n    );\n    if (passwordMatched) {\n      delete user.password;\n\n      const payload: Payload = {\n        email: user.email,\n        userId: user._id.toString(),\n        role: user.role,\n      };\n      const { accessToken, refreshToken } = await this.generateTokens(payload);\n      const hashedRefreshToken = await argon2.hash(refreshToken);\n      await this.usersService.updateHashedRefreshToken(\n        user._id.toString(),\n        hashedRefreshToken,\n      );\n\n      return {\n        id: user._id.toString(),\n        accessToken: accessToken,\n        refreshToken: refreshToken,\n      };\n    } else {\n      throw new UnauthorizedException(`Password does not match`);\n    }\n  }\n\n  async generateTokens(payload: Payload) {\n    const [accessToken, refreshToken] = await Promise.all([\n      this.jwtService.signAsync(payload),\n      this.jwtService.signAsync(payload, this.refreshTokenConfig),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  async refreshToken(id: string) {\n    const user = await this.usersService.findById(id);\n    const payload: Payload = {\n      email: user.email,\n      userId: user._id.toString(),\n      role: user.role,\n    };\n    const { accessToken, refreshToken } = await this.generateTokens(payload);\n    const hashedRefreshToken = await argon2.hash(refreshToken);\n    await this.usersService.updateHashedRefreshToken(\n      user._id.toString(),\n      hashedRefreshToken,\n    );\n\n    return {\n      id: user._id.toString(),\n      accessToken: accessToken,\n      refreshToken: refreshToken,\n    };\n  }\n\n  async validateRefreshToken(userId: string, refreshToken: string) {\n    const user = await this.usersService.findById(userId);\n    if (!user || !user.hashedRefreshToken) {\n      throw new UnauthorizedException(`Invalid Refresh Token`);\n    }\n\n    const refreshTokenMatches = await argon2.verify(\n      user.hashedRefreshToken,\n      refreshToken,\n    );\n\n    if (!refreshTokenMatches) {\n      throw new UnauthorizedException(`Invalid Refresh Token`);\n    }\n\n    return { userId: user._id.toString(), email: user.email, role: user.role };\n  }\n\n  async signout(id: string) {\n    await this.usersService.updateHashedRefreshToken(id, null);\n    return {\n      message: `You have signed out`,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatGateway.html":{"url":"classes/ChatGateway.html","title":"class - ChatGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chat/chat.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                server\n                            \n                            \n                                    Private\n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkUser\n                            \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                sendMessage\n                            \n                            \n                                    Async\n                                sendNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, roomsService: RoomsService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/chat/chat.gateway.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roomsService\n                                                  \n                                                        \n                                                                        RoomsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/chat/chat.gateway.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/modules/chat/chat.gateway.ts:30\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/chat/chat.gateway.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/chat/chat.gateway.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/chat/chat.gateway.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendMessage\n                        \n                    \n                \n            \n            \n                \nsendMessage(message: Message, senderName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/chat/chat.gateway.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            Message\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                senderName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendNotification(notification: Notification)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/chat/chat.gateway.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                notification\n                                            \n                                                            Notification\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ConnectedSocket,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { Server } from 'socket.io';\nimport { ServerToClientEvents } from './types/chat.types';\nimport { Message } from '../messages/message.schema';\nimport { UseGuards, Inject, forwardRef } from '@nestjs/common';\nimport { WsJwtGuard } from 'src/modules/chat/guards/ws-jwt.guard';\nimport { Socket } from 'socket.io';\nimport { JwtService } from '@nestjs/jwt';\nimport * as dotenv from 'dotenv';\nimport { Payload } from 'src/modules/auth/types/auth.types';\nimport { RoomsService } from '../rooms/rooms.service';\nimport { Notification } from '../notifications/notification.schema';\nimport { UsersService } from '../users/users.service';\ndotenv.config();\n\n@WebSocketGateway({\n  namespace: `chat`,\n  cors: {\n    origin: `*`,\n  },\n})\n@UseGuards(WsJwtGuard)\nexport class ChatGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  private users: Map = new Map();\n  constructor(\n    private jwtService: JwtService,\n    private roomsService: RoomsService,\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  @WebSocketServer()\n  server: Server;\n\n  async handleConnection(@ConnectedSocket() client: Socket) {\n    try {\n      console.log(client.id);\n      //const { authorization } = client.handshake.headers;\n      const { authorization } = client.handshake.auth;\n      if (!authorization) {\n        client.disconnect();\n        return;\n      }\n      const token = authorization.split(` `)[1];\n      const payload: Payload = await this.jwtService.verifyAsync(token, {\n        secret: process.env.JWT_SECRET,\n      });\n      if (!(await this.checkUser(payload.userId))) {\n        client.disconnect();\n        return;\n      }\n      console.log(`User Connected:${payload.userId}`);\n      this.users.set(payload.userId, client);\n      console.log(`Users`, this.users);\n      const rooms = await this.roomsService.findMultiple({\n        member: payload.userId,\n      });\n      //console.log(rooms);\n      rooms.forEach((room) => {\n        //console.log(`Room ID: ${room.id}`);\n        console.log(`Room ID: ${room}`);\n        client.join(room.id);\n      });\n      this.server.to(client.id).emit(`roomList`, rooms);\n    } catch {\n      console.log(`The connection could not be established`);\n      client.disconnect();\n      return;\n    }\n  }\n\n  handleDisconnect(client: Socket) {\n    this.users.forEach((socket, userId) => {\n      if (socket.id === client.id) {\n        this.users.delete(userId);\n      }\n    });\n    console.log(this.users);\n    console.log(`User disconnected`);\n  }\n\n  sendMessage(message: Message, senderName: string) {\n    console.log(`Message room ID:${message.room.toString()}`);\n    this.server\n      .to(message.room.toString())\n      .emit(`newMessage`, { message: message, senderName: senderName });\n  }\n\n  async sendNotification(notification: Notification) {\n    notification.to.forEach((user) => {\n      if (this.users.has(user.toString())) {\n        this.server\n          .to(this.users.get(user.toString()).id)\n          .emit(`sendNotification`, { description: notification.description });\n      }\n    });\n  }\n\n  async checkUser(userId: string) {\n    const dbUser = await this.usersService.findById(userId);\n    if (!dbUser) {\n      return false;\n    }\n    if (dbUser.isTrialActive === false) {\n      return true;\n    }\n    console.log(`Trial Guard`);\n    console.log(dbUser.id);\n    console.log(dbUser.trialExpiration);\n    if (dbUser.trialExpiration \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_exports\n\n\n\ncluster_ChatModule_imports\n\n\n\n\nRoomsModule\n\nRoomsModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nRoomsModule->ChatModule\n\n\n\n\n\nChatGateway \n\nChatGateway \n\nChatGateway  -->\n\nChatModule->ChatGateway \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/chat/chat.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            RoomsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ChatGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { ChatGateway } from './chat.gateway';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from 'src/common/config/jwt.config';\nimport { RoomsModule } from 'src/modules/rooms/rooms.module';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    ConfigModule.forFeature(jwtConfig),\n    RoomsModule,\n    forwardRef(() => UsersModule),\n  ],\n  providers: [ChatGateway],\n  exports: [ChatGateway],\n})\nexport class ChatModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDTO.html":{"url":"classes/CreateMessageDTO.html","title":"class - CreateMessageDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/messages/dtos/create-message-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                receiver\n                            \n                            \n                                    \n                                    \n                                    \n                                room\n                            \n                            \n                                    \n                                    \n                                    \n                                sender\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/messages/dtos/create-message-dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        receiver\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/messages/dtos/create-message-dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        room\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/messages/dtos/create-message-dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        sender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/messages/dtos/create-message-dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional, IsMongoId } from 'class-validator';\n\nexport class CreateMessageDTO {\n  @IsNotEmpty()\n  @IsString()\n  @IsMongoId()\n  sender: string;\n\n  @IsOptional()\n  @IsString()\n  @IsMongoId()\n  receiver?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsMongoId()\n  room: string;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNotificationDTO.html":{"url":"classes/CreateNotificationDTO.html","title":"class - CreateNotificationDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNotificationDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/dtos/create-notification-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/dtos/create-notification-dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsArray()@IsMongoId({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/dtos/create-notification-dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsMongoId, IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreateNotificationDTO {\n  @IsNotEmpty()\n  @IsString()\n  description: string;\n\n  @IsNotEmpty()\n  @IsArray()\n  @IsMongoId({ each: true })\n  to: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoomDTO.html":{"url":"classes/CreateRoomDTO.html","title":"class - CreateRoomDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoomDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dtos/create-room-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                members\n                            \n                            \n                                    \n                                    \n                                task\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsArray()@IsMongoId({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dtos/create-room-dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        task\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dtos/create-room-dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsMongoId, IsNotEmpty } from 'class-validator';\n\nexport class CreateRoomDTO {\n  @IsNotEmpty()\n  @IsMongoId()\n  task: string;\n\n  @IsNotEmpty()\n  @IsArray()\n  @IsMongoId({ each: true })\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDTO.html":{"url":"classes/CreateTaskDTO.html","title":"class - CreateTaskDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tasks/dtos/create-task-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                dueDate\n                            \n                            \n                                    \n                                    \n                                    \n                                priority\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                            \n                                    \n                                    \n                                worker\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/dtos/create-task-dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        dueDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/dtos/create-task-dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         priority\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(priority)@IsNotEmpty()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/dtos/create-task-dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/dtos/create-task-dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        worker\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/dtos/create-task-dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNotEmpty,\n  IsEnum,\n  IsDateString,\n  IsMongoId,\n} from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport { priority } from '../enums/tasks.enums';\n\nexport class CreateTaskDTO {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsEnum(priority)\n  @IsNotEmpty()\n  @Transform(({ value }) => (value ? value.toUpperCase() : value))\n  priority: priority;\n\n  @IsNotEmpty()\n  @IsDateString()\n  dueDate: Date;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  worker: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDTO.html":{"url":"classes/CreateUserDTO.html","title":"class - CreateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/create-user-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                gender\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                worker\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user-dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user-dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Gender\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )@IsEnum(Gender)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user-dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user-dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user-dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsPhoneNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user-dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Default value : Role.Worker\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Transform( => )@IsEnum(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user-dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        worker\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateWorkerDTO\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateIf(o => )@IsNotEmpty()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-user-dto.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  IsEnum,\n  ValidateIf,\n  ValidateNested,\n  IsPhoneNumber,\n} from 'class-validator';\nimport { Gender, Role } from '../enums/users.enums';\nimport { CreateWorkerDTO } from './worker-dto';\nimport { Type, Transform } from 'class-transformer';\n\nexport class CreateUserDTO {\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsPhoneNumber()\n  phone: string;\n\n  @Transform(({ value }) => (value ? value.toLowerCase() : value))\n  @IsEnum(Gender)\n  gender: Gender;\n\n  @Transform(({ value }) => (value ? value.toLowerCase() : value))\n  @IsEnum(Role)\n  role: Role = Role.Worker;\n\n  @ValidateIf((o) => o.role === Role.Worker)\n  @IsNotEmpty()\n  @ValidateNested()\n  @Type(() => CreateWorkerDTO)\n  worker?: CreateWorkerDTO;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateWorkerDTO.html":{"url":"classes/CreateWorkerDTO.html","title":"class - CreateWorkerDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateWorkerDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/worker-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                manager\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        manager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/worker-dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsMongoId, IsNotEmpty } from 'class-validator';\n\nexport class CreateWorkerDTO {\n  @IsNotEmpty()\n  @IsMongoId()\n  manager: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DeleteMessage.html":{"url":"interfaces/DeleteMessage.html","title":"interface - DeleteMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DeleteMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/messages/interfaces/messages.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            messageId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            rooms\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        messageId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        messageId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rooms\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rooms:     Types.ObjectId[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Types.ObjectId[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Types } from 'mongoose';\n\nexport interface DeleteMessage {\n  rooms?: Types.ObjectId[];\n  messageId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailDTO.html":{"url":"classes/EmailDTO.html","title":"class - EmailDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/mail/dtos/email-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                html\n                            \n                            \n                                    \n                                    \n                                subject\n                            \n                            \n                                    \n                                    \n                                text\n                            \n                            \n                                    \n                                    \n                                    \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        html\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/mail/dtos/email-dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/mail/dtos/email-dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/mail/dtos/email-dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/mail/dtos/email-dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class EmailDTO {\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  to: string;\n\n  @IsNotEmpty()\n  @IsString()\n  subject: string;\n\n  @IsNotEmpty()\n  @IsString()\n  text: string;\n\n  @IsOptional()\n  @IsString()\n  html?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IResponse.html":{"url":"interfaces/IResponse.html","title":"interface - IResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/response.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IResponse {\n  message: string;\n  data?: unknown;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JWTStrategy.html":{"url":"injectables/JWTStrategy.html","title":"injectable - JWTStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JWTStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                extractJWT\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/common/strategies/jwt.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        extractJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractJWT(req: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/strategies/jwt.strategy.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: Payload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/strategies/jwt.strategy.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Payload } from 'src/modules/auth/types/auth.types';\nimport * as dotenv from 'dotenv';\nimport { Request } from 'express';\nimport { UsersService } from 'src/modules/users/users.service';\ndotenv.config();\n\n@Injectable()\nexport class JWTStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly usersService: UsersService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        JWTStrategy.extractJWT,\n        ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  private static extractJWT(req: Request): string | null {\n    if (\n      req.cookies &&\n      'accessToken' in req.cookies &&\n      req.cookies.accessToken.length > 0\n    ) {\n      return req.cookies.accessToken;\n    }\n    return null;\n  }\n\n  async validate(payload: Payload) {\n    const user = await this.usersService.findById(payload.userId);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    console.log(`User ID in Jwt Strategy:${user.id}`);\n    return { userId: payload.userId, email: payload.email, role: payload.role };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guards/jwt.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDTO.html":{"url":"classes/LoginDTO.html","title":"class - LoginDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/login.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class LoginDTO {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MailModule_exports\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport { MailerModule } from '@nestjs-modules/mailer';\n\n@Module({\n  imports: [\n    MailerModule.forRoot({\n      transport: {\n        host: process.env.SMTP_HOST,\n        port: parseInt(process.env.SMTP_PORT),\n        secure: process.env.SMPTP_SECURE == `true`,\n        auth: {\n          user: process.env.MJ_API_KEY,\n          pass: process.env.MJ_SECRET_KEY,\n        },\n      },\n    }),\n  ],\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/mail/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/mail/mail.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendEmail(data: EmailDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/mail/mail.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            EmailDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { EmailDTO } from './dtos/email-dto';\nimport { MailerService } from '@nestjs-modules/mailer';\n\n@Injectable()\nexport class MailService {\n  constructor(private mailerService: MailerService) {}\n\n  async sendEmail(data: EmailDTO) {\n    this.mailerService.sendMail({\n      from: `${process.env.SENDER_NAME} ${process.env.SENDER_MAIL}`,\n      ...data,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Manager.html":{"url":"classes/Manager.html","title":"class - Manager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Manager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/schemas/manager.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                team\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        team\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['undefined'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/schemas/manager.schema.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\nimport { User } from 'src/modules/users/schemas/user.schema';\nimport mongoose from 'mongoose';\n\nexport type ManagerDocument = HydratedDocument;\n\n@Schema()\nexport class Manager extends User {\n  @Prop([{ type: mongoose.Schema.Types.ObjectId, ref: 'User', default: [] }])\n  team: mongoose.Schema.Types.ObjectId[];\n}\n\nexport const ManagerSchema = SchemaFactory.createForClass(Manager);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Message.html":{"url":"classes/Message.html","title":"class - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/messages/message.schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                createdAt\n                            \n                            \n                                room\n                            \n                            \n                                sender\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/messages/message.schema.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/messages/message.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        room\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/messages/message.schema.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sender\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/messages/message.schema.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/messages/message.schema.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import mongoose, { Document } from 'mongoose';\n\nexport class Message extends Document {\n  sender: mongoose.Schema.Types.ObjectId;\n\n  content: string;\n\n  room: mongoose.Schema.Types.ObjectId;\n\n  createdAt: Date;\n\n  updatedAt: Date;\n}\n\nexport const MessageSchema = new mongoose.Schema(\n  {\n    sender: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: `User`,\n      required: true,\n    },\n    content: { type: String, required: true },\n    room: { type: mongoose.Schema.Types.ObjectId, ref: `Room`, index: true },\n  },\n  { timestamps: true },\n);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MessagesController.html":{"url":"controllers/MessagesController.html","title":"controller - MessagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MessagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/messages/messages.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/messages\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(message: CreateMessageDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(new ValidationPipe())@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/messages/messages.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            CreateMessageDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(search: SearchMessageDTO, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UsePipes(new ValidationPipe())\n                \n            \n\n                    \n                        \n                            Defined in src/modules/messages/messages.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                search\n                                            \n                                                            SearchMessageDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  ValidationPipe,\n  UsePipes,\n  Body,\n  Get,\n  Res,\n  Query,\n} from '@nestjs/common';\nimport { CreateMessageDTO } from './dtos/create-message-dto';\nimport { MessagesService } from './messages.service';\nimport { Response } from 'express';\nimport { SearchMessageDTO } from './dtos/message-search-dto';\n\n@Controller('api/messages')\nexport class MessagesController {\n  constructor(private readonly messageService: MessagesService) {}\n\n  @UsePipes(\n    new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n    }),\n  )\n  @Post()\n  async create(@Body() message: CreateMessageDTO) {\n    console.log(`Message to be Created: ${message}`);\n    return this.messageService.create(message);\n  }\n\n  @Get()\n  @UsePipes(\n    new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n    }),\n  )\n  async findAll(\n    @Query() search: SearchMessageDTO,\n    @Res({ passthrough: true }) res: Response,\n  ) {\n    const messages = await this.messageService.findMultiple(search);\n    if (messages.length === 0) {\n      res.status(204);\n      return;\n    }\n    return messages;\n  }\n  /*\n  @Get(`:id`)\n  async findOne(\n    @Param(`id`) id: string,\n    @Res({ passthrough: true }) res: Response,\n  ) {\n    const message = await this.messageService.findOne(id);\n    if (!message) {\n      res.status(204);\n      return;\n    }\n    return message;\n  }\n\n\n  @UsePipes(\n    new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n    }),\n  )\n  @Patch(`:id`)\n  async update(\n    @Body() content: UpdateMessageDTO,\n    @Param(`id`) id: string,\n    @Res({ passthrough: true }) res: Response,\n  ) {\n    const message = await this.messageService.update(id, content);\n    if (!message) {\n      res.status(204);\n      return;\n    }\n    return { message: `Message updated successfully` };\n  }\n\n  @Delete(`:id`)\n  async delete(\n    @Param(`id`) id: string,\n    @Res({ passthrough: true }) res: Response,\n  ) {\n    const message = await this.messageService.delete(id);\n    if (!message) {\n      res.status(204);\n      return;\n    }\n    return { message: `Message deleted successfully` };\n  }\n    */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_MessagesModule_exports\n\n\n\ncluster_MessagesModule_imports\n\n\n\n\nChatModule\n\nChatModule\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nChatModule->MessagesModule\n\n\n\n\n\nRoomsModule\n\nRoomsModule\n\nMessagesModule -->\n\nRoomsModule->MessagesModule\n\n\n\n\n\nMessagesService \n\nMessagesService \n\nMessagesService  -->\n\nMessagesModule->MessagesService \n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MessagesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ChatModule\n                        \n                        \n                            RoomsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { MessagesController } from './messages.controller';\nimport { MessagesService } from './messages.service';\nimport { Message, MessageSchema } from './message.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ChatModule } from 'src/modules/chat/chat.module';\nimport { UsersModule } from '../users/users.module';\nimport { RoomsModule } from '../rooms/rooms.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Message.name, schema: MessageSchema }]),\n    ChatModule,\n    forwardRef(() => UsersModule),\n    RoomsModule,\n  ],\n  controllers: [MessagesController],\n  providers: [MessagesService],\n  exports: [MessagesService],\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/messages/messages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findMultiple\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messageModel: Model, chatGateway: ChatGateway, usersService: UsersService, roomService: RoomsService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/messages/messages.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messageModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chatGateway\n                                                  \n                                                        \n                                                                        ChatGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roomService\n                                                  \n                                                        \n                                                                        RoomsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(message: CreateMessageDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/messages/messages.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            CreateMessageDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(options: DeleteMessage, session: ClientSession)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/messages/messages.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            DeleteMessage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                        ClientSession\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findMultiple\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultiple(search: SearchMessageDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/messages/messages.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                search\n                                            \n                                                            SearchMessageDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  Inject,\n  forwardRef,\n} from '@nestjs/common';\nimport { CreateMessageDTO } from './dtos/create-message-dto';\nimport { Message } from './message.schema';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { ClientSession, Model } from 'mongoose';\nimport { ChatGateway } from 'src/modules/chat/chat.gateway';\nimport { SearchMessageDTO } from './dtos/message-search-dto';\nimport { UsersService } from '../users/users.service';\nimport { RoomsService } from '../rooms/rooms.service';\nimport { DeleteMessage } from './interfaces/messages.interface';\n\n@Injectable()\nexport class MessagesService {\n  constructor(\n    @InjectModel(Message.name) private messageModel: Model,\n    private readonly chatGateway: ChatGateway,\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n    private readonly roomService: RoomsService,\n  ) {}\n\n  async create(message: CreateMessageDTO) {\n    const user = await this.usersService.findById(message.sender);\n    if (!user) {\n      throw new NotFoundException(`User not found`);\n    }\n\n    const room = await this.roomService.findOne(message.room);\n    if (!room) {\n      console.log(`Room not Found`);\n      return;\n    }\n\n    if (room.isActive === false) {\n      throw new BadRequestException(\n        `Cannot send messages in deactivated rooms`,\n      );\n    }\n\n    const createdMessage = await this.messageModel.create(message);\n    this.chatGateway.sendMessage(\n      createdMessage,\n      `${user.firstName} ${user.lastName}`,\n    );\n    return {\n      message: 'Message created successfully',\n    };\n  }\n\n  async findMultiple(search: SearchMessageDTO) {\n    const roomFilter = search.room ? { room: search.room } : {};\n    const query = { ...roomFilter };\n    return await this.messageModel\n      .find(query)\n      .populate(`sender`)\n      .sort({ createdAt: 1 });\n  }\n\n  async delete(options: DeleteMessage, session: ClientSession) {\n    return options.messageId\n      ? await this.messageModel\n          .findByIdAndDelete(options.messageId)\n          .session(session)\n      : await this.messageModel\n          .deleteMany({ room: { $in: options.rooms } })\n          .session(session);\n  }\n  /*\n  async findOne(id: string) {\n    return await this.messageModel.findById(id);\n  }\n\n  async update(id: string, content: UpdateMessageDTO) {\n    return this.messageModel.findByIdAndUpdate(id, content);\n  }\n    */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Notification.html":{"url":"classes/Notification.html","title":"class - Notification","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Notification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/notification.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                to\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true, minlength: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/notification.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        to\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['undefined'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/notifications/notification.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\nimport mongoose from 'mongoose';\nexport type NotificationDocument = HydratedDocument;\n\n@Schema({ timestamps: true })\nexport class Notification {\n  @Prop({ type: String, required: true, minlength: 1 })\n  description: string;\n\n  @Prop([\n    {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'User',\n      required: true,\n      index: true,\n    },\n  ])\n  to: mongoose.Schema.Types.ObjectId[];\n}\n\nexport const NotificationSchema = SchemaFactory.createForClass(Notification);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationsModule.html":{"url":"modules/NotificationsModule.html","title":"module - NotificationsModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_providers\n\n\n\ncluster_NotificationsModule_exports\n\n\n\ncluster_NotificationsModule_imports\n\n\n\n\nChatModule\n\nChatModule\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nNotificationsModule -->\n\nChatModule->NotificationsModule\n\n\n\n\n\nNotificationsService \n\nNotificationsService \n\nNotificationsService  -->\n\nNotificationsModule->NotificationsService \n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nNotificationsModule -->\n\nNotificationsService->NotificationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/notifications/notifications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ChatModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NotificationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { NotificationsService } from './notifications.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { NotificationSchema } from './notification.schema';\nimport { Notification } from './notification.schema';\nimport { ChatModule } from 'src/modules/chat/chat.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Notification.name, schema: NotificationSchema },\n    ]),\n    ChatModule,\n  ],\n  providers: [NotificationsService],\n  exports: [NotificationsService],\n})\nexport class NotificationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationsService.html":{"url":"injectables/NotificationsService.html","title":"injectable - NotificationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/notifications/notifications.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteByUser\n                            \n                            \n                                    Async\n                                generateDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationModel: Model, chatGateway: ChatGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/notifications/notifications.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        chatGateway\n                                                  \n                                                        \n                                                                        ChatGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: CreateNotificationDTO, session: ClientSession)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/notifications/notifications.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateNotificationDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                        ClientSession\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteByUser(userId: string, session: ClientSession)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/notifications/notifications.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                        ClientSession\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateDescription\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateDescription(task: UpdateTaskDTO, taskTitle: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/notifications/notifications.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            UpdateTaskDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                taskTitle\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { ClientSession, Model } from 'mongoose';\nimport { Notification } from './notification.schema';\nimport { CreateNotificationDTO } from './dtos/create-notification-dto';\nimport { ChatGateway } from 'src/modules/chat/chat.gateway';\nimport { UpdateTaskDTO } from 'src/modules/tasks/dtos/update-task-dto';\n\n@Injectable()\nexport class NotificationsService {\n  constructor(\n    @InjectModel(Notification.name)\n    private notificationModel: Model,\n    private chatGateway: ChatGateway,\n  ) {}\n\n  async create(data: CreateNotificationDTO, session: ClientSession) {\n    console.log(data);\n    const notificationData = new this.notificationModel(data);\n    const notification = await notificationData.save({ session: session });\n    if (!notification) {\n      throw new Error(`Notification could not be created`);\n    }\n    await this.chatGateway.sendNotification(notification);\n  }\n\n  async generateDescription(task: UpdateTaskDTO, taskTitle: string) {\n    const titleString = `Task ${taskTitle} has been updated.The `;\n    return titleString.concat(\n      Object.keys(task).join(' , '),\n      ' have been updated',\n    );\n  }\n\n  async deleteByUser(userId: string, session: ClientSession) {\n    await this.notificationModel.deleteMany({ to: userId }).session(session);\n  }\n  /*\n  async findMultiple() {\n    return await this.notificationModel.find();\n  }\n\n  async findOne(id: string) {\n    return await this.notificationModel.findById(id);\n  }\n\n \n\n  async consume(\n    notificationId: string,\n    userId: string,\n    session?: ClientSession,\n  ) {\n    return session\n      ? await this.notificationModel\n          .findByIdAndUpdate(notificationId, { $pull: { to: userId } })\n          .session(session)\n      : await this.notificationModel.findByIdAndUpdate(notificationId, {\n          $pull: { to: userId },\n        });\n  }\n        */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDTO.html":{"url":"classes/PaginationDTO.html","title":"class - PaginationDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dtos/pagination-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/pagination-dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/pagination-dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dtos/pagination-dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, IsOptional, IsString, Min } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class PaginationDTO {\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  @Type(() => Number)\n  @IsOptional()\n  @IsNumber()\n  @Min(1)\n  page?: number;\n\n  @Type(() => Number)\n  @IsOptional()\n  @IsNumber()\n  @Min(1)\n  limit?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Payload.html":{"url":"interfaces/Payload.html","title":"interface - Payload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Payload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/types/auth.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Payload {\n  email: string;\n  userId: string;\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReassignWorkerDTO.html":{"url":"classes/ReassignWorkerDTO.html","title":"class - ReassignWorkerDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReassignWorkerDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/reassign-worker.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                managerId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        managerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/reassign-worker.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsMongoId, IsNotEmpty } from 'class-validator';\n\nexport class ReassignWorkerDTO {\n  @IsNotEmpty()\n  @IsMongoId()\n  managerId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshAuthGuard.html":{"url":"injectables/RefreshAuthGuard.html","title":"injectable - RefreshAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/refresh.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard(`refresh-jwt`)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class RefreshAuthGuard extends AuthGuard(`refresh-jwt`) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshJWTStrategy.html":{"url":"injectables/RefreshJWTStrategy.html","title":"injectable - RefreshJWTStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshJWTStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/refresh.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(\n  Strategy,\n  `refresh-jwt`,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                extractJWT\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(refreshJwtConfiguration: ConfigType<>, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/refresh.strategy.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        refreshJwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        extractJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractJWT(req: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/refresh.strategy.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(req: Request, payload: Payload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/refresh.strategy.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Payload } from '../types/auth.types';\nimport * as dotenv from 'dotenv';\nimport refreshJwtConfig from '../config/refresh-jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { Request } from 'express';\nimport { AuthService } from '../auth.service';\ndotenv.config();\n\n@Injectable()\nexport class RefreshJWTStrategy extends PassportStrategy(\n  Strategy,\n  `refresh-jwt`,\n) {\n  constructor(\n    @Inject(refreshJwtConfig.KEY)\n    private refreshJwtConfiguration: ConfigType,\n    private authService: AuthService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        RefreshJWTStrategy.extractJWT,\n        ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: refreshJwtConfiguration.secret,\n      passReqToCallback: true,\n    });\n  }\n\n  private static extractJWT(req: Request): string | null {\n    if (\n      req.cookies &&\n      'refreshToken' in req.cookies &&\n      req.cookies.refreshToken.length > 0\n    ) {\n      return req.cookies.refreshToken;\n    }\n    return null;\n  }\n\n  async validate(req: Request, payload: Payload) {\n    const refreshToken = req.cookies[`refreshToken`].trim();\n    const id = payload.userId;\n    return await this.authService.validateRefreshToken(id, refreshToken);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/role.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/role.guard.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/role.decorator';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRole = this.reflector.get(\n      ROLES_KEY,\n      context.getHandler(),\n    );\n    if (!requiredRole) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRole.includes(user.role);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Room.html":{"url":"classes/Room.html","title":"class - Room","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Room\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/room.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                members\n                            \n                            \n                                    \n                                task\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Boolean, default: true, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/room.schema.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['undefined'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/room.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        task\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Task', required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/room.schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\nimport mongoose from 'mongoose';\nexport type RoomDocument = HydratedDocument;\n\n@Schema({ timestamps: true })\nexport class Room {\n  @Prop({\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Task',\n    required: true,\n    unique: true,\n  })\n  task: mongoose.Schema.Types.ObjectId;\n\n  @Prop([\n    {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'User',\n      default: [],\n      index: true,\n    },\n  ])\n  members: mongoose.Schema.Types.ObjectId[];\n\n  @Prop({ type: Boolean, default: true, required: true })\n  isActive: boolean;\n}\n\nexport const RoomSchema = SchemaFactory.createForClass(Room);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoomSearchDTO.html":{"url":"classes/RoomSearchDTO.html","title":"class - RoomSearchDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoomSearchDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dtos/room-search-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                member\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        member\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dtos/room-search-dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsMongoId, IsOptional } from 'class-validator';\n\nexport class RoomSearchDTO {\n  @IsOptional()\n  @IsMongoId()\n  member?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoomsController.html":{"url":"controllers/RoomsController.html","title":"controller - RoomsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoomsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/rooms.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/rooms\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                findMultiple\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findMultiple\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultiple(search: RoomSearchDTO, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(new ValidationPipe())@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                search\n                                            \n                                                            RoomSearchDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Res,\n  Body,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { RoomsService } from './rooms.service';\nimport { Response } from 'express';\nimport { RoomSearchDTO } from './dtos/room-search-dto';\n\n@Controller('api/rooms')\nexport class RoomsController {\n  constructor(private roomService: RoomsService) {}\n\n  @UsePipes(\n    new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n    }),\n  )\n  @Get()\n  async findMultiple(\n    @Body() search: RoomSearchDTO,\n    @Res({ passthrough: true }) res: Response,\n  ) {\n    const rooms = await this.roomService.findMultiple(search);\n    if (rooms.length === 0) {\n      res.status(204);\n      return;\n    }\n    return rooms;\n  }\n  /*\n  @Get(`:id`)\n  async findOne(\n    @Param(`id`) id: string,\n    @Res({ passthrough: true }) res: Response,\n  ) {\n    const room = await this.roomService.findOne(id);\n    if (!room) {\n      res.status(204);\n      return;\n    }\n    return room;\n  }\n    */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoomsModule.html":{"url":"modules/RoomsModule.html","title":"module - RoomsModule","body":"\n                   \n\n\n\n\n    Modules\n    RoomsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RoomsModule\n\n\n\ncluster_RoomsModule_exports\n\n\n\ncluster_RoomsModule_providers\n\n\n\n\nRoomsService \n\nRoomsService \n\n\n\nRoomsModule\n\nRoomsModule\n\nRoomsService  -->\n\nRoomsModule->RoomsService \n\n\n\n\n\nRoomsService\n\nRoomsService\n\nRoomsModule -->\n\nRoomsService->RoomsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/rooms/rooms.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoomsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoomsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoomsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Room, RoomSchema } from './room.schema';\nimport { RoomsController } from './rooms.controller';\nimport { RoomsService } from './rooms.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Room.name, schema: RoomSchema }]),\n  ],\n  controllers: [RoomsController],\n  providers: [RoomsService],\n  exports: [RoomsService],\n})\nexport class RoomsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoomsService.html":{"url":"injectables/RoomsService.html","title":"injectable - RoomsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoomsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/rooms.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findMultiple\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                removeUser\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roomModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/rooms/rooms.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roomModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(room: CreateRoomDTO, session: ClientSession)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                room\n                                            \n                                                            CreateRoomDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                        ClientSession\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findMultiple\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultiple(search: RoomSearchDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                search\n                                            \n                                                            RoomSearchDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(taskId: mongoose.Types.ObjectId, session: ClientSession)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                        ClientSession\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUser(user: Omit, session: ClientSession)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Omit\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                        ClientSession\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(taskId: mongoose.Types.ObjectId, data: UpdateRoomDTO, session: ClientSession)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/rooms/rooms.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                taskId\n                                            \n                                                        mongoose.Types.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            UpdateRoomDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                        ClientSession\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Room } from './room.schema';\nimport { InjectModel } from '@nestjs/mongoose';\nimport mongoose, { Model } from 'mongoose';\nimport { RoomSearchDTO } from './dtos/room-search-dto';\nimport { CreateRoomDTO } from './dtos/create-room-dto';\nimport { ClientSession } from 'mongoose';\nimport { UpdateRoomDTO } from './dtos/update-room-dto';\nimport { Payload } from '../auth/types/auth.types';\nimport { Role } from '../users/enums/users.enums';\n\n@Injectable()\nexport class RoomsService {\n  constructor(@InjectModel(Room.name) private roomModel: Model) {}\n\n  async create(room: CreateRoomDTO, session: ClientSession) {\n    const createdRoom = new this.roomModel(room);\n    return await createdRoom.save({ session: session });\n  }\n\n  async findMultiple(search: RoomSearchDTO) {\n    const memberFilter = search.member ? { members: search.member } : {};\n    const query = { ...memberFilter };\n    return this.roomModel.find(query).populate(`task`);\n  }\n\n  async update(\n    taskId: mongoose.Types.ObjectId,\n    data: UpdateRoomDTO,\n    session: ClientSession,\n  ) {\n    return await this.roomModel\n      .findOneAndUpdate({ task: taskId }, { ...data })\n      .session(session);\n  }\n\n  async remove(taskId: mongoose.Types.ObjectId, session: ClientSession) {\n    return await this.roomModel\n      .findOneAndDelete({ task: taskId })\n      .session(session);\n  }\n\n  async removeUser(user: Omit, session: ClientSession) {\n    const rooms = await this.roomModel.find({ members: user.userId });\n    if (rooms.length === 0) {\n      return rooms;\n    }\n    if (user.role === Role.Worker) {\n      await this.roomModel\n        .updateMany(\n          { members: user.userId },\n          { $pull: { members: user.userId } },\n        )\n        .session(session);\n    } else {\n      await this.roomModel\n        .deleteMany({ members: user.userId })\n        .session(session);\n    }\n    return rooms;\n  }\n\n  async findOne(id: string) {\n    return this.roomModel.findById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchMessageDTO.html":{"url":"classes/SearchMessageDTO.html","title":"class - SearchMessageDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchMessageDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/messages/dtos/message-search-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                room\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        room\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/messages/dtos/message-search-dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsMongoId, IsOptional } from 'class-validator';\n\nexport class SearchMessageDTO {\n  @IsOptional()\n  @IsMongoId()\n  room?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SeederModule.html":{"url":"modules/SeederModule.html","title":"module - SeederModule","body":"\n                   \n\n\n\n\n    Modules\n    SeederModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SeederModule\n\n\n\ncluster_SeederModule_providers\n\n\n\n\nSeederService\n\nSeederService\n\n\n\nSeederModule\n\nSeederModule\n\nSeederModule -->\n\nSeederService->SeederModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/seeder/seeder.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SeederService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SeederService } from './seeder.service';\nimport { User } from '../users/schemas/user.schema';\nimport { UserSchema } from '../users/schemas/user.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: User.name,\n        schema: UserSchema,\n      },\n    ]),\n  ],\n  providers: [SeederService],\n})\nexport class SeederModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SeederService.html":{"url":"injectables/SeederService.html","title":"injectable - SeederService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SeederService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/seeder/seeder.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                seed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/seeder/seeder.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        seed\n                        \n                    \n                \n            \n            \n                \n                        \n                    seed()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/seeder/seeder.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from '../users/schemas/user.schema';\nimport { Model } from 'mongoose';\nimport { Gender, Role } from '../users/enums/users.enums';\nimport * as bcrypt from 'bcryptjs';\n\n@Injectable()\nexport class SeederService {\n  constructor(\n    @InjectModel(User.name) private readonly userModel: Model,\n  ) {}\n\n  async seed() {\n    const check = await this.userModel.find({ role: Role.Admin });\n    if (check.length === 0) {\n      const salt = await bcrypt.genSalt();\n      const admin = new this.userModel({\n        firstName: `Admin`,\n        lastName: `User`,\n        email: `admin@mail.com`,\n        password: await bcrypt.hash(`admin`, salt),\n        gender: Gender.Male,\n        phone: `+928111125`,\n        role: Role.Admin,\n        isTrialActive: false,\n        isVerified: true,\n      });\n      const user = await admin.save();\n      if (!user) {\n        throw new Error(`There was some error in creating the admin`);\n      }\n      console.log(`Admin created successfully`);\n    }\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServerToClientEvents.html":{"url":"interfaces/ServerToClientEvents.html","title":"interface - ServerToClientEvents","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServerToClientEvents\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/chat/types/chat.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            newMessage\n                                        \n                                \n                                \n                                        \n                                            roomList\n                                        \n                                \n                                \n                                        \n                                            sendNotification\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        newMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newMessage:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roomList\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roomList:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sendNotification\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sendNotification:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Message } from 'src/modules/messages/message.schema';\nimport { Room } from 'src/modules/rooms/room.schema';\n\nexport interface ServerToClientEvents {\n  newMessage: (payload: { message: Message; senderName: string }) => void;\n  roomList: (payload: Room[]) => void;\n  sendNotification: (payload: { description: string }) => void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripeController.html":{"url":"controllers/StripeController.html","title":"controller - StripeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/stripe/stripe.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                createPaymentIntent\n                            \n                            \n                                    \n                                    Async\n                                handleWebhook\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createPaymentIntent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPaymentIntent(user: Payload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(payment/payment-intent)@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/stripe/stripe.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleWebhook\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWebhook(req: RawBodyRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(stripe/webhook)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/stripe/stripe.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        RawBodyRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, UseGuards, RawBodyRequest } from '@nestjs/common';\nimport { JwtAuthGuard } from 'src/common/guards/jwt.guard';\nimport { StripeService } from './stripe.service';\nimport { CurrentUser } from 'src/common/decorators/current-user.decorator';\nimport { Payload } from '../auth/types/auth.types';\nimport { IResponse } from 'src/common/interfaces/response.interface';\nimport { Req } from '@nestjs/common';\nimport { Request } from 'express';\n\n@Controller('api')\nexport class StripeController {\n  constructor(private readonly stripeService: StripeService) {}\n  @Post(`payment/payment-intent`)\n  @UseGuards(JwtAuthGuard)\n  async createPaymentIntent(@CurrentUser() user: Payload): Promise {\n    return await this.stripeService.createPaymentIntent(user);\n  }\n\n  @Post(`stripe/webhook`)\n  async handleWebhook(@Req() req: RawBodyRequest) {\n    return this.stripeService.handleWebHook(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripeModule.html":{"url":"modules/StripeModule.html","title":"module - StripeModule","body":"\n                   \n\n\n\n\n    Modules\n    StripeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_StripeModule_imports\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nStripeModule\n\nStripeModule\n\nStripeModule -->\n\nMailModule->StripeModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nStripeModule -->\n\nUsersModule->StripeModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/stripe/stripe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripeService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StripeController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StripeController } from './stripe.controller';\nimport { StripeService } from './stripe.service';\nimport { MailModule } from '../mail/mail.module';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [MailModule, UsersModule],\n  controllers: [StripeController],\n  providers: [StripeService],\n})\nexport class StripeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripeService.html":{"url":"injectables/StripeService.html","title":"injectable - StripeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/stripe/stripe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPaymentIntent\n                            \n                            \n                                    Async\n                                createPaymentLink\n                            \n                            \n                                    Async\n                                handleWebHook\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/stripe/stripe.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPaymentIntent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPaymentIntent(user: Payload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/stripe/stripe.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPaymentLink\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPaymentLink(userId: string, client_secret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/stripe/stripe.service.ts:127\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                client_secret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleWebHook\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWebHook(req: RawBodyRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/stripe/stripe.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        RawBodyRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/stripe/stripe.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Payload } from '../auth/types/auth.types';\nimport Stripe from 'stripe';\nimport { ConfigService } from '@nestjs/config';\nimport { RawBodyRequest } from '@nestjs/common';\nimport { Request } from 'express';\nimport { UsersService } from '../users/users.service';\nimport { MailService } from '../mail/mail.service';\n\n@Injectable()\nexport class StripeService {\n  private stripe: Stripe;\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n    private readonly mailService: MailService,\n  ) {\n    const apiKey = this.configService.get('STRIPE_KEY');\n\n    if (!apiKey) {\n      throw new Error('Stripe API key not found');\n    }\n    this.stripe = new Stripe(apiKey);\n  }\n  async createPaymentIntent(user: Payload) {\n    const userData = await this.usersService.findById(user.userId);\n    if (!userData) {\n      throw new NotFoundException(`User not found`);\n    }\n    if (userData.isTrialActive === false) {\n      return { message: `You have already paid the required amount` };\n    }\n    const amount = 10000;\n    const paymentIntent = await this.stripe.paymentIntents.create({\n      amount: amount,\n      currency: 'usd',\n      description: `Payment for user ID: ${user.userId}`,\n      metadata: {\n        userId: user.userId,\n      },\n    });\n    const paymentLink = await this.createPaymentLink(\n      userData._id.toString(),\n      paymentIntent.client_secret,\n    );\n    await this.mailService.sendEmail({\n      to: userData.email,\n      text: `Hello ${userData.firstName}. Here is your Payment Link: ${paymentLink}`,\n      subject: `Payment`,\n      html: `\n      \n        \n          \n            body {\n              font-family: Arial, sans-serif;\n              background-color: #f4f7fc;\n              margin: 0;\n              padding: 0;\n              color: #333;\n            }\n            .container {\n              width: 100%;\n              max-width: 600px;\n              margin: 20px auto;\n              background-color: #ffffff;\n              padding: 20px;\n              border-radius: 8px;\n              box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            }\n            .header {\n              text-align: center;\n              padding-bottom: 20px;\n              border-bottom: 2px solid #eee;\n            }\n            .content {\n              padding: 20px 0;\n              text-align: center;\n            }\n            .verification-code {\n              display: inline-block;\n              font-size: 24px;\n              font-weight: bold;\n              color: #4CAF50;\n              background-color: #f0f9f4;\n              padding: 10px 20px;\n              border-radius: 5px;\n            }\n            .footer {\n              text-align: center;\n              font-size: 12px;\n              color: #777;\n              margin-top: 30px;\n            }\n          \n        \n        \n          \n            \n              Email Verification\n            \n            \n              Hello ${userData.firstName},\n              Use the below link to complete your payment:\n              \n                ${paymentLink}\n              \n            \n            \n              Thank you for using our service!\n              Best regards, The Task Manager Team\n            \n          \n        \n      \n    `,\n    });\n    return {\n      message: 'Payment Intent created successfully',\n      data: {\n        paymentIntent: paymentIntent,\n        paymentLink: paymentLink,\n      },\n    };\n  }\n\n  async createPaymentLink(userId: string, client_secret: string) {\n    const paymentLink = `http://127.0.0.1:5500/src/payment.html?userid=${userId}&client_secret=${client_secret}`;\n    return paymentLink;\n  }\n\n  async handleWebHook(req: RawBodyRequest) {\n    let event;\n    try {\n      event = this.stripe.webhooks.constructEvent(\n        req.rawBody,\n        req.header('Stripe-Signature'),\n        process.env.STRIPE_WEBHOOK_SECRET,\n      );\n    } catch (err) {\n      console.log(err);\n      console.log(`Webhook signature verification failed.`);\n\n      throw err;\n    }\n    switch (event.type) {\n      case 'payment_intent.succeeded': {\n        const paymentIntent = event.data.object as Stripe.PaymentIntent;\n        console.log(`userId in webhook:${paymentIntent.metadata.userId}`);\n        const updatedUser = await this.usersService.removeTrial(\n          paymentIntent.metadata.userId,\n        );\n        if (!updatedUser) {\n          throw new Error(`There was some issue in updating your trial`);\n        }\n        break;\n      }\n      default:\n        console.log(`Unhandled Event ${event.type}`);\n    }\n\n    return { message: 'Event received' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tasks/task.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                collaborators\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                dueDate\n                            \n                            \n                                    \n                                manager\n                            \n                            \n                                    \n                                priority\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                worker\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        collaborators\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop(['undefined'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/task.schema.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true, minlength: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/task.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dueDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: Date, required: true, index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/task.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        manager\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true, index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/task.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         priority\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, enum: priority, index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/task.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, enum: status, default: undefined, index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/task.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true, minlength: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/task.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        worker\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true, index: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/task.schema.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\nimport mongoose from 'mongoose';\nimport { priority, status } from './enums/tasks.enums';\nexport type TaskDocument = HydratedDocument;\n\n@Schema({ timestamps: true })\nexport class Task {\n  @Prop({ type: String, required: true, minlength: 1 })\n  title: string;\n\n  @Prop({ type: String, required: true, minlength: 1 })\n  description: string;\n\n  @Prop({ required: true, enum: priority, index: true })\n  priority: priority;\n\n  @Prop({ required: true, enum: status, default: status.NEW, index: true })\n  status: status;\n\n  @Prop({ type: Date, required: true, index: true })\n  dueDate: Date;\n\n  @Prop({\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n    index: true,\n  })\n  manager: mongoose.Schema.Types.ObjectId;\n\n  @Prop({\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n    index: true,\n  })\n  worker: mongoose.Schema.Types.ObjectId;\n\n  @Prop([{ type: mongoose.Schema.Types.ObjectId, ref: 'User', index: true }])\n  collaborators?: mongoose.Schema.Types.ObjectId[];\n}\n\nexport const TaskSchema = SchemaFactory.createForClass(Task);\n\nTaskSchema.index({\n  title: 'text',\n  description: 'text',\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskSearchDTO.html":{"url":"classes/TaskSearchDTO.html","title":"class - TaskSearchDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskSearchDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tasks/dtos/task-search-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PaginationDTO\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                dueDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                priority\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        dueDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/dtos/task-search-dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         priority\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(priority)@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/dtos/task-search-dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(status)@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/dtos/task-search-dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()@IsNumber()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDTO:19\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()@IsNumber()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDTO:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDTO:7\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationDTO } from 'src/common/dtos/pagination-dto';\nimport { priority, status } from '../enums/tasks.enums';\nimport { IsOptional, IsEnum, IsDate } from 'class-validator';\nimport { Transform } from 'class-transformer';\n\nexport class TaskSearchDTO extends PaginationDTO {\n  @IsEnum(priority)\n  @IsOptional()\n  @Transform(({ value }) => (value ? value.toUpperCase() : value))\n  priority?: priority;\n\n  @IsEnum(status)\n  @IsOptional()\n  @Transform(({ value }) => (value ? value.toUpperCase() : value))\n  status?: status;\n\n  @IsDate()\n  @IsOptional()\n  @Transform(({ value }) => (value ? new Date(value) : value))\n  dueDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/tasks\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(task: CreateTaskDTO, user: Payload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(new ValidationPipe())@Post()@UseGuards(JwtAuthGuard, TrialGuard, RoleGuard)@Roles(['undefined'])\n                \n            \n\n                    \n                        \n                            Defined in src/modules/tasks/tasks.controller.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            CreateTaskDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string, user: Payload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(:id)@UseGuards(JwtAuthGuard, TrialGuard, RoleGuard)@Roles(['undefined', 'undefined'])\n                \n            \n\n                    \n                        \n                            Defined in src/modules/tasks/tasks.controller.ts:127\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(search: TaskSearchDTO, user: Payload, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(new ValidationPipe())@Get()@UseGuards(JwtAuthGuard, TrialGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/tasks/tasks.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                search\n                                            \n                                                            TaskSearchDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, user: Payload, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(:id)@UseGuards(JwtAuthGuard, TrialGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/tasks/tasks.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, task: UpdateTaskDTO, user: Payload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(new ValidationPipe())@Patch(:id)@UseGuards(JwtAuthGuard, TrialGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/tasks/tasks.controller.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                task\n                                            \n                                                            UpdateTaskDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Patch,\n  Post,\n  UsePipes,\n  ValidationPipe,\n  Param,\n  Delete,\n  UseGuards,\n  ForbiddenException,\n  Query,\n  Res,\n} from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { CreateTaskDTO } from './dtos/create-task-dto';\nimport { UpdateTaskDTO } from './dtos/update-task-dto';\nimport { JwtAuthGuard } from 'src/common/guards/jwt.guard';\nimport { RoleGuard } from 'src/common/guards/role.guard';\nimport { Roles } from 'src/common/decorators/role.decorator';\nimport { CurrentUser } from 'src/common/decorators/current-user.decorator';\nimport { Payload } from 'src/modules/auth/types/auth.types';\nimport { Role } from 'src/modules/users/enums/users.enums';\nimport { TaskSearchDTO } from './dtos/task-search-dto';\nimport { Response } from 'express';\nimport { IResponse } from 'src/common/interfaces/response.interface';\nimport { TrialGuard } from 'src/common/guards/trial.guard';\n\n@Controller('api/tasks')\nexport class TasksController {\n  constructor(private readonly taskService: TasksService) {}\n\n  @UsePipes(\n    new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n    }),\n  )\n  @Get()\n  @UseGuards(JwtAuthGuard, TrialGuard)\n  async findAll(\n    @Query() search: TaskSearchDTO,\n    @CurrentUser() user: Payload,\n    @Res({ passthrough: true }) res: Response,\n  ): Promise {\n    const data = await this.taskService.findAll(search, user);\n    if (data[0].tasks.length === 0) {\n      res.status(204);\n      return;\n    }\n\n    return {\n      message: 'Tasks retrieved successfully',\n      data: {\n        tasks: data[0]?.tasks || [],\n        totalCount: data[0]?.totalCount[0]?.count || 0,\n      },\n    };\n  }\n\n  @Get(`:id`)\n  @UseGuards(JwtAuthGuard, TrialGuard)\n  async findOne(\n    @Param(`id`) id: string,\n    @CurrentUser() user: Payload,\n    @Res({ passthrough: true }) res: Response,\n  ): Promise {\n    const result = await this.taskService.findOne(id, user);\n    if (!result) {\n      res.status(204);\n      return;\n    }\n\n    return {\n      message: 'Task retrieved successfully',\n      data: result,\n    };\n  }\n\n  @UsePipes(\n    new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n    }),\n  )\n  @Post()\n  @UseGuards(JwtAuthGuard, TrialGuard, RoleGuard)\n  @Roles([Role.Manager])\n  async create(\n    @Body() task: CreateTaskDTO,\n    @CurrentUser() user: Payload,\n  ): Promise {\n    return await this.taskService.create(task, user);\n  }\n\n  @UsePipes(\n    new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n    }),\n  )\n  @Patch(`:id`)\n  @UseGuards(JwtAuthGuard, TrialGuard)\n  async update(\n    @Param(`id`) id: string,\n    @Body() task: UpdateTaskDTO,\n    @CurrentUser() user: Payload,\n  ): Promise {\n    if (user.role === Role.Manager || user.role === Role.Admin) {\n      return this.taskService.update(id, task, user);\n    } else if (user.role === Role.Worker) {\n      return task.status\n        ? this.taskService.update(id, { status: task.status }, user)\n        : { message: 'Workers can only update task status' };\n    } else {\n      throw new ForbiddenException(`Invalid role.`);\n    }\n  }\n\n  @Delete(`:id`)\n  @UseGuards(JwtAuthGuard, TrialGuard, RoleGuard)\n  @Roles([Role.Manager, Role.Admin])\n  async delete(\n    @Param(`id`) id: string,\n    @CurrentUser() user: Payload,\n  ): Promise {\n    return await this.taskService.delete(id, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_imports\n\n\n\ncluster_TasksModule_exports\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nMessagesModule\n\nMessagesModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nMessagesModule->TasksModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nTasksModule -->\n\nNotificationsModule->TasksModule\n\n\n\n\n\nRoomsModule\n\nRoomsModule\n\nTasksModule -->\n\nRoomsModule->TasksModule\n\n\n\n\n\nTasksService \n\nTasksService \n\nTasksService  -->\n\nTasksModule->TasksService \n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/tasks/tasks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MessagesModule\n                        \n                        \n                            NotificationsModule\n                        \n                        \n                            RoomsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TasksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Task, TaskSchema } from './task.schema';\nimport { UsersModule } from 'src/modules/users/users.module';\nimport { RoomsModule } from 'src/modules/rooms/rooms.module';\nimport { NotificationsModule } from 'src/modules/notifications/notifications.module';\nimport { MessagesModule } from '../messages/messages.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Task.name, schema: TaskSchema }]),\n    forwardRef(() => UsersModule),\n    RoomsModule,\n    NotificationsModule,\n    MessagesModule,\n  ],\n  controllers: [TasksController],\n  providers: [TasksService],\n  exports: [TasksService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tasks/tasks.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                removeUser\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskModel: Model, usersService: UsersService, roomsService: RoomsService, notificationService: NotificationsService, messagesService: MessagesService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/tasks/tasks.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roomsService\n                                                  \n                                                        \n                                                                        RoomsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        notificationService\n                                                  \n                                                        \n                                                                        NotificationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messagesService\n                                                  \n                                                        \n                                                                        MessagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(task: CreateTaskDTO, user: Payload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tasks/tasks.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                task\n                                            \n                                                            CreateTaskDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string, user: Payload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tasks/tasks.service.ts:257\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(searchDTO: TaskSearchDTO, user: Payload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tasks/tasks.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                searchDTO\n                                            \n                                                            TaskSearchDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, user: Payload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tasks/tasks.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUser(user: Omit, session: ClientSession)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tasks/tasks.service.ts:287\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Omit\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                        ClientSession\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, data: UpdateTaskDTO, user: Payload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/tasks/tasks.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            UpdateTaskDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Task } from './task.schema';\nimport { ClientSession, Model } from 'mongoose';\nimport { CreateTaskDTO } from './dtos/create-task-dto';\nimport { UpdateTaskDTO } from './dtos/update-task-dto';\nimport { Payload } from 'src/modules/auth/types/auth.types';\nimport { UsersService } from 'src/modules/users/users.service';\nimport { Role } from 'src/modules/users/enums/users.enums';\nimport { RoomsService } from 'src/modules/rooms/rooms.service';\nimport { NotificationsService } from 'src/modules/notifications/notifications.service';\nimport { TaskSearchDTO } from './dtos/task-search-dto';\nimport { Types } from 'mongoose';\nimport { status } from './enums/tasks.enums';\nimport { MessagesService } from '../messages/messages.service';\n\n@Injectable()\nexport class TasksService {\n  constructor(\n    @InjectModel(Task.name) private readonly taskModel: Model,\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n    private readonly roomsService: RoomsService,\n    private readonly notificationService: NotificationsService,\n    private readonly messagesService: MessagesService,\n  ) {}\n\n  async findAll(searchDTO: TaskSearchDTO, user: Payload) {\n    console.log(searchDTO.dueDate);\n    const textFilter = searchDTO.search\n      ? { $text: { $search: searchDTO.search } }\n      : {};\n    const priorityFilter = searchDTO.priority\n      ? { priority: searchDTO.priority }\n      : {};\n    const statusFilter = searchDTO.status ? { status: searchDTO.status } : {};\n    const dateFilter = searchDTO.dueDate\n      ? {\n          dueDate: {\n            $gte: new Date(searchDTO.dueDate.setHours(0, 0, 0, 0)),\n            $lte: new Date(searchDTO.dueDate.setHours(23, 59, 59, 999)),\n          },\n        }\n      : {};\n    const limit = searchDTO.limit ? searchDTO.limit : 5;\n    const skip = searchDTO.page ? (searchDTO.page - 1) * limit : 0;\n    const query = {\n      ...textFilter,\n      ...priorityFilter,\n      ...statusFilter,\n      ...dateFilter,\n      ...(user.role === Role.Manager && {\n        manager: new Types.ObjectId(user.userId),\n      }),\n      ...(user.role === Role.Worker && {\n        worker: new Types.ObjectId(user.userId),\n      }),\n    };\n\n    return await this.taskModel.aggregate([\n      {\n        $match: query,\n      },\n\n      {\n        $facet: {\n          tasks: [{ $skip: skip }, { $limit: limit }],\n          totalCount: [{ $count: 'count' }],\n        },\n      },\n    ]);\n  }\n\n  async findOne(id: string, user: Payload) {\n    return await this.taskModel.findOne({\n      _id: new Types.ObjectId(id),\n      ...(user.role === Role.Manager && {\n        manager: new Types.ObjectId(user.userId),\n      }),\n      ...(user.role === Role.Worker && {\n        worker: new Types.ObjectId(user.userId),\n      }),\n    });\n  }\n\n  async create(task: CreateTaskDTO, user: Payload) {\n    const worker = await this.usersService.findWorkerById(task.worker);\n    if (!worker) {\n      throw new BadRequestException(`Worker not found`);\n    } else if (worker.role !== Role.Worker) {\n      throw new ForbiddenException(`Tasks can only be assigned to workers`);\n    } else if (worker.manager.toString() !== user.userId) {\n      throw new ForbiddenException(\n        `Cannot assign tasks to workers outside your team.`,\n      );\n    }\n    const session = await this.taskModel.startSession();\n    session.startTransaction();\n    try {\n      const createdTask = new this.taskModel({\n        ...task,\n        manager: user.userId,\n      });\n      await createdTask.save({ session: session });\n      await this.roomsService.create(\n        {\n          task: createdTask.id,\n          members: [\n            createdTask.manager.toString(),\n            createdTask.worker.toString(),\n          ],\n        },\n        session,\n      );\n      await session.commitTransaction();\n      return { message: 'Task created successfully', data: createdTask };\n    } catch (e) {\n      await session.abortTransaction();\n      throw e;\n    } finally {\n      await session.endSession();\n    }\n  }\n\n  async update(id: string, data: UpdateTaskDTO, user: Payload) {\n    const task = await this.taskModel.findOne({\n      _id: new Types.ObjectId(id),\n      ...(user.role === Role.Manager && {\n        manager: new Types.ObjectId(user.userId),\n      }),\n      ...(user.role === Role.Worker && {\n        worker: new Types.ObjectId(user.userId),\n      }),\n    });\n\n    if (!task) {\n      throw new NotFoundException('Task not found.');\n    }\n\n    if (task.status === status.COMPLETED) {\n      throw new BadRequestException(`Cannot update completed task`);\n    }\n    if (\n      typeof data.status !== `undefined` &&\n      data.status === status.NEW &&\n      task.status === status.IN_PROGRESS\n    ) {\n      throw new BadRequestException(\n        `Cannot change task status from IN_PROGRESS TO NEW`,\n      );\n    }\n\n    if (typeof data.worker !== `undefined`) {\n      const worker = await this.usersService.findWorkerById(data.worker);\n      if (!worker) {\n        throw new BadRequestException(`Worker not found`);\n      } else if (\n        (user.role === Role.Admin && task.manager !== worker.manager) ||\n        (user.role === Role.Manager &&\n          worker.manager.toString() !== user.userId)\n      ) {\n        throw new ForbiddenException(\n          `Cannot assign tasks to workers outside team.`,\n        );\n      }\n    }\n    const session = await this.taskModel.db.startSession();\n    session.startTransaction();\n    try {\n      if (typeof data.collaborators !== `undefined`) {\n        if (\n          data.collaborators.includes(task.manager.toString()) ||\n          (typeof data.worker === `undefined` &&\n            data.collaborators.includes(task.worker.toString())) ||\n          (typeof data.worker !== `undefined` &&\n            data.collaborators.includes(data.worker))\n        ) {\n          throw new BadRequestException(\n            `Task Manager or Worker cannot be assigned as collaborators`,\n          );\n        }\n        const collaboratorCheck = await this.usersService.checkCollaborators(\n          data.collaborators,\n          task.manager,\n        );\n        if (\n          collaboratorCheck.length === 0 ||\n          collaboratorCheck.length !== data.collaborators.length\n        ) {\n          throw new BadRequestException(`Invalid collaborators provided.`);\n        }\n        console.log(`Check passed successfully`);\n\n        const updatedRoom = await this.roomsService.update(\n          task._id,\n          {\n            members: [\n              ...data.collaborators,\n              task.manager.toString(),\n              typeof data.worker !== `undefined`\n                ? data.worker\n                : task.worker.toString(),\n            ],\n          },\n          session,\n        );\n        if (!updatedRoom) {\n          throw new Error(`There was some error in updating rooms`);\n        }\n      }\n      console.log(data);\n      const updatedTask = await this.taskModel\n        .findByIdAndUpdate(id, data, { new: true })\n        .session(session);\n\n      if (updatedTask.status === status.COMPLETED) {\n        await this.roomsService.update(\n          updatedTask._id,\n          { isActive: false },\n          session,\n        );\n      }\n\n      await this.notificationService.create(\n        {\n          description: await this.notificationService.generateDescription(\n            data,\n            task.title,\n          ),\n          to: [\n            updatedTask.worker.toString(),\n            updatedTask.manager.toString(),\n            ...(typeof updatedTask.collaborators !== `undefined` &&\n              updatedTask.collaborators.map((id) => id.toString())),\n          ],\n        },\n        session,\n      );\n\n      await session.commitTransaction();\n      return { message: 'Task updated successfully', data: updatedTask };\n    } catch (err) {\n      await session.abortTransaction();\n      throw err;\n    } finally {\n      await session.endSession();\n    }\n  }\n\n  async delete(id: string, user: Payload) {\n    const task = await this.taskModel.findOneAndDelete({\n      _id: new Types.ObjectId(id),\n      ...(user.role === Role.Manager && {\n        manager: new Types.ObjectId(user.userId),\n      }),\n    });\n\n    if (!task) {\n      throw new NotFoundException('Task not found.');\n    }\n    const session = await this.taskModel.db.startSession();\n    session.startTransaction();\n    try {\n      const room = await this.roomsService.remove(task._id, session);\n\n      await this.messagesService.delete({ rooms: [room._id] }, session);\n      await session.commitTransaction();\n      return {\n        message: 'Task deleted successfully',\n        data: task,\n      };\n    } catch (err) {\n      await session.abortTransaction();\n      throw err;\n    } finally {\n      await session.endSession();\n    }\n  }\n\n  async removeUser(user: Omit, session: ClientSession) {\n    if (user.role === Role.Manager) {\n      await this.taskModel\n        .deleteMany({ manager: user.userId })\n        .session(session);\n      return;\n    } else if (user.role === Role.Worker) {\n      await this.taskModel\n        .updateMany(\n          { collaborators: user.userId },\n          { $pull: { collaborators: user.userId } },\n        )\n        .session(session);\n\n      await this.taskModel\n        .updateMany({ worker: user.userId }, { worker: null })\n        .session(session);\n\n      return;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/TrialGuard.html":{"url":"guards/TrialGuard.html","title":"guard - TrialGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    TrialGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/common/guards/trial.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/common/guards/trial.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/guards/trial.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { UsersService } from 'src/modules/users/users.service';\n\n@Injectable()\nexport class TrialGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private readonly usersService: UsersService,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const { user } = context.switchToHttp().getRequest();\n    const dbUser = await this.usersService.findById(user.userId);\n    if (!dbUser) {\n      return false;\n    }\n    if (dbUser.isTrialActive === false) {\n      return true;\n    }\n    console.log(`Trial Guard`);\n    console.log(dbUser.id);\n    console.log(dbUser.trialExpiration);\n    if (dbUser.trialExpiration \n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Unique.html":{"url":"interfaces/Unique.html","title":"interface - Unique","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Unique\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/interfaces/users.interfaces.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Unique {\n  email: string;\n  password: string;\n  phone: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMessageDTO.html":{"url":"classes/UpdateMessageDTO.html","title":"class - UpdateMessageDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMessageDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/messages/dtos/update-message-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                content\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/messages/dtos/update-message-dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class UpdateMessageDTO {\n  @IsNotEmpty()\n  @IsString()\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDTO.html":{"url":"classes/UpdatePasswordDTO.html","title":"class - UpdatePasswordDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/update-password-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                verificationCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/update-password-dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/update-password-dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        verificationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/update-password-dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsNumber, IsString } from 'class-validator';\n\nexport class UpdatePasswordDTO {\n  @IsNotEmpty()\n  @IsString()\n  newPassword: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  verificationCode: number;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRoomDTO.html":{"url":"classes/UpdateRoomDTO.html","title":"class - UpdateRoomDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRoomDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/rooms/dtos/update-room-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dtos/update-room-dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsMongoId({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/rooms/dtos/update-room-dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsBoolean, IsMongoId, IsOptional } from 'class-validator';\nexport class UpdateRoomDTO {\n  @IsOptional()\n  @IsArray()\n  @IsMongoId({ each: true })\n  members?: string[];\n\n  @IsOptional()\n  @IsBoolean()\n  isActive?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskDTO.html":{"url":"classes/UpdateTaskDTO.html","title":"class - UpdateTaskDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/tasks/dtos/update-task-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                collaborators\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dueDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                priority\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                worker\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        collaborators\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsMongoId({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/dtos/update-task-dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/dtos/update-task-dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dueDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/dtos/update-task-dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         priority\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(priority)@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/dtos/update-task-dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(status)@IsOptional()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/dtos/update-task-dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/dtos/update-task-dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        worker\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsMongoId()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/tasks/dtos/update-task-dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsMongoId,\n  IsEnum,\n  IsOptional,\n  IsDateString,\n  IsArray,\n} from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport { priority, status } from '../enums/tasks.enums';\n\nexport class UpdateTaskDTO {\n  @IsString()\n  @IsOptional()\n  title?: string;\n\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  @IsEnum(priority)\n  @IsOptional()\n  @Transform(({ value }) => (value ? value.toUpperCase() : value))\n  priority?: priority;\n\n  @IsEnum(status)\n  @IsOptional()\n  @Transform(({ value }) => (value ? value.toUpperCase() : value))\n  status?: status;\n\n  @IsOptional()\n  @IsDateString()\n  dueDate?: Date;\n\n  @IsOptional()\n  @IsMongoId()\n  worker?: string;\n\n  @IsOptional()\n  @IsArray()\n  @IsMongoId({ each: true })\n  collaborators?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDTO.html":{"url":"classes/UpdateUserDTO.html","title":"class - UpdateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/update-user-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                gender\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/update-user-dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/update-user-dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Gender\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Gender)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/update-user-dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/update-user-dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@IsPhoneNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/update-user-dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  IsEnum,\n  IsOptional,\n  IsPhoneNumber,\n} from 'class-validator';\nimport { Gender } from '../enums/users.enums';\n\nexport class UpdateUserDTO {\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @IsString()\n  @IsOptional()\n  @IsPhoneNumber()\n  phone?: string;\n\n  @IsEnum(Gender)\n  @IsOptional()\n  gender?: Gender;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                gender\n                            \n                            \n                                    \n                                hashedRefreshToken\n                            \n                            \n                                    \n                                isTrialActive\n                            \n                            \n                                    \n                                isVerified\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                phone\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                    Optional\n                                trialExpiration\n                            \n                            \n                                    \n                                    Optional\n                                verificationCode\n                            \n                            \n                                    \n                                    Optional\n                                verificationExpiration\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/schemas/user.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/schemas/user.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true, enum: Gender})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/schemas/user.schema.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        hashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/schemas/user.schema.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isTrialActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/schemas/user.schema.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/schemas/user.schema.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/schemas/user.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/schemas/user.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/schemas/user.schema.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true, enum: Role, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/schemas/user.schema.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        trialExpiration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/schemas/user.schema.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        verificationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/schemas/user.schema.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        verificationExpiration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/schemas/user.schema.ts:56\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\nimport { Gender, Role } from '../enums/users.enums';\n\nexport type UserDocument = HydratedDocument;\n\n@Schema({\n  toJSON: {\n    virtuals: true,\n    versionKey: false,\n    transform: (doc, ret) => {\n      delete ret.password;\n      return ret;\n    },\n  },\n  toObject: {\n    virtuals: true,\n    versionKey: false,\n    transform: (doc, ret) => {\n      delete ret.password;\n      return ret;\n    },\n  },\n  timestamps: true,\n  discriminatorKey: `userType`,\n})\nexport class User {\n  @Prop({ required: true })\n  firstName: string;\n\n  @Prop({ required: true })\n  lastName: string;\n\n  @Prop({ required: true })\n  email: string;\n\n  @Prop({ required: true })\n  password: string;\n\n  @Prop({ type: String, required: true, enum: Gender })\n  gender: string;\n\n  @Prop({ required: true })\n  phone: string;\n\n  @Prop({ type: String, required: true, enum: Role, default: Role.Worker })\n  role: string;\n\n  @Prop()\n  hashedRefreshToken: string;\n\n  @Prop()\n  verificationCode?: number;\n\n  @Prop()\n  verificationExpiration?: Date;\n\n  @Prop({ default: true })\n  isTrialActive: boolean;\n\n  @Prop()\n  trialExpiration?: Date;\n\n  @Prop({ default: false })\n  isVerified: boolean;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\nUserSchema.index({\n  firstName: 'text',\n  lastName: `text`,\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserSearchDTO.html":{"url":"classes/UserSearchDTO.html","title":"class - UserSearchDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserSearchDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/user-search.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PaginationDTO\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                gender\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Transform( => )@IsEnum(Gender)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user-search.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Transform( => )@IsEnum(['undefined', 'undefined'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/user-search.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()@IsNumber()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDTO:19\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()@IsNumber()@Min(1)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDTO:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         PaginationDTO\n\n                            \n                        \n                    \n                        \n                                Defined in         PaginationDTO:7\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional } from 'class-validator';\nimport { PaginationDTO } from 'src/common/dtos/pagination-dto';\nimport { Gender, Role } from '../enums/users.enums';\nimport { Transform } from 'class-transformer';\n\nexport class UserSearchDTO extends PaginationDTO {\n  @IsOptional()\n  @Transform(({ value }) => (value ? value.toLowerCase() : value))\n  @IsEnum(Gender)\n  gender?: string;\n\n  @IsOptional()\n  @Transform(({ value }) => (value ? value.toLowerCase() : value))\n  @IsEnum([Role.Manager, Role.Worker])\n  role?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                api/users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findMultiple\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                reassignWorker\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updatePassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                            \n                                    \n                                    \n                                    Async\n                                verifyEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                verifyUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(user: Payload, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(:id)@UseGuards(JwtAuthGuard, TrialGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findMultiple\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultiple(searchDTO: UserSearchDTO, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(new ValidationPipe())@Get()@UseGuards(JwtAuthGuard, TrialGuard, RoleGuard)@Roles(['undefined'])\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                searchDTO\n                                            \n                                                            UserSearchDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, userData: Payload, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(:id)@UseGuards(JwtAuthGuard, TrialGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userData\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        reassignWorker\n                        \n                    \n                \n            \n            \n                \n                        \n                    reassignWorker(id: string, data: ReassignWorkerDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(new ValidationPipe())@Patch(:id/reassign)@UseGuards(JwtAuthGuard, RoleGuard)@Roles(['undefined'])\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:149\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            ReassignWorkerDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePassword(data: UpdatePasswordDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(new ValidationPipe())@Patch(password)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            UpdatePasswordDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(id: string, newData: UpdateUserDTO, userData: Payload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(new ValidationPipe())@Patch(:id)@UseGuards(JwtAuthGuard, TrialGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newData\n                                            \n                                                            UpdateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userData\n                                            \n                                                            Payload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        verifyEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyEmail(data: VerifyDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(new ValidationPipe())@Post(email-verification)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            VerifyDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        verifyUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(:id/verify)@UseGuards(JwtAuthGuard, RoleGuard)@Roles(['undefined'])\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  UseGuards,\n  Res,\n  Param,\n  Patch,\n  UsePipes,\n  ValidationPipe,\n  Body,\n  Post,\n  Delete,\n  UnauthorizedException,\n  Query,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from 'src/common/guards/jwt.guard';\nimport { UsersService } from './users.service';\nimport { CurrentUser } from 'src/common/decorators/current-user.decorator';\nimport { Payload } from 'src/modules/auth/types/auth.types';\nimport { Response } from 'express';\nimport { UpdateUserDTO } from './dtos/update-user-dto';\nimport { UpdatePasswordDTO } from './dtos/update-password-dto';\nimport { VerifyDTO } from './dtos/verify-dto';\nimport { IResponse } from 'src/common/interfaces/response.interface';\nimport { Role } from './enums/users.enums';\nimport { RoleGuard } from 'src/common/guards/role.guard';\nimport { Roles } from 'src/common/decorators/role.decorator';\nimport { UserSearchDTO } from './dtos/user-search.dto';\nimport { TrialGuard } from 'src/common/guards/trial.guard';\nimport { ReassignWorkerDTO } from './dtos/reassign-worker.dto';\n\n@Controller('api/users')\nexport class UsersController {\n  constructor(private userService: UsersService) {}\n\n  @Get(`:id`)\n  @UseGuards(JwtAuthGuard, TrialGuard)\n  async findOne(\n    @Param(`id`) id: string,\n    @CurrentUser() userData: Payload,\n    @Res({ passthrough: true }) res: Response,\n  ): Promise {\n    if (userData.role !== Role.Admin && id !== userData.userId) {\n      throw new UnauthorizedException(`Cannot access data of other users.`);\n    }\n    const user = await this.userService.findById(id);\n    if (!user) {\n      res.status(204);\n      return;\n    }\n    return {\n      message: 'Profile data fetched successfully',\n      data: user,\n    };\n  }\n\n  @UsePipes(\n    new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n    }),\n  )\n  @Get()\n  @UseGuards(JwtAuthGuard, TrialGuard, RoleGuard)\n  @Roles([Role.Admin])\n  async findMultiple(\n    @Query() searchDTO: UserSearchDTO,\n    @Res({ passthrough: true }) res: Response,\n  ): Promise {\n    const data = await this.userService.findMultiple(searchDTO);\n    console.log(data);\n    if (data[0].users.length === 0) {\n      res.status(204);\n      return;\n    }\n\n    return {\n      message: 'Users retrieved successfully',\n      data: {\n        users: data[0].users,\n        totalCount: data[0].totalCount[0].count,\n      },\n    };\n  }\n\n  @UsePipes(\n    new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n    }),\n  )\n  @Patch(`password`)\n  async updatePassword(@Body() data: UpdatePasswordDTO): Promise {\n    return await this.userService.updatePassword(data);\n  }\n\n  @UsePipes(\n    new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n    }),\n  )\n  @Patch(`:id`)\n  @UseGuards(JwtAuthGuard, TrialGuard)\n  async updateProfile(\n    @Param(`id`) id: string,\n    @Body()\n    newData: UpdateUserDTO,\n    @CurrentUser() userData: Payload,\n  ): Promise {\n    if (userData.role !== Role.Admin && id !== userData.userId) {\n      throw new UnauthorizedException(`Cannot access data of other users.`);\n    }\n    return await this.userService.update(newData, id);\n  }\n\n  @UsePipes(\n    new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n    }),\n  )\n  @Post(`email-verification`)\n  async verifyEmail(@Body() data: VerifyDTO): Promise {\n    return await this.userService.verifyEmail(data);\n  }\n\n  @Patch(`:id/verify`)\n  @UseGuards(JwtAuthGuard, RoleGuard)\n  @Roles([Role.Admin])\n  async verifyUser(@Param(`id`) id: string) {\n    return await this.userService.verifyUser(id);\n  }\n\n  @UsePipes(\n    new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n    }),\n  )\n  @Patch(`:id/reassign`)\n  @UseGuards(JwtAuthGuard, RoleGuard)\n  @Roles([Role.Admin])\n  async reassignWorker(\n    @Param(`id`) id: string,\n    @Body() data: ReassignWorkerDTO,\n  ): Promise {\n    return await this.userService.reassignWorkers(id, data);\n  }\n\n  @Delete(`:id`)\n  @UseGuards(JwtAuthGuard, TrialGuard)\n  async delete(\n    @CurrentUser() user: Payload,\n    @Param(`id`) id: string,\n  ): Promise {\n    if (user.role !== Role.Admin && id !== user.userId) {\n      throw new UnauthorizedException(`Cannot access data of other users.`);\n    }\n    return this.userService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nMailModule->UsersModule\n\n\n\n\n\nRoomsModule\n\nRoomsModule\n\nUsersModule -->\n\nRoomsModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                        \n                            RoomsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './schemas/user.schema';\nimport { Worker, WorkerSchema } from 'src/modules/users/schemas/worker.schema';\nimport {\n  Manager,\n  ManagerSchema,\n} from 'src/modules/users/schemas/manager.schema';\nimport { UsersController } from './users.controller';\nimport { MailModule } from 'src/modules/mail/mail.module';\nimport { RoomsModule } from '../rooms/rooms.module';\nimport { TasksModule } from '../tasks/tasks.module';\nimport { NotificationsModule } from '../notifications/notifications.module';\nimport { MessagesModule } from '../messages/messages.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {\n        name: User.name,\n        schema: UserSchema,\n        discriminators: [\n          { name: Worker.name, schema: WorkerSchema },\n          { name: Manager.name, schema: ManagerSchema },\n        ],\n      },\n    ]),\n    MailModule,\n    RoomsModule,\n    forwardRef(() => TasksModule),\n    forwardRef(() => NotificationsModule),\n    forwardRef(() => MessagesModule),\n  ],\n  providers: [UsersService],\n  exports: [UsersService],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyDTO.html":{"url":"classes/VerifyDTO.html","title":"class - VerifyDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/verify-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/verify-dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class VerifyDTO {\n  @IsNotEmpty()\n  @IsString()\n  @IsEmail()\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Worker.html":{"url":"classes/Worker.html","title":"class - Worker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Worker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/schemas/worker.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                manager\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        manager\n                        \n                    \n                \n            \n                \n                    \n                        Type :     mongoose.Schema.Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/schemas/worker.schema.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\nimport { User } from 'src/modules/users/schemas/user.schema';\nimport mongoose from 'mongoose';\n\nexport type WorkerDocument = HydratedDocument;\n\n@Schema()\nexport class Worker extends User {\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'User', default: [] })\n  manager: mongoose.Schema.Types.ObjectId;\n}\n\nexport const WorkerSchema = SchemaFactory.createForClass(Worker);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/WsJwtGuard.html":{"url":"guards/WsJwtGuard.html","title":"guard - WsJwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    WsJwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/chat/guards/ws-jwt.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/chat/guards/ws-jwt.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/chat/guards/ws-jwt.guard.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  Inject,\n  forwardRef,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Socket } from 'socket.io';\nimport * as dotenv from 'dotenv';\nimport { WsException } from '@nestjs/websockets';\nimport { UsersService } from 'src/modules/users/users.service';\ndotenv.config();\n\n@Injectable()\nexport class WsJwtGuard implements CanActivate {\n  constructor(\n    private readonly jwtService: JwtService,\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    console.log('heloooooooo');\n\n    if (context.getType() !== `ws`) {\n      return true;\n    }\n\n    const client: Socket = context.switchToWs().getClient();\n    //const { authorization } = client.handshake.headers;\n    const { authorization } = client.handshake.auth;\n\n    const token = authorization.split(` `)[1];\n    console.log(`Token ${token}`);\n    try {\n      const payload = await this.jwtService.verifyAsync(token, {\n        secret: process.env.JWT_SECRET,\n      });\n      console.log(payload);\n      const dbUser = await this.usersService.findById(payload.userId);\n      if (!dbUser) {\n        return false;\n      }\n      if (dbUser.isTrialActive === false) {\n        return true;\n      }\n      console.log(`Trial Guard`);\n      console.log(dbUser.id);\n      console.log(dbUser.trialExpiration);\n      if (dbUser.trialExpiration \n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/common/decorators/current-user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/role.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/role.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dtos/pagination-dto.ts\n            \n            class\n            PaginationDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/guards/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/guards/trial.guard.ts\n            \n            guard\n            TrialGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interfaces/response.interface.ts\n            \n            interface\n            IResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/strategies/jwt.strategy.ts\n            \n            injectable\n            JWTStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/login.dto.ts\n            \n            class\n            LoginDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/refresh.guard.ts\n            \n            injectable\n            RefreshAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/refresh.strategy.ts\n            \n            injectable\n            RefreshJWTStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/types/auth.types.ts\n            \n            interface\n            Payload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/chat/chat.gateway.ts\n            \n            class\n            ChatGateway\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/chat/guards/ws-jwt.guard.ts\n            \n            guard\n            WsJwtGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/chat/types/chat.types.ts\n            \n            interface\n            ServerToClientEvents\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/mail/dtos/email-dto.ts\n            \n            class\n            EmailDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/messages/dtos/create-message-dto.ts\n            \n            class\n            CreateMessageDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/messages/dtos/message-search-dto.ts\n            \n            class\n            SearchMessageDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/messages/dtos/update-message-dto.ts\n            \n            class\n            UpdateMessageDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/messages/interfaces/messages.interface.ts\n            \n            interface\n            DeleteMessage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/messages/message.schema.ts\n            \n            class\n            Message\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/modules/messages/message.schema.ts\n            \n            variable\n            MessageSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/messages/messages.controller.ts\n            \n            controller\n            MessagesController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/notifications/dtos/create-notification-dto.ts\n            \n            class\n            CreateNotificationDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/notifications/notification.schema.ts\n            \n            class\n            Notification\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/modules/notifications/notification.schema.ts\n            \n            variable\n            NotificationSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/notifications/notification.schema.ts\n            \n            type alias\n            NotificationDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/notifications/notifications.service.ts\n            \n            injectable\n            NotificationsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/rooms/dtos/create-room-dto.ts\n            \n            class\n            CreateRoomDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/rooms/dtos/room-search-dto.ts\n            \n            class\n            RoomSearchDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/rooms/dtos/update-room-dto.ts\n            \n            class\n            UpdateRoomDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/rooms/room.schema.ts\n            \n            class\n            Room\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/modules/rooms/room.schema.ts\n            \n            variable\n            RoomSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/rooms/room.schema.ts\n            \n            type alias\n            RoomDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/rooms/rooms.controller.ts\n            \n            controller\n            RoomsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/rooms/rooms.service.ts\n            \n            injectable\n            RoomsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/seeder/seeder.service.ts\n            \n            injectable\n            SeederService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/stripe/stripe.controller.ts\n            \n            controller\n            StripeController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/stripe/stripe.service.ts\n            \n            injectable\n            StripeService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/tasks/dtos/create-task-dto.ts\n            \n            class\n            CreateTaskDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/tasks/dtos/task-search-dto.ts\n            \n            class\n            TaskSearchDTO\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/tasks/dtos/update-task-dto.ts\n            \n            class\n            UpdateTaskDTO\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/tasks/task.schema.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/modules/tasks/task.schema.ts\n            \n            variable\n            TaskSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/tasks/task.schema.ts\n            \n            type alias\n            TaskDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/create-user-dto.ts\n            \n            class\n            CreateUserDTO\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/reassign-worker.dto.ts\n            \n            class\n            ReassignWorkerDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/update-password-dto.ts\n            \n            class\n            UpdatePasswordDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/update-user-dto.ts\n            \n            class\n            UpdateUserDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/user-search.dto.ts\n            \n            class\n            UserSearchDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/verify-dto.ts\n            \n            class\n            VerifyDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/worker-dto.ts\n            \n            class\n            CreateWorkerDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/users.interfaces.ts\n            \n            interface\n            Unique\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/users/schemas/manager.schema.ts\n            \n            class\n            Manager\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/modules/users/schemas/manager.schema.ts\n            \n            variable\n            ManagerSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/users/schemas/manager.schema.ts\n            \n            type alias\n            ManagerDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                        src/modules/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/users/schemas/user.schema.ts\n            \n            type alias\n            UserDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/schemas/worker.schema.ts\n            \n            class\n            Worker\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/modules/users/schemas/worker.schema.ts\n            \n            variable\n            WorkerSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/modules/users/schemas/worker.schema.ts\n            \n            type alias\n            WorkerDocument\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/18)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mongoose : ^10.1.0\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/platform-socket.io : ^10.4.15\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/websockets : ^10.4.15\n        \n            @types/bcryptjs : ^2.4.6\n        \n            argon2 : ^0.41.1\n        \n            axios : ^1.7.9\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.7\n        \n            mongoose : ^8.8.4\n        \n            nodemailer : ^6.9.16\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            socket.io : ^4.8.1\n        \n            stripe : ^17.5.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Gender   (src/.../users.enums.ts)\n                        \n                        \n                            priority   (src/.../tasks.enums.ts)\n                        \n                        \n                            Role   (src/.../users.enums.ts)\n                        \n                        \n                            status   (src/.../tasks.enums.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/users/enums/users.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        Gender\n                    \n                \n                        \n                            \n                                 Male\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 Female\n                            \n                        \n                        \n                            \n                                Value : female\n                            \n                        \n                        \n                            \n                                 Other\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 Worker\n                            \n                        \n                        \n                            \n                                Value : worker\n                            \n                        \n                        \n                            \n                                 Manager\n                            \n                        \n                        \n                            \n                                Value : manager\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n    src/modules/tasks/enums/tasks.enums.ts\n    \n        \n            \n                \n                    \n                        \n                        priority\n                    \n                \n                        \n                            \n                                 LOW\n                            \n                        \n                        \n                            \n                                Value : LOW\n                            \n                        \n                        \n                            \n                                 MEDIUM\n                            \n                        \n                        \n                            \n                                Value : MEDIUM\n                            \n                        \n                        \n                            \n                                 HIGH\n                            \n                        \n                        \n                            \n                                Value : HIGH\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        status\n                    \n                \n                        \n                            \n                                 NEW\n                            \n                        \n                        \n                            \n                                Value : NEW\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : COMPLETED\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nTask Manager\nDescription: -\nThe Task-Manager is an all-inclusive platform made to make it easier for managers and employees to communicate, assign tasks, and track progress. By emphasizing user roles, usability, and effective task management, this system guarantees that teams can work together productively and remain on top of their duties.\nFeatures: -\nRegistration and User Management:\n\nManager Users: Managers have the ability to create, update, delete, and assign tasks to workers.\nWorker Users: Workers can view the tasks assigned to them, update their task status (e.g., Not Started, In Progress, Completed).\n\nLogin and Role-Based Access Control:\n\nUsers must log in using secure credentials.\nRole-based access control is enforced by the system, guaranteeing that only authorized users can access particular routes or features. While workers can only view and change the tasks they have been assigned, managers have complete control over task and user management.\n\nTask Management:\n\nManagers can create tasks with essential details such as title, description, priority, due date, and task status.\nTasks can be updated by users to reflect changes in priority or due date.\nWorkers can filter and view tasks based on priority and due date, helping them to prioritize their work effectively.\n\nTask-Based Chat:\n\nIntegrated task-based chat allows both managers and workers to communicate directly about specific tasks. This feature enhances collaboration, resolves misunderstandings, and ensures clarity in task expectations.\n\nNotifications:\n\nWhen a task is updated, the system automatically sends notifications to the relevant workers and managers. This helps make sure that both parties remain up to date about their tasks.\n\nPayment:\n\nAfter a trial period, users have to make a one-time payment. This helps the user get a feel for the system and check if they like it or not.\n\n\nWorkflow:\n\nManager Registration: - The manager registers in the system to create and assign tasks.\nWorker Registration: - The workers also register in the system so that they can perform and update the status of tasks.\nTask Management :- The workers and managers manage and co-ordinate their tasks.\nPayment: - After the trial period ends, the users are asked to pay a one time fee.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoomsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SeederModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_exports\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_exports\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_exports\n\n\n\ncluster_NotificationsModule_providers\n\n\n\ncluster_RoomsModule\n\n\n\ncluster_RoomsModule_exports\n\n\n\ncluster_RoomsModule_providers\n\n\n\ncluster_SeederModule\n\n\n\ncluster_SeederModule_providers\n\n\n\ncluster_StripeModule\n\n\n\ncluster_StripeModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_exports\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nChatModule->MessagesModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nNotificationsModule -->\n\nChatModule->NotificationsModule\n\n\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nChatGateway \n\nChatGateway \n\nChatGateway  -->\n\nChatModule->ChatGateway \n\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nStripeModule\n\nStripeModule\n\nStripeModule -->\n\nMailModule->StripeModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nMailModule->UsersModule\n\n\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nMessagesModule->TasksModule\n\n\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nMessagesService \n\nMessagesService \n\nMessagesService  -->\n\nMessagesModule->MessagesService \n\n\n\nTasksModule -->\n\nNotificationsModule->TasksModule\n\n\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nNotificationsService \n\nNotificationsService \n\nNotificationsService  -->\n\nNotificationsModule->NotificationsService \n\n\n\n\n\nRoomsModule\n\nRoomsModule\n\nChatModule -->\n\nRoomsModule->ChatModule\n\n\n\nMessagesModule -->\n\nRoomsModule->MessagesModule\n\n\n\nTasksModule -->\n\nRoomsModule->TasksModule\n\n\n\nUsersModule -->\n\nRoomsModule->UsersModule\n\n\n\nAppModule -->\n\nRoomsModule->AppModule\n\n\n\n\n\nRoomsService \n\nRoomsService \n\nRoomsService  -->\n\nRoomsModule->RoomsService \n\n\n\n\n\nSeederModule\n\nSeederModule\n\nAppModule -->\n\nSeederModule->AppModule\n\n\n\nAppModule -->\n\nStripeModule->AppModule\n\n\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nTasksService \n\nTasksService \n\nTasksService  -->\n\nTasksModule->TasksService \n\n\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nStripeModule -->\n\nUsersModule->StripeModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJWTStrategy\n\nJWTStrategy\n\nAuthModule -->\n\nJWTStrategy->AuthModule\n\n\n\n\n\nRefreshJWTStrategy\n\nRefreshJWTStrategy\n\nAuthModule -->\n\nRefreshJWTStrategy->AuthModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nNotificationsModule -->\n\nNotificationsService->NotificationsModule\n\n\n\n\n\nRoomsService\n\nRoomsService\n\nRoomsModule -->\n\nRoomsService->RoomsModule\n\n\n\n\n\nSeederService\n\nSeederService\n\nSeederModule -->\n\nSeederService->SeederModule\n\n\n\n\n\nStripeService\n\nStripeService\n\nStripeModule -->\n\nStripeService->StripeModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    28 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ManagerDocument   (src/.../manager.schema.ts)\n                        \n                        \n                            NotificationDocument   (src/.../notification.schema.ts)\n                        \n                        \n                            RoomDocument   (src/.../room.schema.ts)\n                        \n                        \n                            TaskDocument   (src/.../task.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                        \n                            WorkerDocument   (src/.../worker.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/users/schemas/manager.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ManagerDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/notifications/notification.schema.ts\n    \n    \n        \n            \n                \n                    \n                    NotificationDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/rooms/room.schema.ts\n    \n    \n        \n            \n                \n                    \n                    RoomDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/tasks/task.schema.ts\n    \n    \n        \n            \n                \n                    \n                    TaskDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/users/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/users/schemas/worker.schema.ts\n    \n    \n        \n            \n                \n                    \n                    WorkerDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (src/.../current-user.decorator.ts)\n                        \n                        \n                            ManagerSchema   (src/.../manager.schema.ts)\n                        \n                        \n                            MessageSchema   (src/.../message.schema.ts)\n                        \n                        \n                            NotificationSchema   (src/.../notification.schema.ts)\n                        \n                        \n                            Roles   (src/.../role.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../role.decorator.ts)\n                        \n                        \n                            RoomSchema   (src/.../room.schema.ts)\n                        \n                        \n                            TaskSchema   (src/.../task.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                        \n                            WorkerSchema   (src/.../worker.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/modules/users/schemas/manager.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ManagerSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Manager)\n                    \n                \n\n\n        \n    \n\n    src/modules/messages/message.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MessageSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new mongoose.Schema(\n  {\n    sender: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: `User`,\n      required: true,\n    },\n    content: { type: String, required: true },\n    room: { type: mongoose.Schema.Types.ObjectId, ref: `Room`, index: true },\n  },\n  { timestamps: true },\n)\n                    \n                \n\n\n        \n    \n\n    src/modules/notifications/notification.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NotificationSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Notification)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/modules/rooms/room.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoomSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Room)\n                    \n                \n\n\n        \n    \n\n    src/modules/tasks/task.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TaskSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Task)\n                    \n                \n\n\n        \n    \n\n    src/modules/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n    src/modules/users/schemas/worker.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WorkerSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Worker)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
